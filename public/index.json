
[{"content":"","date":"15 diciembre 2024","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"Los VieRnes de Bioinformática se encontrarán dedicados una experiencia libre de acoso para todas y todos sus participantes. No toleramos ninguna forma de acoso en cualquiera de sus formas. Este código de conducta aplica a todos los espacios de los VieRnes de Bioinformática, incluyendo meetups, Twitter, Slack, Discord, Zoom, listas de correo, tanto en sesiones en línea como fuera de ella. Cualquier persona que viole este código de conducta podrá ser sancionada o expulsada de cualquiera de estos espacios a discreción del comité organizador.\nAlgunos espacios de los VieRnes de Bioinformática pueden tener normas adicionales, las cuales se harán de claro conocimiento a las y los participantes de dichos espacios. Las y los participantes son responsables de conocer y atender las normas mencionadas.\nEl acoso incluye:\nComentarios ofensivos relacionados con el género, la identidad o expresión de género, orientación sexual, capacidad física, capacidad mental, apariencia física, apariencia corporal, edad, raza o religión.\nComentarios no solicitados referentes a prácticas o estilos de vida personales, incluyendo aquellos relacionados con la alimentación, salud, paternidad, o empleo.\nDeliberado uso indebido del género.\nImágenes o comportamientos sexuales no solicitados o fuera de tema en espacios donde no son apropiados.\nContacto físico o insinuaciones de contacto físico (por ejemplo, descripciones textuales sobre abrazos o contacto físico) sin consentimiento o después de haber solicitado su no repetición.\nAmenazas de violencia.\nIncitación a la violencia hacia cualquier persona, incluido alentar a una persona a suicidarse o autolesionarse.\nIntimidación.\nAcechamiento o seguimiento inapropiado.\nFotografías o grabaciones acosadoras, incluido el registro de actividad en línea con fines de acoso.\nInterrupción sostenida de una discusión.\nAtención sexual no solicitada.\nConductas sociales inapropiadas, como solicitar/asumir niveles inapropiados de intimidad.\nContinuación de la comunicación uno a uno, después de una solicitud de cese de la comunicación.\nExposición deliberada de cualquier aspecto de la identidad de una persona sin su consentimiento, excepto cuando sea necesario para proteger a las personas vulnerables del abuso intencional.\nPublicación de comunicación privada no relacionada con una situación de acoso.\n","date":"15 diciembre 2024","externalUrl":null,"permalink":"/codigo/","section":"","summary":"Los VieRnes de Bioinformática se encontrarán dedicados una experiencia libre de acoso para todas y todos sus participantes.","title":"Codigo de Conducta","type":"page"},{"content":" ","date":"27 agosto 2024","externalUrl":null,"permalink":"/posts/cursos/","section":"Publicaciones","summary":" ","title":"Cursos","type":"posts"},{"content":" EveliaCoss/Filogenetic_Workshop2024 Curso: Bases para la inferencia filogenética, construcción, lectura e interpretación de árboles filogenéticos, 27 agosto-26 septiembre 2024 null 9 1 ","date":"27 agosto 2024","externalUrl":null,"permalink":"/posts/cursos/filogenetica/","section":"Publicaciones","summary":" EveliaCoss/Filogenetic_Workshop2024 Curso: Bases para la inferencia filogenética, construcción, lectura e interpretación de árboles filogenéticos, 27 agosto-26 septiembre 2024 null 9 1 ","title":"Filogenetica","type":"posts"},{"content":" ","date":"27 agosto 2024","externalUrl":null,"permalink":"/posts/","section":"Publicaciones","summary":" ","title":"Publicaciones","type":"posts"},{"content":"","date":"3 agosto 2024","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"Objetivo: Que quienes lo cursen adquieran la capcidad de comprender, interpretar construir hipotesis filogeneticas (arboles filogeneticos) con marcadores moleculares.\nCuando observamos un árbol filogenético, parece sencillo: ramas que se conectan, hojas que representan linajes, bifurcaciones que sugieren parentesco. Pero cuando me detengo a pensarlo, me pregunto\u0026hellip; ¿qué más está ahí, más allá de lo que vemos?\nAl igual que un árbol en la naturaleza, cada filogenia tiene una historia. Ese árbol que miras en el bosque: ¿sabes cuántas tormentas ha resistido? ¿Cuántas ramas perdió en inviernos difíciles o cuántas hojas cayeron en cada cambio de estación? Probablemente no, pero ahí está, de pie, testigo de todo lo que lo moldeó. Así también, un árbol filogenético es solo una parte visible de un largo viaje de evolución y adaptación.\nPero si lo pensamos, hay formas de rastrear. Por ejemplo, si en primavera vemos hojas marchitas, cuando deberían estar verdes, podría inferir que este árbol ha pasado por algo: quizá una enfermedad, quizás un evento difícil. Si me acerco más, puedo observar marcas en su corteza, huellas de lo que enfrentó.\nDe la misma forma en que identificamos esas señales en los árboles reales, también podemos percibirlas en una filogenia. Cada rama, cada nodo, cada divergencia nos habla de un proceso, de una historia que, aunque no siempre visible a simple vista, está ahí.\nY al reflexionar en ello, todo esto refuerza lo que significa un árbol, sea físico o filogenético. Lo que nos permite no solo observarlo, sino aprender de las huellas que porta y comprender lo que puede revelarnos de su viaje evolutivo.\nEl primer árbol filogenético # \u0026ldquo;I think case must be that one generation should have as many living as now. To do this and to have as many species in same genus (as is) requires extinction . Thus between A + B the immense gap of relation. C + B the finest gradation. B+D rather greater distinction. Thus genera would be formed. Bearing relation\u0026rdquo; (next page begins) \u0026ldquo;to ancient types with several extinct forms\u0026rdquo; Transmutation of Species (1837) on view at the Museum of Natural History in Manhattan. La imagen representa un hito en la historia de la biología, siendo el primer bosquejo de un árbol filogenético realizado por Charles Darwin en 1837. Este simple dibujo refleja una idea revolucionaria: que todas las especies están relacionadas y comparten un ancestro común. La clave de su propuesta radicó en nuestra capacidad para reconocer patrones en la naturaleza, algo esencial en la construcción de hipótesis evolutivas.\nEn el árbol de Darwin, las líneas divergen desde un punto común, simbolizando cómo las especies se originan a través de la evolución y cómo las más cercanas comparten un ancestro común reciente. Este esquema fue el inicio conceptual de cómo hoy entendemos y construimos filogenias utilizando herramientas modernas y marcadores moleculares. A pesar de la sencillez del dibujo, la profundidad de su mensaje transformó nuestra forma de entender la biodiversidad y las conexiones entre los seres vivos.\nClaro en este momento no teniamos conocimiento del mundo invicible, genes, cromosomas, proteinas, etc. Pero la idea de que las especies estan relacionadas y comparten un ancestro común, es la base de la filogenetica.\n","date":"3 agosto 2024","externalUrl":null,"permalink":"/posts/cursos/filogenetica/bloque1/","section":"Publicaciones","summary":"Objetivo: Que quienes lo cursen adquieran la capcidad de comprender, interpretar construir hipotesis filogeneticas (arboles filogeneticos) con marcadores moleculares.","title":"Bases para la inferencia filogenética, construcción, lectura e interpretación de árboles filogenéticos","type":"posts"},{"content":"","date":"3 agosto 2024","externalUrl":null,"permalink":"/tags/bloque/","section":"Tags","summary":"","title":"Bloque","type":"tags"},{"content":"","date":"3 agosto 2024","externalUrl":null,"permalink":"/tags/filogenetica/","section":"Tags","summary":"","title":"Filogenetica","type":"tags"},{"content":"","date":"3 agosto 2024","externalUrl":null,"permalink":"/series/filogenetica/","section":"Series","summary":"","title":"Filogenetica","type":"series"},{"content":"Maria G. Segovia Ramírez,PhD Scientific Core Team, Data Science-Solena | Bioinformatics | Evolution | Functional Genomics | Ecology |Genetic Diversity | Biogeography | Conservation Biology | GIS\n","date":"3 agosto 2024","externalUrl":null,"permalink":"/authors/mguadalupe/","section":"Authors","summary":"Maria G.","title":"María Guadalupe Segovia Ramírez, PhD","type":"authors"},{"content":"","date":"3 agosto 2024","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"3 agosto 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"2 agosto 2024","externalUrl":null,"permalink":"/tags/introduccion/","section":"Tags","summary":"","title":"Introduccion","type":"tags"},{"content":" ","date":"2 agosto 2024","externalUrl":null,"permalink":"/authors/israel/","section":"Authors","summary":" ","title":"Israel Aguilar Ordoñez","type":"authors"},{"content":"","date":"2 agosto 2024","externalUrl":null,"permalink":"/tags/nextflow/","section":"Tags","summary":"","title":"Nextflow","type":"tags"},{"content":" ","date":"2 agosto 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-24/","section":"Publicaciones","summary":" ","title":"Nextflow parte 3","type":"posts"},{"content":"","date":"2 agosto 2024","externalUrl":null,"permalink":"/tags/viernes/","section":"Tags","summary":"","title":"Viernes","type":"tags"},{"content":"","date":"2 agosto 2024","externalUrl":null,"permalink":"/series/viernes2024/","section":"Series","summary":"","title":"Viernes2024","type":"series"},{"content":"","date":"26 julio 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-23/","section":"Publicaciones","summary":"","title":"Nextflow parte 2","type":"posts"},{"content":" EveliaCoss/ViernesBioinfo2024 Viernes de Bioinformatica en el LIIGH, 2 febrero - 2 de agosto 2024 HTML 22 2 ","date":"25 julio 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/","section":"Publicaciones","summary":" EveliaCoss/ViernesBioinfo2024 Viernes de Bioinformatica en el LIIGH, 2 febrero - 2 de agosto 2024 HTML 22 2 ","title":"Viernes de Bioinformatica 2024","type":"posts"},{"content":" EveliaCoss/ViernesBioinfo2024_parte2 Viernes de Bioinformatica en el LIIGH, 7 septiembre - 6 de diciembre 2024 HTML 8 0 ","date":"25 julio 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica2-2024/","section":"Publicaciones","summary":" EveliaCoss/ViernesBioinfo2024_parte2 Viernes de Bioinformatica en el LIIGH, 7 septiembre - 6 de diciembre 2024 HTML 8 0 ","title":"Viernes de Bioinformatica 2024 parte 2","type":"posts"},{"content":" ","date":"19 julio 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-22/","section":"Publicaciones","summary":" ","title":"Nextflow parte 1","type":"posts"},{"content":" Material: # Presentacion ","date":"5 julio 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-21/","section":"Publicaciones","summary":" Material: # Presentacion ","title":" Introducción a Bash Parte 2","type":"posts"},{"content":"","date":"5 julio 2024","externalUrl":null,"permalink":"/tags/bash/","section":"Tags","summary":"","title":"Bash","type":"tags"},{"content":" Material:\nInstalación de una terminal de BASH (PREVIO A LA CLASE)\nOpción A: Instalar una Máquina virtual (VM) en sus computadoras\nVideos explicativos: https://youtu.be/Rt0agy32pFo , https://youtu.be/cInUitD6Wws\nManuales de instalación: Manuales De Instalación de Virtual Box y Ubuntu\nOpción B: Instalar Git Bashy MobaXterm\nInstalar Git Bash (seguir las instrucciones de instalación https://miguel-mx.github.io/2024-01-24-ccm-unam-swc/)\nInstalar MobaXterm https://mobaxterm.mobatek.net/\nEjercicios para practicar: RegexOne\n","date":"28 junio 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-20/","section":"Publicaciones","summary":"Material:","title":" Introducción a Bash Parte 1","type":"posts"},{"content":"","date":"21 junio 2024","externalUrl":null,"permalink":"/tags/datos/","section":"Tags","summary":"","title":"Datos","type":"tags"},{"content":"Postdoctoral Research Associate, Mathematician, Bioinformatician, Mathematical Modeling, Metagenomes, Genome Mining\n","date":"21 junio 2024","externalUrl":null,"permalink":"/authors/shaday/","section":"Authors","summary":"Postdoctoral Research Associate, Mathematician, Bioinformatician, Mathematical Modeling, Metagenomes, Genome Mining","title":"Dr. Shaday Guerrero Flores","type":"authors"},{"content":" Material # Clase 19- for loops ","date":"21 junio 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-19/","section":"Publicaciones","summary":" Material # Clase 19- for loops ","title":"Introducción a Python Parte 4","type":"posts"},{"content":"","date":"21 junio 2024","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":" Material # Clase 18 - plotting y listas ","date":"14 junio 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-18/","section":"Publicaciones","summary":" Material # Clase 18 - plotting y listas ","title":"Introducción a Python Parte 3","type":"posts"},{"content":" CRAN. # Lo primero que tenemos que hacer es ir a la pagina de CRAN y seleccionar la descarga dependiendo nuestro sistema operativo.\nLinux (Ubuntu) # Lo primero que vamos a hacer es abrir nuestra terminal Ctrl + Alt + T y vamos a ver el inicio asi:\nusuario@nombre-de-computadora:directorio$ Después en este espacio escribimos lo siguiente (Probablemente te pida contraseña, es tu computadora pidiéndote permisos para crear y modificar archivos):\n# Actualizar indices del sistema sudo apt update -qq # Instalar unos paquetes sudo apt install --no-install-recommends software-properties-common dirmngr # Añadir una clave de acceso para descargar R wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc # Añadir el repositorio de R desde CRAN sudo add-apt-repository \u0026#34;deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\u0026#34; # Despues ejecutamos la orden de instalar R sudo apt install --no-install-recommends r-base # Por ultimo instalamos mas de 5000 paquetes de CRAN sudo add-apt-repository ppa:c2d4u.team/c2d4u4.0+ Listo, ya tienes R en Linux Ubuntu, si sabes como instalarlo en otra distribución puedes mandar tu aportación a mi correo (jasvpj@gmail.com)\nWindows # Descarga con este enlace el ejectuable y sigue la guia de instalación.\nMac OS # M1-3 Macs # Descarga con este enlace el ejectuable y sigue la guia de instalación.\nIntel Macs # Descarga con este enlace el ejectuable y sigue la guia de instalación.\n","date":"8 junio 2024","externalUrl":null,"permalink":"/posts/tutoriales/instalacion-de-r/","section":"Publicaciones","summary":"CRAN.","title":"Instalacion de R","type":"posts"},{"content":" ","date":"8 junio 2024","externalUrl":null,"permalink":"/authors/jorge/","section":"Authors","summary":" ","title":"Jorge Alfredo Suazo Victoria","type":"authors"},{"content":" ¿Qué es R? # R es un entorno de desarrollo de software libre y lenguaje de programación.\n¿Por qué usar R? # Es ampliamente utilizado para la computación estadística, gráfica, y de machine learning. Ofrece una amplia variedad de funciones estadísticas(modelos lineales y no lineales, pruebas estadísticas clásicas, análisis de series de tiempo, clasificación, agrupamiento, etc.), y para realizar gráficas.\nAdemás, existen numerosas librerías que nos permiten realizar el análisis y más graficas, incluyendo para análisis de datos genómicos.\nMeme importante # pythonzzz ¿Cómo instalamos R? # Aqui hay una guia para la instalacion de R\nInstalacion de R 8 junio 2024\u0026middot;215 palabras\u0026middot; loading \u0026middot; loading Jorge Alfredo Suazo Victoria R Tutorial CRAN. Rstudio # Es recomendable utilizar Rstudio para empezar a programar en R, puedes utilizar la siguiente guia para instalar y empezar un proyecto en Rstudio:\nIntroduccion a Rstudio 2 febrero 2024\u0026middot;1991 palabras\u0026middot; loading \u0026middot; loading Sofia Guadalupe Salazar Magaña ,\u0026nbsp; Evelia Lorena Coss-Navarrete R Tutorial Rstudio Viernes RStudio es un entorno de desarrollo integrado (IDE) para R. Comandos Basicos # Podemos entender a R como una consola super poderosa, y como cualquier computadora podemos: sumar, restar, dividir y multiplicar.\n#Sumar 2 + 2 #Restar 2 - 2 #Dividir 2 / 2 #Multiplicar 2 * 2 Como puedes ver en R, a diferencia de otros lenguajes no es necesario utilizar algún símbolo para indicar el fin de una operación básica. Ademas de esto R puede sacar el Modulo, que es el restante de una división.\n#Modulo 10 %% 3 #El resultado deberia de ser 1, el restante de division de 10/3 R también tiene un comando para obtener la parte entera de una división.\n#Parte entera de una division 10 %/% 3 #El resultado deberia de ser 3 Con esto podemos hacer operaciones basicas de calculadora pero querermos ir más allá.\nVariables # En R utilizamos \u0026lt;- para asignar un valor de cualquier tipo a una variable, una variable en programación en simples palabras es el nombre o identificacion que recibe un valor, estas pueden ser estaticas o pueden cambiar, ser locales o globales, etc.\n¡Advertencia! Para asignar variables globales se usa \u0026lt;\u0026lt;- Tipos de Variables # En R, existen varios tipos de variables que puedes utilizar en tus análisis y programación. Estos están los más comunes:\n-Numérico (numeric): Representa valores decimales, como 4.5. También incluye números enteros (integers).\n-Carácter (character): Se utiliza para almacenar texto o cadenas de caracteres. Por ejemplo, “Hola, mundo”.\n-Lógico (logical): Puede tomar dos valores: TRUE o FALSE. Se utiliza para expresar condiciones o respuestas binarias.\n-Complejo (complex): Representa números complejos, como 3 + 2i.\n-Crudo (raw): Almacena datos en formato binario sin procesar.\n-Además, hay otros tipos más avanzados, como factores (que representan categorías).\nAsignacion y uso de variables # Tenemos en una situación donde queremos registrar nuestro nombre, edad y fecha de cumpleaños.\n#Registraremos nuestro nombre, los nombres son cadenas de caracteres #es decir su comportamiento es diferente al de los numeros (Por ahora) #Para escribir una cadena de texto usamos comillas(\u0026#34;\u0026#34;)(\u0026#39;\u0026#39;) Mi_nombre \u0026lt;- \u0026#34;Jorge Alfredo Suazo Victoria\u0026#34; #Nuestro cumpleaños va a ser registrado en el siguiente orden [Dia] de [Mes] #de [año], esto tendra importancia más adelante Mi_cumpleaños \u0026lt;- \u0026#34;30 de Diciembre de 2005\u0026#34; #La edad simplemente será un numero Mi_edad \u0026lt;- 18 Si quisieramos imprimir un saludo con estos datos tenemos las siguientes opciones.\n#Utilizando la funcion cat(), el separador de cada variable es la coma cat(\u0026#34;¡Hola!, mi nombre es\u0026#34;, Mi_nombre ,\u0026#34;tengo\u0026#34; , Mi_edad , \u0026#34;años, y cumplo el\u0026#34; , Mi_cumpleaños) #Utilizando sprintf(), es una forma muy parecida a como hacemos cadenas de #texto en lenguajes como C print(sprintf(\u0026#34;Hola, mi nombre es %s, tengo %d años, y cumplo el %s.\u0026#34;, Mi_nombre, Mi_edad, Mi_cumpleaños)) Las diferencias entre ambos son las siguientes:\nprint(): # Devuelve el objeto tal cual, incluyendo comillas si es una cadena de caracteres. Útil para imprimir variables, mensajes o resultados con fines de depuración. Puede personalizarse con argumentos como digits para controlar el número de decimales. Puede imprimir varios tipos de objetos, como cadenas, variables, tablas, marcos de datos y más. cat(): # Concatena y muestra objetos sin comillas. Permite especificar un separador personalizado con sep. Solo admite vectores atómicos (conjunto de datos del mismo tipo). Puede usarse para escribir valores en un archivo. Agrega saltos de línea automáticamente si usas \\\u0026quot;\\\\n\\\u0026quot; como separador. Elimina información específica del código (por ejemplo, convierte n en una nueva línea). Vectores o listas # En R, las diferencias principales entre un vector y una lista son las siguientes:\nUnidimensional vs. Multidimensional: # Un vector es un objeto unidimensional. Puede contener elementos del mismo tipo (numéricos, lógicos, caracteres, etc.). Una lista, en cambio, es un objeto multidimensional. Puede contener elementos de diferentes tipos. Estructura y Contenido: # Los vectores contienen elementos homogéneos (del mismo tipo). Las listas pueden contener elementos heterogéneos (de diferentes tipos), incluso otras listas. El siguiente problema sera descifrar que edad tendremos en una fecha impuesta por el usuario, para esto tenemos que desentrañar mi fecha de cumpleaños.\n#Utilizaremos el comando strsplit(), este comando separa un string (cadena de #texto) usando el separador que establece el usuario, ejemplo: strsplit(Mi_cadena, \u0026#34;separador\u0026#34;) Mi_cumpleaños_separado \u0026lt;- strsplit(Mi_cumpleaños, \u0026#34; \u0026#34;) print(Mi_cumpleaños_separado) #Veremos que tipo de objeto es Mi_cumpleaños_separado class(Mi_cumpleaños_separado) Listas # Una lista en R es una colección ordenada de cualquier objeto. A diferencia de los vectores y las matrices, donde los elementos deben ser del mismo tipo, en el caso de las listas, los elementos pueden ser de diferentes tipos o almacenar distintas estructuras.\nEn una lista, se pueden extraer elementos de la siguiente forma:\n#El primer renglon se escribe [[n]] y para la columna es [m] Dia_de_mi_cumple \u0026lt;- Mi_cumpleaños_separado[[1]][1] #Si quisieramos agregar otro renglon es de la siguiente manera Mi_cumpleaños_separado[[2]] \u0026lt;- list() #Le decimos que la segunda seccion de #la lista tambien es una lista (xd) Mi_cumpleaños_separado[[2]][1] \u0026lt;- \u0026#34;howdy\u0026#34; print(Mi_cumpleaños_separado[[2]][1]) #Comprobacion #Vamos a guardar el dia, mes y año en diferentes variables Dia_cumple \u0026lt;- Mi_cumpleaños_separado[[1]][1] Mes_cumple \u0026lt;- Mi_cumpleaños_separado[[1]][3] Año_cumple \u0026lt;- Mi_cumpleaños_separado[[1]][5] #Listo, ahora revisaremos que tipo de objeto es cada uno cat(class(Dia_cumple), class(Mes_cumple), class(Año_cumple)) El unico que concuerda es el mes, porque el dia y el año son numeros, para cambiar el tipo de variable debemos hacer lo siguiente.\n#La función as.numeric() se utiliza para convertir un valor o una cadena de #texto en un número decimal (de punto flotante) en R. Cuando aplicas #as.numeric() a una cadena de caracteres que representa un número, R intenta #interpretarla como un número y devuelve el valor numérico correspondiente. as.numeric(Dia_cumple) #Comprobamos print(class(Dia_cumple)) Al pareceer no se guardo el cambio que realizamos.\n¡Advertencia! Para darle un nuevo valor o clase a una variable hay que sobreescribirla #Sobreescribimos Dia_cumple \u0026lt;- as.numeric(Dia_cumple) Año_cumple \u0026lt;- as.numeric(Año_cumple) cat(class(Dia_cumple), class(Año_cumple)) Listo ahora falta cambiar los meses a numeros, pero como son puramente texto tenemos que hacer cambios más radicales.\nDeclaraciones Condicionales # if y else # Basicamente, if es si pasa algo y else es si no pasa ese algo.\nEjemplo: Si tengo 30 pesos me compro un elote y si no me pongo a llorar.\nOperadores comunes # Igualdad (==): El operador == se utiliza para verificar si dos valores son iguales.\nDesigualdad (!=): El operador != se utiliza para verificar si dos valores no son iguales.\nMayor (\u0026gt;): El operador \u0026gt; verifica si el valor de la izquierda es mayor al valor de la derecha.\nMayor o Igual (\u0026gt;=): El operador \u0026gt;= verifica si el valor de la izquierda es mayor o igual al valor de la derecha.\nMenor (\u0026lt;): El operador \u0026lt; verifica si el valor de la izquierda es menor al valor de la derecha.\nMenor o Igual (\u0026lt;=): El operador \u0026lt;= verifica si el valor de la izquierda es menor o igual al valor de la derecha.\ngraph TD; Title(Problema del elote)---\u003e A[Dinero] A[Dinero]--\u003eB{¿Tienes 30 pesos?}; B --SI---\u003e Si[Feli] B --NO---\u003e No[Tite] # El dinero es igual a 30 Money \u0026lt;- 30 # ¿El dinero es igual a 30? if(Money == 30){ #Si print(\u0026#34;feli\u0026#34;) }else{ #No print(\u0026#34;tite\u0026#34;) } Pero\u0026hellip; ¿Y si tenemos más de dos opciones?(if(options != 2))\nifelse # Si tengo exactamente 30 pesos, quiero imprimir ‘Justo’. Si tengo más de 30 pesos, quiero imprimir ‘Espero cambio devuelta’. Y si no tengo dinero, quiero imprimir ‘tite’.\ngraph TD; Title(Problema del elote)---\u003e A[Dinero] A[Dinero]--\u003eB{¿Tienes 30 pesos?}; B --SI---\u003e Si[Feli] B --NO---\u003e No{Menos o mas} No --\"-\"---\u003e D[tite] No --\"+\"---\u003e C[Espero Cambio] # El dinero es igual a 30 dinero \u0026lt;- 30 # ¿El dinero es igual a 30? ifelse(dinero == 30, \u0026#34;Justo\u0026#34;, ifelse(dinero \u0026gt; 30, \u0026#34;Espero cambio devuelta\u0026#34;, \u0026#34;tite\u0026#34;)) #En R funciona un comando en diferentes lineas hasta que se cierra el parentesis Con esto podemos hacerenos una idea de como hacer que los meses en texto se vuelvan numeros. Lo voy a hacer pero despues veremos una forma más eficiente de hacerlo.\n#Sobreescribir Mes_cumple \u0026lt;- ifelse(Mes_cumple == \u0026#34;Diciembre\u0026#34;, 12, ifelse(Mes_cumple == \u0026#34;Noviembre\u0026#34;, 11, ifelse(Mes_cumple == \u0026#34;Octubre\u0026#34;, 10, ifelse(Mes_cumple == \u0026#34;Septiembre\u0026#34;, 9, ifelse(Mes_cumple == \u0026#34;Agosto\u0026#34;, 8, ifelse(Mes_cumple == \u0026#34;Julio\u0026#34;, 7, ifelse(Mes_cumple == \u0026#34;Junio\u0026#34;, 6, ifelse(Mes_cumple == \u0026#34;Mayo\u0026#34;, 5, ifelse(Mes_cumple == \u0026#34;Abril\u0026#34;, 4, ifelse(Mes_cumple == \u0026#34;Marzo\u0026#34;, 3, ifelse(Mes_cumple == \u0026#34;Febrero\u0026#34;, 2, ifelse(Mes_cumple == \u0026#34;Enero\u0026#34;, 1, \u0026#34;NA\u0026#34;)))))))))))) #Al final se puso \u0026#34;NA\u0026#34;(No aplica) Si no concuerda con ningun mes existente print(Mes_cumple) Switch case # El switch es como si verdaderamente estuvieramos añadiendo mas opciones, ifelse se parece más a:\ngraph TD; Title(Ifelse)---\u003e A[variable] A --\u003e B{condicion1} B --Si---\u003e Af[Fin1] B --\"No\"---\u003e C{Condicion2} C --\"Si\"---\u003e Bf[Fin2] C --\"No\"---\u003e D{Condicion3} D --\"Si\"---\u003e Cf[Fin3] D --\"No\"---\u003e Df[Fin4] Y asi, pero switch es como:\ngraph TD; Title(Switch)---\u003e A[variable] A --\u003e B{condicion1} B --case1---\u003e Af[Fin1] B --case2---\u003e Bf[Fin2] B --case3---\u003e Cf[Fin3] B --case4---\u003e Df[Fin4] Ahora como se veria en codigo\nMes_cumple \u0026lt;- switch(Mes_cumple, \u0026#34;Diciembre\u0026#34; = 12, \u0026#34;Noviembre\u0026#34; = 11, \u0026#34;Ocutubre\u0026#34; = 10, \u0026#34;Septiembre\u0026#34; = 9, \u0026#34;Agosto\u0026#34; = 8, \u0026#34;Julio\u0026#34; = 7, \u0026#34;Junio\u0026#34; = 6, \u0026#34;Mayo\u0026#34; = 5, \u0026#34;Abril\u0026#34; = 4, \u0026#34;Marzo\u0026#34; = 3, \u0026#34;Febrero\u0026#34; = 2, \u0026#34;Enero\u0026#34; = 1, \u0026#34;default\u0026#34; = \u0026#34;NA\u0026#34;) print(Mes_cumple) ¡¿Que!? ¿Por que 1?, Bueno anteriormente hicimos el mismo ejercicio pero con ifelse entonces el valor de Mes_cumple quedo en 12.\ngraph LR; A[\"\"Diciembre\"\"] --ifelse---\u003e B[12] --switch---\u003e C[1] El 1 se debe a que en switch si el input (El valor de entrada) es un numero, lo que va a hacer es buscar la posicion del input, en este caso buscó la posicion numero 12 que corresponde a \u0026ldquo;Enero\u0026rdquo; = 1. Vamos a volver a hacerlo:\nMes_cumple \u0026lt;- \u0026#34;Diciembre\u0026#34; Mes_cumple \u0026lt;- switch(Mes_cumple, \u0026#34;Diciembre\u0026#34; = 12, \u0026#34;Noviembre\u0026#34; = 11, \u0026#34;Ocutubre\u0026#34; = 10, \u0026#34;Septiembre\u0026#34; = 9, \u0026#34;Agosto\u0026#34; = 8, \u0026#34;Julio\u0026#34; = 7, \u0026#34;Junio\u0026#34; = 6, \u0026#34;Mayo\u0026#34; = 5, \u0026#34;Abril\u0026#34; = 4, \u0026#34;Marzo\u0026#34; = 3, \u0026#34;Febrero\u0026#34; = 2, \u0026#34;Enero\u0026#34; = 1, \u0026#34;default\u0026#34; = \u0026#34;NA\u0026#34;) print(Mes_cumple) graph LR; A[\"\"Diciembre\"\"] --switch---\u003e C[12] ¡Perfecto! Ya tenemos todos las variables en numeros, ahora falta calcular la edad.\nVectores # Crear funciones # Ahora necesitamos que el usuario nos diga que fecha requiere en el mismo formato de antes, pero ahora no quiero que la fecha este \u0026ldquo;hardcodeada\u0026rdquo; (Que este dentro del script).\n#Pedirle al usuario que escriba algo es facil, vamos a trabajar con la #funcion readline(), el formato seria algo asi readline(prompt = \u0026#34;Texto que muestra al #registrar entrada\u0026#34;) Fecha_Destino \u0026lt;- readline(prompt = \u0026#34;Ingresa la fecha destino: \u0026#34;) Okey, ya tenemos la fecha, ahora hay que copiar y pegar todo el codigo que hicimos antes\u0026hellip; y remplazar nombres de variables\u0026hellip;\nMejor vamos a hacer una función a este punto yo creo que ya intuimos que es una función, su definición en programación es:\nEn programación es un bloque de código diseñado para realizar una tarea específica. Puede procesar datos y devolver un resultado. Las funciones nos permiten dividir un programa en partes más pequeñas y manejables, lo que facilita la comprensión, el mantenimiento y la reutilización del código. Lo que nos interesa es lo que pone en negritas, reutilizar código. Ahora vamos a copiar y pegar nuestro código remplazando variables\u0026hellip; lo se, pero esta va a ser la ultima vez que lo hagamos.\n#La funcion para hacer funciones se llama function(), en el parentesis, vamos #a poner todas las variables externas a la funcion que se vayan emplear #adentro de la funcion convertir_fecha \u0026lt;- function(Fecha) { # Divide la cadena en palabras separadas por espacios Fecha_separado \u0026lt;- strsplit(Fecha, \u0026#34; \u0026#34;) # Extrae el día, mes y año Dia \u0026lt;- as.numeric(Fecha_separado[[1]][1]) Mes \u0026lt;- Fecha_separado[[1]][3] Año \u0026lt;- as.numeric(Fecha_separado[[1]][5]) # Convierte el mes a un valor numérico Mes \u0026lt;- switch(Mes, \u0026#34;Diciembre\u0026#34; = 12, \u0026#34;Noviembre\u0026#34; = 11, \u0026#34;Octubre\u0026#34; = 10, \u0026#34;Septiembre\u0026#34; = 9, \u0026#34;Agosto\u0026#34; = 8, \u0026#34;Julio\u0026#34; = 7, \u0026#34;Junio\u0026#34; = 6, \u0026#34;Mayo\u0026#34; = 5, \u0026#34;Abril\u0026#34; = 4, \u0026#34;Marzo\u0026#34; = 3, \u0026#34;Febrero\u0026#34; = 2, \u0026#34;Enero\u0026#34; = 1, \u0026#34;default\u0026#34; = NA) #Utilizamos c() para crear vectores, en este caso lo vamos a ocupar para #regresar los valores de Dia, Mes y Año en una sola variable (resultados) return(c(Dia, Mes, Año)) # La funcion return(), indica que valores nos va # a dar la funcion en general, en este caso la funcion \u0026#34;convertir_fecha\u0026#34; # nos va ad dar Dia, Mes Año en un vector } #Suponiendo que el usuario nos dio la fecha 13 de Noviembre de 2030 resultados \u0026lt;- convertir_fecha(Fecha_Destino) print(resultados) } \u0026ldquo;Resultado\u0026rdquo; es un vector, por lo tanto si quisieramos cambiar de clase a uno de sus elementos todo el vector cambiaria.\n#Como los vectores son unidimensionales solo hace falta el indice para acceder a un valor Resultado[1] \u0026lt;- as.character(Resultado[1]) print(class(Resultado[2])) Bueno, sabiendo esto podemos hacer la ultima función, para saber que edad tendré en una fecha establecida.\n#Vamos a usar una funcion dentro de una funcion, ya lo habiamos hecho antes #al poner print(class()) o al poner return(c()) pero ahora se hara más #evidente Conocer_Edad \u0026lt;- function(Mi_cumpleaños, Fecha_Destino){ #Utilizamos la funcion convertir_fecha Resultado_cumple \u0026lt;- convertir_fecha(Mi_cumpleaños) Resultado_Fecha \u0026lt;- convertir_fecha(Fecha_Destino) #Convertirmos Meses a Dias (Un mes tiene 30.4375 en promedio, esto porque un #año tiene 365.25 dias contando el año bisiesto) Resultado_cumple[2] \u0026lt;- Resultado_cumple[2] * 30.4375 Resultado_Fecha[2] \u0026lt;- Resultado_Fecha[2] * 30.4375 #Convertimos Meses a Años Resultado_cumple[3] \u0026lt;- Resultado_cumple[3] * 365.25 Resultado_Fecha[3] \u0026lt;- Resultado_Fecha[3] * 365.25 #Ahora sumamos para ver el total de dias, usando sum(), si a sum() le das un #vector numerico, automaticamente sumara todos los valores dentro del vector Total_Dias_cumple \u0026lt;- sum(Resultado_cumple) Total_Dias_Fecha \u0026lt;- sum(Resultado_Fecha) #Ahora sacamos la diferencia entre los Dias y lo dividimos entre 365.25 para obtener los años Diferencia_Años \u0026lt;- (Total_Dias_Fecha - Total_Dias_cumple)/365.25 #El resultado probablemente sea un numero decimal con punto flotante, asi que podemos usar floor() para redondear el valor hacia abajo Años_Aproximados \u0026lt;- floor(Diferencia_Años) return(Años_Aproximados) } Edad_Aproximada \u0026lt;- Conocer_Edad(Mi_cumpleaños, Fecha_Destino) cat(\u0026#34;Hola mi nombre es\u0026#34;, Mi_nombre, \u0026#34;tengo\u0026#34;, Mi_edad, \u0026#34;años, nací el\u0026#34;, Mi_cumpleaños,\u0026#34;en el\u0026#34;, Fecha_Destino , \u0026#34;tendré\u0026#34;, Edad_Aproximada, \u0026#34;años\u0026#34;) Listo, ahora ya sabes como calcular una edad aproximada en R, te animo a que trates de modificar el código, intentes añadir nuevas funciones, quizás agregar una función que te diga tu signo zodiacal, lo que se te ocurra, cualquier duda mi correo esta en la parte superior de la pagina en forma de arroba :).\n","date":"8 junio 2024","externalUrl":null,"permalink":"/posts/tutoriales/mecanicas-basicas-de-r/","section":"Publicaciones","summary":"¿Qué es R?","title":"Mecanicas Basicas de R","type":"posts"},{"content":"","date":"8 junio 2024","externalUrl":null,"permalink":"/tags/principiante/","section":"Tags","summary":"","title":"Principiante","type":"tags"},{"content":"","date":"8 junio 2024","externalUrl":null,"permalink":"/tags/r/","section":"Tags","summary":"","title":"R","type":"tags"},{"content":"","date":"8 junio 2024","externalUrl":null,"permalink":"/series/r/","section":"Series","summary":"","title":"R","type":"series"},{"content":"","date":"8 junio 2024","externalUrl":null,"permalink":"/tags/tutorial/","section":"Tags","summary":"","title":"Tutorial","type":"tags"},{"content":"Encuentra tutoriales prácticos sobre diferentes lenguajes y conceptos de programación. 🖥️💡\n","date":"8 junio 2024","externalUrl":null,"permalink":"/posts/tutoriales/","section":"Publicaciones","summary":"Encuentra tutoriales prácticos sobre diferentes lenguajes y conceptos de programación.","title":"Tutoriales","type":"posts"},{"content":" Material # Clase 17 - Built-in Functions and Help ","date":"7 junio 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-17/","section":"Publicaciones","summary":" Material # Clase 17 - Built-in Functions and Help ","title":"Introducción a Python Parte 2","type":"posts"},{"content":" Material # Clase 16 - Plotting and Programming in Python ","date":"31 mayo 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-16/","section":"Publicaciones","summary":" Material # Clase 16 - Plotting and Programming in Python ","title":"Introducción a Python Parte 1","type":"posts"},{"content":"","date":"24 mayo 2024","externalUrl":null,"permalink":"/tags/bioestadistica/","section":"Tags","summary":"","title":"Bioestadistica","type":"tags"},{"content":" ","date":"24 mayo 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-15/","section":"Publicaciones","summary":" ","title":"Exploración de datos y elección de pruebas o modelos Parte 2","type":"posts"},{"content":" ","date":"24 mayo 2024","externalUrl":null,"permalink":"/authors/domingo/","section":"Authors","summary":" ","title":"Luis Domingo Martínez Vázquez","type":"authors"},{"content":" Exploración de datos y elección de pruebas # o modelos\nDomingo Martínez # 2024-05-17 # 1 Introducción # En esta sesión vamos a trabajar en los siguientes objetivos de aprendizaje:\nExplorar la consistencia y calidad de nuestros datos.\nIdentificar la escala de nuestras variables de interés.\nIdentificar en qué casos podríamos:\nHacer una descripción.\nHacer algúna comparación.\nModelar relaciones \u0026ldquo;causales\u0026rdquo;.\nEn este script vamos a trabajar con la misma base de datos utilizada en el artículo: \u0026ldquo;Machine learning in medicine: Performance calculation of dementia prediction by support vector machines (SVM)\u0026rdquo;, publicado en 2019 por Gopi Battineni, Nalini Chintalapudi, y Francesco Amenta. Quienes usan la base de datos pública llamada OASIS-2.\nEl artículo y repositorios se pueden consultar en:\nhttps://www.oasis-brains.org/\nhttps://direct.mit.edu/jocn/article/22/12/2677/4983/Open-Access-Series-of-Imaging-Studies-Longitudinal\nhttps://www.sciencedirect.com/science/article/pii/S2352914819300917?via%3Dihub\nhttps://doi.org/10.1016/j.imu.2019.100200\nhttps://data.mendeley.com/datasets/tsy6rbc5d4/1\nhttps://www.kaggle.com/datasets/shashwatwork/dementia-prediction-dataset?select=dementia_dataset.csv\nLa base de datos en cuestión, tiene información clínica, socio-demográfica, datos de rendimiento cognitivo y datos longitudinales de imagen cerebral por resonancia magnética de 150 participantes diestros; con, o sin demencia, con edades entre 60 y 96 años. Las variables contenidas en la base de datos (OASIS-2) son:\nSubject ID (Número de identificación del sujeto)\nMRI ID (Número de identificación temporal de la resonancia, recordemos que se trata de un estudio longitudinal con hasta 3 resonancias separadas por un año)\nGroup {Indica si pertenece al grupo con demencia, sin demencia o convertido, estos últimos se habían tratado inicialmente com con demencia, luego se trataron como sin demencia}\nVisit (Indica el número de vistia para adquirir las imágenes de resonancia magnética)\nMR delay (Días transcurridos entre cada resonancia)\nSex (Indica el sexo del participante, M = masculino, F = femenino)\nAge (Edad del participante en años cumplidos)\nSocial Economic Status (SES, nivel socio económico con 5 niveles, el más alto es 5)\nEducation level (EDUC, nivel de educación en años cursados en el sistema escolar)\nMMSE (mini-mental state examination parameters, indica el resultado de la prueba minimental, que sirve para medir el deterioro cognitvo)\nClinical Dementia Ratio (CDR) Con base en una entrevista, se evalúan áreas cognitivas y funcionales del paciente, los códigos son:\n0 = sin demencia.\n0.5 = demencia muy leve.\n1 = demencia leve.\n2 = demencia moderada.\n3 = demencia severa.\nEstimated Total Intracranial Volume (e-TIV) Volumen intercranial total estimado.\nNormalized Whole Brain Volume (n-WBV) Volumen normalizado del cerebro.\nAtlas Scaling Factor, convierte \u0026ldquo;las coordenadas\u0026rdquo; del cerebro a las \u0026ldquo;coordenadas\u0026rdquo; del atlas cerebral que se usará.\n1.1 PASO 1: Lectura de la # base de datos\nNOTA: para abrir un chunk de R el atajo es: ctrl + alt + i\nbd.demencia \u0026lt;- read.csv(\u0026#34;oasis_longitudinal_demographics.csv\u0026#34;) Para eachar un ojo a mi base de datos puedo usar el comando View()\nView(bd.demencia) \u0026#x2753;\nRETO: ¿Cuántas variables y cuantos registro tenemos?\nRETO: ¿Cuántos NAs tengo?\n1.2 PASO 2: Visualización # de NAs\nPodemos usar el paquete visdat para echar un vistazo y saber qué tantos valores perdidos tengo.\nlibrary(visdat) visdat::vis_miss(bd.demencia) RETO: ¿Cuál es la variable que más valores perdidos tiene?\nRETO: ¿Qué debería hacer con los valores perdidos o NAs?\n2 Tipos de datos # En nuestro ejemplo tenemos una base de datos tabular, o conjunto de datos tabulares. Aquí la información se estructura de la siguiente manera, en cada renglón tenemos un caso u observación, y en cada columna registramos los datos de una, y solo una variable.\nEn términos generales, la escala de medición en la cual están registrados los datos de cada variable, para cada sujeto, nos indican el tipo de valor o dato que tengo registrado.\n2.1 Escalas de # medición\nLas escalas de medición nos permiten organizar los datos en orden jerárquico, a continuación vamos a describirlas desde la más \u0026ldquo;simple\u0026rdquo; a la más \u0026ldquo;completa\u0026rdquo;.\nFuentes:\nSiegel, S., \u0026amp; Castellan, J. (1998). Nonparametric statistics for the behavioral sciences- (2nd ed.). Mcgraw-Hill Book Company.\nhttps://en.wikipedia.org/wiki/Level_of_measurement\n2.1.1 Escala nominal o # categórica.\nCorresponde al nivel de medición \u0026ldquo;más débil\u0026rdquo;, aquí usamos símbolos para identificar los grupos a los que pertencen nuestras observaciones. Por ejemplo, registremos el color favorito de quienes asisten a este taller.\ndata.frame(Sujetos_ID=c(1:5),Color_favorito = c(\u0026#34;azul\u0026#34;, \u0026#34;verde\u0026#34;, \u0026#34;azul\u0026#34;, \u0026#34;rojo\u0026#34;, \u0026#34;rojo\u0026#34;)) Sujetos_ID\n\u0026lt;int\u0026gt;\nColor_favorito\n\u0026lt;chr\u0026gt;\n1\nazul\n2\nverde\n3\nazul\n4\nrojo\n5\nrojo\n5 rows\nEn esta escala solo podemos aplicar los operadores matemáticos =\ny ≠\n; además podemos agrupar y calcular la moda.\n2.1.2 Escala # ordinal.\nSi en una escala categórica, resulta que, podemos organizar las categorías de acuerdo a una jerarquía dictada por el operador \u0026gt;\n, entonces tenemos una escala ordinal. Un ejemplo muy común es la escala likert.\nSi a cada persona le pedimos que nos diga qué tanto le gusta el chocolate, de acuerdo a las siguientes opciones: 3 = me gusta mucho, 2 = me gusta poco, 1 = no me gusta. Entonces tenemos una escala de intervalo.\ndata.frame(Sujetos_ID=c(1:5), Gusto_por_chocolate = c(\u0026#34;1\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;1\u0026#34;)) Sujetos_ID\n\u0026lt;int\u0026gt;\nGusto_por_chocolate\n\u0026lt;chr\u0026gt;\n1\n1\n2\n3\n3\n3\n4\n2\n5\n1\n5 rows\nEn esta escala podemos aplicar los operadores \u0026gt;\ny \u0026lt;\npara ordenar las respuestas. También podemos calcular la mediana.\n\u0026#x1f631;\nIMPORANTE: ¿Podemos estar segurxs que, la distancia entre \u0026ldquo;me gusta poco\u0026rdquo; a \u0026ldquo;me gusta mucho\u0026rdquo;, es igual entre todxs nuetrxs sujetos?\nRETO: responde a la pregunta anterior\u0026hellip;\n2.1.3 Escala de # intervalo.\nSi, en una escala ordinal, resulta que, podemos conocer el intervalo (i.e., distancia) entre categorías. En este caso tendremos una escala de intervalo. Importante: en esta escala, el punto cero y la unidad de medidas son arbitrarios. El ejemplo más común que tenemos es la temperatura medida en grados fahrenheit o en grados celcius; el cero es arbitrario y tenemos dos unidades de medida. No obstante, ambas escalas tienen la misma cantidad y la misma clase de información.\nNOTA: la razón entre dos intervalos es independiente de la unidad de medida y del punto cero, pero, el cero y la unidad de medida son arbitrarios. Entonces, unidades diferentes arrojarán razones diferentes.\nA diferencia de las escalas anteriores, en la escala de intervalo, sí podemos aplicar los operadores matemáticos +\ny −\n. Y ya podemos calcular la media aritmética.\ndata.frame(Sujetos_ID=c(1:4), Temperatura_corporal_celciuls = c(36.5, 37.2, 38.0, 37.1), Temperatura_corporal_fahrenheit = c(97.7, 98.96, 100.4, 98.78) ) Sujetos_ID\n\u0026lt;int\u0026gt;\nTemperatura_corporal_celciuls\n\u0026lt;dbl\u0026gt;\nTemperatura_corporal_fahrenheit\n\u0026lt;dbl\u0026gt;\n1\n36.5\n97.70\n2\n37.2\n98.96\n3\n38.0\n100.40\n4\n37.1\n98.78\n4 rows\n2.1.4 Escala de # razón.\nSi una escala de intervalo tiene un punto cero absoluto o verdadero, entonces tendremos una escala de razón, porque, la razón (ratio) entre dos puntos, es independiente de la unidad de medida.\nUn buen ejemplo es la medición de la masa, sin importar si medimos en kilogramos o en libras, existe un zero verdadero o absoluto. Y la razón entre dos pesos es la misma, sin importar que lo midamos en kilogramos o en libras.\nEn otras palabras, las razones (ratios) entre dos valores serán iguales pese que se hayan medido en unidades diferentes. A datos medidos en esta escala le podemos aplicar la media arítmética y también la geométrica.\ndata.frame(Sujetos_ID=c(1:4), Peso_kgs = c(62.5, 78.4, 60.1, 82.4), Peso_lbs = c(137.79, 172.84, 132.5, 181.66) ) Sujetos_ID\n\u0026lt;int\u0026gt;\nPeso_kgs\n\u0026lt;dbl\u0026gt;\nPeso_lbs\n\u0026lt;dbl\u0026gt;\n1\n62.5\n137.79\n2\n78.4\n172.84\n3\n60.1\n132.50\n4\n82.4\n181.66\n4 rows\nEn la \u0026ldquo;medida\u0026rdquo; de los posible, siempre nos gustaría tener una escala de razón.\nRETO: ¿Estas son las únicas escalas de medición?\n2.2 Tipo o formato de # nuestros datos\nFuente: https://bookdown.org/chescosalgado/intro_r/tipos-y-estructuras-de-datos-en-r.html\nNormalmente tenemos los siguientes tipos de datos\nTipo de dato Descripción Numeric Números decimales Integer Números enteros Character Cadenas de texto Complex Números complejos Logical Valor verdadero o falso Factor Agrupación por categorías y niveles Y, la pregunta del millón es:\n¿Qué formato o tipo de datos deben tener cada una de las escalas de medición descritas anteriormente\nACTIVIDAD: Completa el tipo de datos\nEscala nominal -\u0026gt; datos tipo\u0026hellip;\nEscala ordinal -\u0026gt; datos tipo\u0026hellip;\nEscala de intervalo -\u0026gt; datos tipo\u0026hellip;\nEscala de razón -\u0026gt; datos tipo\u0026hellip;\nRETO: ¿Cómo podemos diferenciar el tipo de datos de una variable en una escala ordinal en comparación con una variable de razón que solamente tenga números enteros?\n2.3 Exploración del tipo # de datos\nAhora, con ayuda de la función str() revisaremos qué formato o tipo de datos tiene cada una de nuestras variables.\nstr(bd.demencia) ## \u0026#39;data.frame\u0026#39;: 373 obs. of 15 variables: ## $ Subject.ID: chr \u0026#34;OAS2_0001\u0026#34; \u0026#34;OAS2_0001\u0026#34; \u0026#34;OAS2_0002\u0026#34; \u0026#34;OAS2_0002\u0026#34; ... ## $ MRI.ID : chr \u0026#34;OAS2_0001_MR1\u0026#34; \u0026#34;OAS2_0001_MR2\u0026#34; \u0026#34;OAS2_0002_MR1\u0026#34; \u0026#34;OAS2_0002_MR2\u0026#34; ... ## $ Group : chr \u0026#34;Nondemented\u0026#34; \u0026#34;Nondemented\u0026#34; \u0026#34;Demented\u0026#34; \u0026#34;Demented\u0026#34; ... ## $ Visit : int 1 2 1 2 3 1 2 1 2 3 ... ## $ MR.Delay : int 0 457 0 560 1895 0 538 0 1010 1603 ... ## $ M.F : chr \u0026#34;M\u0026#34; \u0026#34;M\u0026#34; \u0026#34;M\u0026#34; \u0026#34;M\u0026#34; ... ## $ Hand : chr \u0026#34;R\u0026#34; \u0026#34;R\u0026#34; \u0026#34;R\u0026#34; \u0026#34;R\u0026#34; ... ## $ Age : int 87 88 75 76 80 88 90 80 83 85 ... ## $ EDUC : int 14 14 12 12 12 18 18 12 12 12 ... ## $ SES : int 2 2 NA NA NA 3 3 4 4 4 ... ## $ MMSE : int 27 30 23 28 22 28 27 28 29 30 ... ## $ CDR : num 0 0 0.5 0.5 0.5 0 0 0 0.5 0 ... ## $ eTIV : num 1987 2004 1678 1738 1698 ... ## $ nWBV : num 0.696 0.681 0.736 0.713 0.701 ... ## $ ASF : num 0.883 0.876 1.046 1.01 1.034 ... ACTIVIDAD: Revisa que, cada variable esté declarada en el formato o tipo de datos adecuado.\nRETO: Si el tipo de los datos no es el adecuado para algunas variables, entonces formatea al tipo correcto.\nTIP: Consulta la descripción de cada variable en la Introducción.\n2.4 Formateo del tipo de # datos\nTIP: Recuerda verificar que tus variables tienen declarado el tipo de datos correcto.\n3 Exploración visual de # mi base de datos\nA continuación, hagamos una exploración visual inicial a nuestra base de datos. Este paso es indispensable para identificar errores o corroborar que nuestra base de datos corresponde a lo esperado.\nlibrary(GGally) ## Cargando paquete requerido: ggplot2 ## Registered S3 method overwritten by \u0026#39;GGally\u0026#39;: ## method from ## +.gg ggplot2 ggpairs(data = bd.demencia[,c(3,8)], aes(color=Group, alpha=0.6), title = \u0026#34;Exploración inicial Demencia dataset\u0026#34;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ggsave(\u0026#34;Exploracion_inicial_demencia.png\u0026#34;, plot = last_plot(), device = png, width = 30, height = 20, units = c(\u0026#34;cm\u0026#34;), dpi = 300) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 4 Aplicando estadística # para responder preguntas\n","date":"17 mayo 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-14/","section":"Publicaciones","summary":"Exploración de datos y elección de pruebas # o modelos","title":"Exploración de datos y elección de pruebas o modelos Parte 1","type":"posts"},{"content":" Script: Material\n","date":"3 mayo 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-13/","section":"Publicaciones","summary":"Script: Material","title":"Terapia de Bioinfo grupal (opcional)","type":"posts"},{"content":" ","date":"26 abril 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-12/","section":"Publicaciones","summary":" ","title":"Bioestadistica parte 2","type":"posts"},{"content":" ","date":"26 abril 2024","externalUrl":null,"permalink":"/authors/obed/","section":"Authors","summary":" ","title":"Obed Ramírez Sánchez","type":"authors"},{"content":" ","date":"19 abril 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-11/","section":"Publicaciones","summary":" ","title":"Bioestadistica parte 1","type":"posts"},{"content":"","date":"12 abril 2024","externalUrl":null,"permalink":"/tags/heatmap/","section":"Tags","summary":"","title":"Heatmap","type":"tags"},{"content":" Recursos adicionales # Script: * get_data.R * heatmap_clase.R\nData: https://github.com/EveliaCoss/ViernesBioinfo2024/tree/main/Clase_Heatmaps/data\nManual de Complexheatmap\n","date":"12 abril 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-10/","section":"Publicaciones","summary":"Recursos adicionales # Script: * get_data.","title":"Manipulación de datos para crear un heatmap (ComplexHeatmap)","type":"posts"},{"content":"","date":"12 abril 2024","externalUrl":null,"permalink":"/tags/plots/","section":"Tags","summary":"","title":"Plots","type":"tags"},{"content":"Genomic Scientist. Interested in bioinformatics, AI and statistics.\n","date":"12 abril 2024","externalUrl":null,"permalink":"/authors/sofia/","section":"Authors","summary":"Genomic Scientist.","title":"Sofia Guadalupe Salazar Magaña","type":"authors"},{"content":"","date":"5 abril 2024","externalUrl":null,"permalink":"/tags/opcional/","section":"Tags","summary":"","title":"Opcional","type":"tags"},{"content":" ","date":"5 abril 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-9/","section":"Publicaciones","summary":" ","title":"Terapia de Bioinfo grupal (opcional)","type":"posts"},{"content":" ¿Qué es ggplot? # Una biblioteca de visualizacion de datos para el lenguaje de programacion R. Permite a los usuarios construir gráficos complejos a parhttps://eveliacoss.github.io/ViernesBioinfo2024/Clase_ggplot/slides.html#1tir de componentes simples y entendibles. Ofrece amplias opciones para personalizar gráficos, incluyendo temas, leyendas y títulos. Anatomia de las graficas de ggplot # Datos: ggplot2 trabaja directamente con data frames en R, haciendo fácil la integración con otras herramientas de análisis de datos.\nAes (Estéticas): Define cómo se mapean las variables de los datos a propiedades visuales como el color, forma y tamaño.\nGeoms (Objetos Geométricos): Representan tipos de gráficos como puntos, líneas, barras, etc. Permiten construir una amplia gama de visualizaciones.\nFacets: permiten generar gráficos para múltiples subconjuntos de un conjunto de datos utilizando la misma escala y ejes, todo en una sola imagen\nStats: son funciones que resumen o transforman los datos de formas que facilitan su visualización\nDe un dataframe a una grafica # La imagen simplifica muy bien lo que es ggplot y la accion de transormar nuestros datos a una grafica.\nLa tabla es el argumento principal cuando vamos a hacer una grafica de ggplot y con los esteticos vamos a mapear cada una de las variables a las propiedades visuales de nuestra grafica y despues se agrega la geometria que en este caso fue asignarle un color a la variable dieta.\nIdeas de visualizaciones # Quizas tengas un conjunto de datos que no sepas representar visualmente, estas dos herramientas son muy utiles para inspirarse y tener una idea de como representar tus datos.\nEsta en general es para hacer analisis de datos, etc. : - The data visualization\nEsta es especificamente enfocada en hacer la manipulacion de los datos con tidyverse y las graficas con ggplot. - The R graph gallery\nScript de la clase de hoy # Script ","date":"22 marzo 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-8/","section":"Publicaciones","summary":"¿Qué es ggplot?","title":"Generación de diversos gráficos usando ggplot2","type":"posts"},{"content":"","date":"15 marzo 2024","externalUrl":null,"permalink":"/tags/db/","section":"Tags","summary":"","title":"Db","type":"tags"},{"content":"Posdoctoral Research Associate | Bioinformation | lncRNAs | autoimmune diseases | Evolution | gene regulation | Member R-Ladies, LupusRGMX, Project JAGUAR\n","date":"15 marzo 2024","externalUrl":null,"permalink":"/authors/evelia/","section":"Authors","summary":"Posdoctoral Research Associate | Bioinformation | lncRNAs | autoimmune diseases | Evolution | gene regulation | Member R-Ladies, LupusRGMX, Project JAGUAR","title":"Evelia Lorena Coss-Navarrete","type":"authors"},{"content":"Con dplyr, puedes filtrar filas, seleccionar columnas, ordenar datos y agrupar datos de forma eficiente.\nPaquetes necesarios # Ya deben tenerlos instalados previo a la clase\ninstall.packages(\u0026#34;dplyr\u0026#34;) # Manipulación de datos install.packages(\u0026#34;tidyr\u0026#34;) # Manipulación de datos install.packages(\u0026#34;tidyverse\u0026#34;)# Manipulación de datos install.packages(\u0026#34;reshape2\u0026#34;) # Transformación de datos install.packages(\u0026#34;ggplot2\u0026#34;) # Visualización grafica install.packages(\u0026#34;cowplot\u0026#34;) # Generar varios graficos en una misma figura Cargar paquetes # library(dplyr) # Manipulación de datos library(tidyr) # Manipulación de datos library(tidyverse) # Manipulación de datos library(reshape2) # Transformación de datos library(cowplot) # Visualización grafica library(ggplot2) # Generar varios graficos en una misma figura Paqueterias importantes en la Manipulación de datos en R # Tidyverse packages\ntidyr\ndplyr\nggplot2\nreadr\npurrr\ntibble\nstringr\nforcats\n%\u0026gt;% pipeline # Empleando el paquete Tidyverse y dplyr puedes acceder a usar %\u0026gt;%, el cual nos permitirá enlazar funciones en la modificación de un dataframe.\ndf \u0026lt;- data.frame(genes = paste0(\u0026#34;Gen\u0026#34;, seq_len(8)), expression = c(3.8, 5.5, 6.3, 1.8, 9, rep(3,3)), treatment =c(rep(\u0026#34;Control\u0026#34;, 4), rep(\u0026#34;Condicion1\u0026#34;,4))) df %\u0026gt;% head() # genes expression treatment # 1 Gen1 3.8 Control # 2 Gen2 5.5 Control # 3 Gen3 6.3 Control # 4 Gen4 1.8 Control # 5 Gen5 9.0 Condicion1 # 6 Gen6 3.0 Condicion1 Archivo tipo Tibble # Cuando trabajamos con los paquetes provenientes de Tidyverse los archivos de salida por lo regular son tipo tibble, que es parecido a un dataframe, pero puede chocar con algunas paqueterias para manipulacion de dataframe.\nPor lo que regularmente convertimos esta salida a dataframe usando as.data.frame()\nPara más información revisa el paquete tibble.\nFunciones que vamos a emplear de dplyr # select() : Seleccionar nombres de las columnas. --\u0026gt; select(dataframe, columna1, columna2, ... columnax)\nfilter() : Filtrar filas por una condicion especifica, apartir de la columna. --\u0026gt; filter(dataframe, columna1 == \u0026ldquo;condicion\u0026rdquo;)\nmutate() : Modificar o agregar columnas. --\u0026gt; mutate(dataframe, columna1 = \u0026ldquo;condicion\u0026rdquo;)\ngroup_by() : Agrupar informacion de acuerdo a un(as) columna(s) seleccionada(s).\nif_else() : Condicional. --\u0026gt; if_else(dataframe, codicion, si se acepta entonces, si se rechaza entonces)\narrange() : Acomodar los resultados, default de menor a mayor.\ncount(): Cuenta los valores de acuerdo a una variable.\nleft_join() : Unir dos dataframe con base en una misma columna en comun. --\u0026gt; left_join(dataframe1, dataframe2, by = \u0026ldquo;Columna en comun, mismo nombre\u0026rdquo;)\nn_distinct() : Cuenta las filas unicas.\ndistinct() : Muestra las filas duplicadas.\nsummarise() : reduce varios valores seleccionados en un resumen.\nPara más información visita el Github del paquete dplyr.\nPara ver todas las funciones existentes del paquete puede ver el Cheat Sheet.\nFunciones que vamos a emplear de reshape2 # melt() : Modificación el formato de un dataframe. Para más información visita el Github del paquete reshape2. Aunque este paquete se encuentra descontinuado, aun funcionan las funciones. Fue absorbido posteriormente por el paquete tidyr.\nSe supone que la función gather() del paquete tidyr realiza lo mismo que melt() del paquete reshape2. Hoy lo compararemos ambas.\nPara más información visita el Github del paquete tidyr.\nFunciones para unir dataframes con el paquete dplyr # En la Clase 6 vimos: # Manipulación de datos con funciones de R base 8 marzo 2024\u0026middot;2199 palabras\u0026middot; loading \u0026middot; loading Evelia Lorena Coss-Navarrete Viernes Db La manipulación de datos con funciones de R base es un tema esencial en análisis de datos. Paso 1. Crear un RBioProject\nPaso 2. Descargar los datos y verificar su ubicación en la carpeta data/\nPaso 3. Importar los datos en R\nPaso 4. Renombrar la columna Name en todos los dataframe\nPaso 5. Seleccionar SOLO los datos de Marvel Comics y DC Comics\nPaso 6. Eliminar duplicados\nPaso 7. Seleccionar columnas\nPaso 8. Cambiar formatos en algunas columnas\nTodos estos pasos se encuentran en el Script MarvelvsDCComics_limpieza_script.R.\nImportar datos en R # Partiendo del código que ya conocemos, continuamos con el Script.\n###### # Script de clase \u0026#34;Intro a R\u0026#34; # Evelia Coss # 8 de marzo 2024 ####### indir = \u0026#34;C:/Users/ecoss/OneDrive - CINVESTAV/Documentos/Posdoc_LIIGH/VieRnesBioinfo/ViernesBioinfo_2024/Presentaciones/data/\u0026#34; outdir = \u0026#34;C:/Users/ecoss/OneDrive - CINVESTAV/Documentos/Posdoc_LIIGH/VieRnesBioinfo/ViernesBioinfo_2024/Presentaciones/\u0026#34; # Cargar las variables infoPowers, infoStats, marvelDcInfo load(file = paste0(indir, \u0026#34;Info_data.RData\u0026#34;)) El archivo Info_data.RData lo creamos en la clase pasada, por ello, solo cargaremos este archivo.\nPaso 9. Unir dataframes con base en una columna en común (Join Datasets) # Iniciamos con 3 dataframes (infoCharacters, infoStats e infoPowers). A partir del dataframe infoCharacters seleccionamos solo los datos de Marvel Comics y DC Comics, limpiamos los duplicados y almacenamos en la variable marvelDcInfo.\nPrimera unión, empleando la columna Name contenida en ambos dataframes. Se unieron las columnas seleccionadas con la información básica de cada personaje con los stats de cada uno.\nmarvelDcStatsInfo \u0026lt;- left_join(marvelDcInfo, infoStats, by = \u0026#34;Name\u0026#34;) head(marvelDcStatsInfo)[1:5] # Name Gender Race Publisher Alignment # 1 A-Bomb Male Human Marvel Comics good # 2 Abin Sur Male Ungaran DC Comics good # 3 Abomination Male Human / Radiation Marvel Comics bad # 4 Abraxas Male Cosmic Entity Marvel Comics bad # 5 Absorbing Man Male Human Marvel Comics \u0026lt;NA\u0026gt; # 6 Adam Strange Male Human DC Comics good Segunda unión, empleando la columna Name. Se el dataframe generado co la informacion de los poderes por cada personaje.\nfullMarvelDc \u0026lt;- left_join(marvelDcStatsInfo, infoPowers, by = \u0026#34;Name\u0026#34;) head(fullMarvelDc)[1:5] # Name Gender Race Publisher Alignment # 1 A-Bomb Male Human Marvel Comics good # 2 Abin Sur Male Ungaran DC Comics good # 3 Abomination Male Human / Radiation Marvel Comics bad # 4 Abraxas Male Cosmic Entity Marvel Comics bad # 5 Absorbing Man Male Human Marvel Comics \u0026lt;NA\u0026gt; # 6 Adam Strange Male Human DC Comics good Paso 10. Cambiar formatos en algunas columnas # fullMarvelDc$Name \u0026lt;- as.factor(fullMarvelDc$Name) fullMarvelDc$Alignment \u0026lt;- as.factor(fullMarvelDc$Alignment) Si usamos str() tendremos desplegado la informacion de todas las 179 columnas presentes en el dataframe, recuerda que puedes usar dim() para checar las dimensiones.\ndim(fullMarvelDc) # [1] 586 179 Verificamos los formatos con class() # class(fullMarvelDc$Name) # [1] \u0026#34;factor\u0026#34; class(fullMarvelDc$Gender) # [1] \u0026#34;factor\u0026#34; class(fullMarvelDc$Race) # [1] \u0026#34;factor\u0026#34; class(fullMarvelDc$Publisher) # [1] \u0026#34;factor\u0026#34; class(fullMarvelDc$Alignment) # [1] \u0026#34;factor\u0026#34; Ejercicios # 1) ¿Cuántos individuos tenemos de cada género (Gender), considerando su raza (Race) y empresa (Publisher)?\nRespuesta 2) ¿Cuántos personajes villanos, neutrales y héroes (su bando, Aligment) por cada empresa?\nRespuesta 3) ¿Cuántos individuos tenemos de cada género (Gender), considerando su bando (Aligment) y empresa (Publisher)?\nRespuesta Esto es lo que realiza melt() # Paso 11. Transformar en una sola columna los poderes usando melt() # Reacomodar la tabla de acuerdo a las habilidades o poderes.\nLa función melt() te permite acomodar la tabla, cambiando el formato de la misma de acuerdo a las habilidades o poderes.\nmarvelDc \u0026lt;- melt(fullMarvelDc, id = c(\u0026#34;Name\u0026#34;, \u0026#34;Gender\u0026#34;, \u0026#34;Race\u0026#34;, \u0026#34;Publisher\u0026#34;, \u0026#34;Alignment\u0026#34;, \u0026#34;Intelligence.x\u0026#34;, \u0026#34;Strength\u0026#34;, \u0026#34;Speed\u0026#34;, \u0026#34;Durability.x\u0026#34;, \u0026#34;Power\u0026#34;, \u0026#34;Combat\u0026#34;, \u0026#34;Total\u0026#34;)) str(marvelDc) # \u0026#39;data.frame\u0026#39;: 97862 obs. of 14 variables: # $ Name : Factor w/ 585 levels \u0026#34;A-Bomb\u0026#34;,\u0026#34;Abin Sur\u0026#34;,..: 1 2 3 4 5 6 7 8 9 10 ... # $ Gender : Factor w/ 2 levels \u0026#34;Female\u0026#34;,\u0026#34;Male\u0026#34;: 2 2 2 2 2 2 1 2 2 2 ... # $ Race : Factor w/ 48 levels \u0026#34;Alien\u0026#34;,\u0026#34;Amazon\u0026#34;,..: 20 45 26 10 20 20 NA 20 NA NA ... # $ Publisher : Factor w/ 2 levels \u0026#34;DC Comics\u0026#34;,\u0026#34;Marvel Comics\u0026#34;: 2 1 2 2 2 1 2 2 2 2 ... # $ Alignment : Factor w/ 3 levels \u0026#34;bad\u0026#34;,\u0026#34;good\u0026#34;,\u0026#34;neutral\u0026#34;: 2 2 1 1 NA 2 NA 2 2 1 ... # $ Intelligence.x: int 38 50 63 88 NA 1 NA 10 75 50 ... # $ Strength : int 100 90 80 100 NA 1 NA 8 28 85 ... # $ Speed : int 17 53 53 83 NA 1 NA 13 38 100 ... # $ Durability.x : int 80 64 90 99 NA 1 NA 5 80 85 ... # $ Power : int 17 84 55 100 NA 0 NA 5 72 100 ... # $ Combat : int 64 65 95 56 NA 1 NA 20 95 40 ... # $ Total : int 316 406 436 526 NA 5 NA 61 388 460 ... # $ variable : Factor w/ 167 levels \u0026#34;Agility\u0026#34;,\u0026#34;Accelerated.Healing\u0026#34;,..: 1 1 1 1 1 1 1 1 1 1 ... # $ value : chr \u0026#34;False\u0026#34; \u0026#34;False\u0026#34; \u0026#34;False\u0026#34; \u0026#34;False\u0026#34; ... Checamos los cambios en el contenido\nSe redujo el numero de columnas y las columnas seleccionados se compactaron en una sola columna. Se agrego la columna value con valores de TRUE y FALSE, considerando si el personaje tenia o no la habilidad.\nhead(marvelDc, 3) # Name Gender Race Publisher Alignment Intelligence.x # 1 A-Bomb Male Human Marvel Comics good 38 # 2 Abin Sur Male Ungaran DC Comics good 50 # 3 Abomination Male Human / Radiation Marvel Comics bad 63 # Strength Speed Durability.x Power Combat Total variable value # 1 100 17 80 17 64 316 Agility False # 2 90 53 64 84 65 406 Agility False # 3 80 53 90 55 95 436 Agility False Al usar melt() se reduce el numero de columnas en 2 # dim(marvelDc) # [1] 97862 14 Se redujeron de 179 columnas a 14 columnas. Creando 2 nuevas columnas.\n1) variable : Contiene el nombre de los poderes.\n2) value : Contiene valores lógicos de acuerdo a cada poder de los personajes.\nPaso 12. Renombrar la columnas # head(marvelDc, 3) # Name Gender Race Publisher Alignment Intelligence.x # 1 A-Bomb Male Human Marvel Comics good 38 # 2 Abin Sur Male Ungaran DC Comics good 50 # 3 Abomination Male Human / Radiation Marvel Comics bad 63 # Strength Speed Durability.x Power Combat Total variable value # 1 100 17 80 17 64 316 Agility False # 2 90 53 64 84 65 406 Agility False # 3 80 53 90 55 95 436 Agility False Vamos a renombrar la columna variable por SuperPower.\ncolnames(marvelDc)[colnames(marvelDc) == \u0026#34;variable\u0026#34;] \u0026lt;- \u0026#34;SuperPower\u0026#34; # Renombrar columna A veces el paquete dplyr cambia el nombre de algunas columnas solo agregando .x, no es preocupante y podemos corregirlo de la siguiente manera.\n# Corregir nombres de columnas colnames(marvelDc)[colnames(marvelDc) == \u0026#34;Intelligence.x\u0026#34;] \u0026lt;- \u0026#34;Intelligence\u0026#34; # Renombrar columna colnames(marvelDc)[colnames(marvelDc) == \u0026#34;Durability.x\u0026#34;] \u0026lt;- \u0026#34;Durability\u0026#34; # Renombrar columna Cambiamos el formato de las columnas # En caso de que las siguientes columnas no se encuentren convertidas.\nmarvelDc$Name \u0026lt;- as.factor(marvelDc$Name) marvelDc$Gender \u0026lt;- as.factor(marvelDc$Gender) marvelDc$Race \u0026lt;- as.factor(marvelDc$Race) marvelDc$Publisher \u0026lt;- as.factor(marvelDc$Publisher) marvelDc$Alignment \u0026lt;- as.factor(marvelDc$Alignment) marvelDc$SuperPower \u0026lt;- as.factor(marvelDc$SuperPower) Verificar el formato de las columnas # class(marvelDc$Name) # [1] \u0026#34;factor\u0026#34; class(marvelDc$Gender) # [1] \u0026#34;factor\u0026#34; class(marvelDc$Race) # [1] \u0026#34;factor\u0026#34; class(marvelDc$Publisher) # [1] \u0026#34;factor\u0026#34; class(marvelDc$Alignment) # [1] \u0026#34;factor\u0026#34; class(marvelDc$SuperPower) # [1] \u0026#34;factor\u0026#34; Paso 13. Selección de habilidades con TRUE # marvelDc \u0026lt;- marvelDc %\u0026gt;% filter(value == \u0026#34;True\u0026#34;) %\u0026gt;% select(-value) #eliminar columna head(marvelDc) # Name Gender Race Publisher Alignment Intelligence Strength Speed # 1 Ajax Male Cyborg Marvel Comics \u0026lt;NA\u0026gt; NA NA NA # 2 Amazo Male Android DC Comics bad 75 100 100 # 3 Angel Male \u0026lt;NA\u0026gt; Marvel Comics good 63 13 46 # 4 Angel Dust Female Mutant Marvel Comics \u0026lt;NA\u0026gt; NA NA NA # 5 Annihilus Male \u0026lt;NA\u0026gt; Marvel Comics bad 75 80 47 # 6 Ant-Man II Male Human Marvel Comics good 63 10 23 # Durability Power Combat Total SuperPower # 1 NA NA NA NA Agility # 2 100 100 100 575 Agility # 3 64 17 42 245 Agility # 4 NA NA NA NA Agility # 5 56 59 64 381 Agility # 6 28 32 28 184 Agility Ejercicios # 1) ¿Quiénes son los personajes con más habilidades/poderes por cada empresa?\nmarvelDc %\u0026gt;% group_by(Name, Publisher) %\u0026gt;% distinct(SuperPower) %\u0026gt;% dplyr::count(Publisher) %\u0026gt;% select(Name, Publisher, Count = n) %\u0026gt;% arrange(-Count) %\u0026gt;% # ordenar de max a min head(3) # # A tibble: 3 × 3 # # Groups: Name, Publisher [3] # Name Publisher Count # \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; # 1 Spectre DC Comics 49 # 2 Amazo DC Comics 44 # 3 Living Tribunal Marvel Comics 35 Spectre es el personaje con más habilidades a comparación de los demás personajes.\nNOTA: Cuando usamos el simbolo - en la funcion arrange() para ordenar de mayor a menor los valores.\nSin embargo, ser el más habilidoso no implica el más poderoso...Si observamos sus stats todos son de 1 o menos.\nmarvelDc %\u0026gt;% filter(Name == \u0026#34;Spectre\u0026#34; # Name Gender Race Publisher Alignment Intelligence Strength Speed # 1 Spectre Male God / Eternal DC Comics good 1 1 1 # 2 Spectre Male God / Eternal DC Comics good 1 1 1 # 3 Spectre Male God / Eternal DC Comics good 1 1 1 # 4 Spectre Male God / Eternal DC Comics good 1 1 1 # 5 Spectre Male God / Eternal DC Comics good 1 1 1 # 6 Spectre Male God / Eternal DC Comics good 1 1 1 # 7 Spectre Male God / Eternal DC Comics good 1 1 1 # 8 Spectre Male God / Eternal DC Comics good 1 1 1 # 9 Spectre Male God / Eternal DC Comics good 1 1 1 # 10 Spectre Male God / Eternal DC Comics good 1 1 1 # 11 Spectre Male God / Eternal DC Comics good 1 1 1 # 12 Spectre Male God / Eternal DC Comics good 1 1 1 # 13 Spectre Male God / Eternal DC Comics good 1 1 1 # 14 Spectre Male God / Eternal DC Comics good 1 1 1 # 15 Spectre Male God / Eternal DC Comics good 1 1 1 # 16 Spectre Male God / Eternal DC Comics good 1 1 1 # 17 Spectre Male God / Eternal DC Comics good 1 1 1 # 18 Spectre Male God / Eternal DC Comics good 1 1 1 # 19 Spectre Male God / Eternal DC Comics good 1 1 1 # 20 Spectre Male God / Eternal DC Comics good 1 1 1 # 21 Spectre Male God / Eternal DC Comics good 1 1 1 # 22 Spectre Male God / Eternal DC Comics good 1 1 1 # 23 Spectre Male God / Eternal DC Comics good 1 1 1 # 24 Spectre Male God / Eternal DC Comics good 1 1 1 # 25 Spectre Male God / Eternal DC Comics good 1 1 1 # 26 Spectre Male God / Eternal DC Comics good 1 1 1 # 27 Spectre Male God / Eternal DC Comics good 1 1 1 # 28 Spectre Male God / Eternal DC Comics good 1 1 1 # 29 Spectre Male God / Eternal DC Comics good 1 1 1 # 30 Spectre Male God / Eternal DC Comics good 1 1 1 # 31 Spectre Male God / Eternal DC Comics good 1 1 1 # 32 Spectre Male God / Eternal DC Comics good 1 1 1 # 33 Spectre Male God / Eternal DC Comics good 1 1 1 # 34 Spectre Male God / Eternal DC Comics good 1 1 1 # 35 Spectre Male God / Eternal DC Comics good 1 1 1 # 36 Spectre Male God / Eternal DC Comics good 1 1 1 # 37 Spectre Male God / Eternal DC Comics good 1 1 1 # 38 Spectre Male God / Eternal DC Comics good 1 1 1 # 39 Spectre Male God / Eternal DC Comics good 1 1 1 # 40 Spectre Male God / Eternal DC Comics good 1 1 1 # 41 Spectre Male God / Eternal DC Comics good 1 1 1 # 42 Spectre Male God / Eternal DC Comics good 1 1 1 # 43 Spectre Male God / Eternal DC Comics good 1 1 1 # 44 Spectre Male God / Eternal DC Comics good 1 1 1 # 45 Spectre Male God / Eternal DC Comics good 1 1 1 # 46 Spectre Male God / Eternal DC Comics good 1 1 1 # 47 Spectre Male God / Eternal DC Comics good 1 1 1 # 48 Spectre Male God / Eternal DC Comics good 1 1 1 # 49 Spectre Male God / Eternal DC Comics good 1 1 1 # Durability Power Combat Total SuperPower # 1 1 0 1 5 Agility # 2 1 0 1 5 Accelerated.Healing # 3 1 0 1 5 Dimensional.Awareness # 4 1 0 1 5 Stealth # 5 1 0 1 5 Energy.Absorption # 6 1 0 1 5 Flight # 7 1 0 1 5 Marksmanship # 8 1 0 1 5 Longevity # 9 1 0 1 5 Intelligence.y # 10 1 0 1 5 Super.Strength # 11 1 0 1 5 Telepathy # 12 1 0 1 5 Energy.Blasts # 13 1 0 1 5 Duplication # 14 1 0 1 5 Size.Changing # 15 1 0 1 5 Density.Control # 16 1 0 1 5 Stamina # 17 1 0 1 5 Super.Speed # 18 1 0 1 5 Possession # 19 1 0 1 5 Electrokinesis # 20 1 0 1 5 Darkforce.Manipulation # 21 1 0 1 5 Death.Touch # 22 1 0 1 5 Teleportation # 23 1 0 1 5 Magic # 24 1 0 1 5 Immortality # 25 1 0 1 5 Phasing # 26 1 0 1 5 Astral.Projection # 27 1 0 1 5 Fire.Control # 28 1 0 1 5 Invulnerability # 29 1 0 1 5 Energy.Constructs # 30 1 0 1 5 Force.Fields # 31 1 0 1 5 Psionic.Powers # 32 1 0 1 5 Elasticity # 33 1 0 1 5 Animation # 34 1 0 1 5 Precognition # 35 1 0 1 5 Hypnokinesis # 36 1 0 1 5 Animal.Control # 37 1 0 1 5 Heat.Generation # 38 1 0 1 5 Gravity.Control # 39 1 0 1 5 Light.Control # 40 1 0 1 5 Levitation # 41 1 0 1 5 Time.Travel # 42 1 0 1 5 Illusions # 43 1 0 1 5 Water.Control # 44 1 0 1 5 Omnilingualism # 45 1 0 1 5 Time.Manipulation # 46 1 0 1 5 Invisibility # 47 1 0 1 5 Sub.Mariner # 48 1 0 1 5 Vision...Heat # 49 1 0 1 5 Reality.Warping Es el personaje con más habilidades, pero tiene sus stats muy bajos.\n2) ¿Quiénes son los personajes con los stats más altos por cada empresa?\nmarvelDc %\u0026gt;% arrange(-Intelligence, -Strength, -Speed, -Durability, -Power, -Combat) %\u0026gt;% select(-SuperPower) %\u0026gt;% distinct() %\u0026gt;% head(5) # Name Gender Race Publisher Alignment Intelligence # 1 Mister Mxyzptlk Male God / Eternal DC Comics bad 113 # 2 Superman Male Kryptonian DC Comics good 100 # 3 Martian Manhunter Male Martian DC Comics good 100 # 4 Galactus Male Cosmic Entity Marvel Comics neutral 100 # 5 Captain Marvel Female Human-Kree Marvel Comics good 100 # Strength Speed Durability Power Combat Total # 1 10 12 14 100 28 277 # 2 100 100 100 94 85 579 # 3 100 96 100 100 85 581 # 4 100 83 100 100 70 553 # 5 100 67 95 62 56 480 NOTA: Cuando usamos el simbolo - en la funcion select() estamos eliminando la columna SuperPower.\n3) ¿Existe algún personaje que tenga todos sus stats en 100?\nHay 6 columnas de stats evaluados que sumados nos da la columna Total, osea que los valores maximos se encuentran cercanos a 600 (columnas 6:11).\n# Opcion B marvelDc %\u0026gt;% select(-SuperPower) %\u0026gt;% distinct() %\u0026gt;% # eliminas duplicados filter(Intelligence \u0026gt;= 100 \u0026amp; Strength \u0026gt;= 100 \u0026amp; Speed \u0026gt;= 100 \u0026amp; Durability \u0026gt;= 100 \u0026amp; Power \u0026gt;= 100 \u0026amp; Combat \u0026gt;= 100) # [1] Name Gender Race Publisher Alignment # [6] Intelligence Strength Speed Durability Power # [11] Combat Total # \u0026lt;0 rows\u0026gt; (or 0-length row.names) La salida da NINGUNO, ya que no existe un personaje que tenga los 6 Stats con valores de 100.\nPaso 14. Renombrar el formato de Alignment # Cuando usamos la función if_else() la empleamos para asignar valores de acuerdo a una conducional.\nUsage: if_else(condición, TRUE, FALSE)\nCondición: Selecciona una columna y verifica que debe cumplir la misma.\nTRUE: En caso de que la condición sea VERDADERA, que acción debe hacer.\nFALSE: En caso de que la condición sea FALSA, que acción debe hacer\nVamos agregar una nueva columna y vamos a cambiar los valores a usar el bando (Aligment)\n# Opcion A - Función `if_else()` marvelDc_edited \u0026lt;- marvelDc %\u0026gt;% mutate(Group = if_else(Alignment == \u0026#34;good\u0026#34;, \u0026#34;hero\u0026#34;, # Primer if_else if_else(Alignment == \u0026#34;bad\u0026#34;,\u0026#34;villain\u0026#34;, \u0026#34;neutral\u0026#34;))) # Segundo if_else Tambien podemos usar case_when()\n# Opcion B - Funcion `case_when()` marvelDc_edited \u0026lt;- marvelDc %\u0026gt;% mutate(Group = case_when(Alignment == \u0026#34;good\u0026#34; ~ \u0026#34;hero\u0026#34;, Alignment == \u0026#34;bad\u0026#34; ~ \u0026#34;villain\u0026#34;, TRUE ~ \u0026#34;neutral\u0026#34;)) Ejercicio: Función if_else() # ¿Quiénes son los hombres más poderosos y malvados?\nmarvelDc_edited %\u0026gt;% select(-SuperPower) %\u0026gt;% distinct() %\u0026gt;% # eliminas duplicados filter(Gender == \u0026#34;Male\u0026#34; \u0026amp; Group == \u0026#34;villain\u0026#34;) %\u0026gt;% arrange(-Total) # Name Gender Race Publisher Alignment # 1 General Zod Male Kryptonian DC Comics bad # 2 Superboy-Prime Male Kryptonian DC Comics bad # 3 Amazo Male Android DC Comics bad # 4 Dormammu Male \u0026lt;NA\u0026gt; Marvel Comics bad # 5 Doomsday Male Alien DC Comics bad # 6 Cyborg Superman Male Cyborg DC Comics bad # 7 Magus Male \u0026lt;NA\u0026gt; Marvel Comics bad # 8 Abraxas Male Cosmic Entity Marvel Comics bad # 9 Black Adam Male \u0026lt;NA\u0026gt; DC Comics bad # 10 Fallen One II Male \u0026lt;NA\u0026gt; Marvel Comics bad # 11 Darkseid Male New God DC Comics bad # 12 Onslaught Male Mutant Marvel Comics bad # 13 Match Male \u0026lt;NA\u0026gt; DC Comics bad # 14 Anti-Monitor Male God / Eternal DC Comics bad # 15 Apocalypse Male Mutant Marvel Comics bad # 16 Lobo Male Czarnian DC Comics bad # 17 Thanos Male Eternal Marvel Comics bad # 18 Ultron Male Android Marvel Comics bad # 19 Destroyer Male \u0026lt;NA\u0026gt; Marvel Comics bad # 20 Air-Walker Male \u0026lt;NA\u0026gt; Marvel Comics bad # 21 Carnage Male Symbiote Marvel Comics bad # 22 Magneto Male Mutant Marvel Comics bad # 23 Mephisto Male \u0026lt;NA\u0026gt; Marvel Comics bad # 24 Venom Male Symbiote Marvel Comics bad # 25 Abomination Male Human / Radiation Marvel Comics bad # 26 Doctor Doom Male Human Marvel Comics bad # 27 Sinestro Male Korugaran DC Comics bad # 28 Loki Male Asgardian Marvel Comics bad # 29 Kang Male \u0026lt;NA\u0026gt; Marvel Comics bad # 30 Brainiac Male Android DC Comics bad # 31 Swamp Thing Male God / Eternal DC Comics bad # 32 Metallo Male Android DC Comics bad # 33 Venom III Male Symbiote Marvel Comics bad # 34 Annihilus Male \u0026lt;NA\u0026gt; Marvel Comics bad # 35 Iron Monger Male \u0026lt;NA\u0026gt; Marvel Comics bad # 36 Scorpion Male Human Marvel Comics bad # 37 Utgard-Loki Male Frost Giant Marvel Comics bad # 38 Mandarin Male Human Marvel Comics bad # 39 Doppelganger Male \u0026lt;NA\u0026gt; Marvel Comics bad # 40 Mach-IV Male \u0026lt;NA\u0026gt; Marvel Comics bad # 41 Azazel Male Neyaphem Marvel Comics bad # 42 Exodus Male Mutant Marvel Comics bad # 43 Bane Male Human DC Comics bad # 44 Rhino Male Human / Radiation Marvel Comics bad # 45 Klaw Male Human Marvel Comics bad # 46 Sabretooth Male Mutant Marvel Comics bad # 47 Molten Man Male \u0026lt;NA\u0026gt; Marvel Comics bad # 48 Venom II Male \u0026lt;NA\u0026gt; Marvel Comics bad # 49 Ra\u0026#39;s Al Ghul Male Human DC Comics bad # 50 Evilhawk Male Alien Marvel Comics bad # 51 Blackout Male Demon Marvel Comics bad # 52 Solomon Grundy Male Zombie DC Comics bad # 53 Electro Male Human Marvel Comics bad # 54 Morlun Male \u0026lt;NA\u0026gt; Marvel Comics bad # 55 Blob Male \u0026lt;NA\u0026gt; Marvel Comics bad # 56 Gog Male \u0026lt;NA\u0026gt; DC Comics bad # 57 Junkpile Male Mutant Marvel Comics bad # 58 Joker Male Human DC Comics bad # 59 Demogoblin Male Demon Marvel Comics bad # 60 Zoom Male \u0026lt;NA\u0026gt; DC Comics bad # 61 Killer Croc Male Metahuman DC Comics bad # 62 Shocker Male Human Marvel Comics bad # 63 Vanisher Male \u0026lt;NA\u0026gt; Marvel Comics bad # 64 Vulture Male Human Marvel Comics bad # 65 Kraven the Hunter Male Human Marvel Comics bad # 66 Lizard Male Human Marvel Comics bad # 67 Green Goblin II Male \u0026lt;NA\u0026gt; Marvel Comics bad # 68 Mister Mxyzptlk Male God / Eternal DC Comics bad # 69 Green Goblin Male Human Marvel Comics bad # 70 Hydro-Man Male \u0026lt;NA\u0026gt; Marvel Comics bad # 71 Tiger Shark Male Human Marvel Comics bad # 72 Moses Magnum Male \u0026lt;NA\u0026gt; Marvel Comics bad # 73 Changeling Male \u0026lt;NA\u0026gt; Marvel Comics bad # 74 Rick Flag Male \u0026lt;NA\u0026gt; DC Comics bad # 75 Kraven II Male Human Marvel Comics bad # 76 Mister Freeze Male Human DC Comics bad # 77 Bullseye Male Human Marvel Comics bad # 78 Deadshot Male Human DC Comics bad # 79 Leader Male \u0026lt;NA\u0026gt; Marvel Comics bad # 80 Lightning Lord Male \u0026lt;NA\u0026gt; DC Comics bad # 81 Big Man Male \u0026lt;NA\u0026gt; Marvel Comics bad # 82 Proto-Goblin Male \u0026lt;NA\u0026gt; Marvel Comics bad # 83 Blizzard II Male \u0026lt;NA\u0026gt; Marvel Comics bad # 84 Scarecrow Male Human DC Comics bad # 85 Warp Male \u0026lt;NA\u0026gt; DC Comics bad # 86 Red Skull Male \u0026lt;NA\u0026gt; Marvel Comics bad # 87 Penguin Male Human DC Comics bad # 88 Kevin 11 Male Human DC Comics bad # 89 Chameleon Male \u0026lt;NA\u0026gt; DC Comics bad # 90 Blackwing Male \u0026lt;NA\u0026gt; Marvel Comics bad # 91 Lex Luthor Male Human DC Comics bad # 92 Tinkerer Male \u0026lt;NA\u0026gt; Marvel Comics bad # 93 Walrus Male Human Marvel Comics bad # 94 Riddler Male \u0026lt;NA\u0026gt; DC Comics bad # 95 Pyro Male \u0026lt;NA\u0026gt; Marvel Comics bad # 96 Doctor Doom II Male \u0026lt;NA\u0026gt; Marvel Comics bad # 97 Doctor Octopus Male Human Marvel Comics bad # 98 Weapon XI Male \u0026lt;NA\u0026gt; Marvel Comics bad # 99 Mister Sinister Male Human / Altered Marvel Comics bad # 100 Bloodwraith Male \u0026lt;NA\u0026gt; Marvel Comics bad # 101 Bird-Man Male Human Marvel Comics bad # 102 Bird-Man II Male Human Marvel Comics bad # 103 Ammo Male Human Marvel Comics bad # 104 Hobgoblin Male \u0026lt;NA\u0026gt; Marvel Comics bad # 105 Blizzard Male \u0026lt;NA\u0026gt; Marvel Comics bad # 106 Black Abbott Male \u0026lt;NA\u0026gt; Marvel Comics bad # 107 Razor-Fist II Male \u0026lt;NA\u0026gt; Marvel Comics bad # Intelligence Strength Speed Durability Power Combat Total Group # 1 94 100 96 100 94 95 579 villain # 2 94 100 100 100 100 85 579 villain # 3 75 100 100 100 100 100 575 villain # 4 88 95 83 100 100 80 546 villain # 5 88 80 67 120 100 90 545 villain # 6 75 93 92 100 100 80 540 villain # 7 88 100 70 99 100 74 531 villain # 8 88 100 83 99 100 56 526 villain # 9 88 100 92 100 89 56 525 villain # 10 88 85 83 100 100 56 512 villain # 11 88 100 23 100 100 95 506 villain # 12 88 85 47 100 100 85 505 villain # 13 75 95 83 85 90 70 498 villain # 14 88 90 38 90 100 90 496 villain # 15 100 100 33 100 100 60 493 villain # 16 88 83 35 100 95 85 486 villain # 17 88 100 17 100 100 80 485 villain # 18 88 83 42 100 100 64 477 villain # 19 50 95 58 98 90 70 461 villain # 20 50 85 100 85 100 40 460 villain # 21 63 63 70 84 81 90 451 villain # 22 88 80 27 84 91 80 450 villain # 23 88 85 35 95 100 42 445 villain # 24 75 57 65 84 79 84 444 villain # 25 63 80 53 90 55 95 436 villain # 26 100 32 20 100 93 84 429 villain # 27 75 80 53 64 100 56 428 villain # 28 88 57 47 85 85 56 418 villain # 29 100 48 58 70 71 70 417 villain # 30 100 28 63 90 60 75 416 villain # 31 88 80 23 100 66 56 413 villain # 32 75 53 23 95 74 64 384 villain # 33 63 73 35 90 66 56 383 villain # 34 75 80 47 56 59 64 381 villain # 35 88 63 25 90 57 56 379 villain # 36 50 52 60 85 49 80 376 villain # 37 50 80 23 84 72 64 373 villain # 38 100 28 23 28 99 95 373 villain # 39 8 63 60 95 62 84 372 villain # 40 75 36 60 84 60 56 371 villain # 41 50 11 47 95 87 80 370 villain # 42 63 81 28 28 100 70 370 villain # 43 88 53 23 56 51 95 366 villain # 44 25 80 43 90 37 85 360 villain # 45 63 38 33 100 62 60 356 villain # 46 55 53 25 90 28 100 351 villain # 47 50 73 23 84 53 56 339 villain # 48 50 57 47 70 54 56 334 villain # 49 100 28 32 42 27 100 329 villain # 50 50 32 33 70 78 64 327 villain # 51 63 32 45 80 38 65 323 villain # 52 9 93 13 100 78 30 323 villain # 53 69 10 50 56 67 64 316 villain # 54 63 60 35 42 59 56 315 villain # 55 10 83 23 95 26 72 309 villain # 56 50 34 47 72 39 56 298 villain # 57 50 38 17 90 71 30 296 villain # 58 100 10 12 56 22 90 290 villain # 59 50 48 42 35 54 60 289 villain # 60 50 10 100 28 72 28 288 villain # 61 25 48 33 85 36 60 287 villain # 62 63 10 23 70 63 56 285 villain # 63 63 10 75 56 39 42 285 villain # 64 63 22 47 56 40 56 284 villain # 65 63 32 35 42 26 85 283 villain # 66 38 51 27 70 40 56 282 villain # 67 75 55 37 50 38 26 281 villain # 68 113 10 12 14 100 28 277 villain # 69 75 48 35 48 38 28 272 villain # 70 38 13 25 80 66 50 272 villain # 71 38 72 42 70 21 28 271 villain # 72 75 28 12 42 55 56 268 villain # 73 63 10 23 42 64 64 266 villain # 74 88 11 23 28 19 95 264 villain # 75 50 34 23 28 36 85 256 villain # 76 75 32 12 70 37 28 254 villain # 77 50 11 25 70 20 70 246 villain # 78 50 10 23 28 47 80 238 villain # 79 100 10 12 14 58 42 236 villain # 80 44 10 23 42 66 42 227 villain # 81 75 12 23 28 19 70 227 villain # 82 63 38 23 48 22 28 222 villain # 83 38 10 27 42 47 56 220 villain # 84 81 10 12 14 48 50 215 villain # 85 38 10 23 28 63 50 212 villain # 86 75 10 12 14 19 80 210 villain # 87 75 10 12 28 30 45 200 villain # 88 25 7 12 14 100 40 198 villain # 89 88 10 12 28 28 28 194 villain # 90 38 10 35 32 20 56 191 villain # 91 100 10 12 14 10 28 174 villain # 92 100 10 23 14 10 14 171 villain # 93 50 28 8 50 11 20 167 villain # 94 100 10 12 14 10 14 160 villain # 95 38 10 12 14 50 28 152 villain # 96 1 32 1 1 0 1 36 villain # 97 1 1 1 1 0 1 5 villain # 98 1 1 1 1 0 1 5 villain # 99 1 1 1 1 0 1 5 villain # 100 1 1 1 1 0 1 5 villain # 101 1 1 1 1 0 1 5 villain # 102 1 1 1 1 0 1 5 villain # 103 1 1 1 1 0 1 5 villain # 104 1 1 1 1 0 1 5 villain # 105 1 1 1 1 0 1 5 villain # 106 1 1 1 1 0 1 5 villain # 107 1 1 1 1 0 1 5 villain Guardar el output # Vamos a almacenar la variable marvelDc_edited la cual ya se encuentra limpia de duplicados y mantiene todas las ediciones que le hemos hecho.\nsave(marvelDc_edited, file = \u0026#34;Presentaciones/data/marvelDc_edited.RData\u0026#34;) Ejercicios # 1) ¿Quiénes son los personajes más fuertes de cada empresa?\nRespuesta 2) ¿Quiénes son los personajes más inteligentes de cada empresa?\nRespuesta 3) ¿Quiénes son las mujeres más poderosas y malvadas?\nRespuesta 4) ¿Quiénes son los hombres más poderosos y malvados?\nRespuesta ","date":"15 marzo 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-7/","section":"Publicaciones","summary":"Con dplyr, puedes filtrar filas, seleccionar columnas, ordenar datos y agrupar datos de forma eficiente.","title":"Manipulación de datos usando dplyr","type":"posts"},{"content":"La manipulación de datos con funciones de R base es un tema esencial en análisis de datos. En este contexto, R ofrece una variedad de herramientas para transformar, filtrar y resumir datos. Desde la importación hasta la limpieza, estas funciones te permiten trabajar con data frames y vectores de manera eficiente.\nLa manipulación de datos implica tareas como filtrar filas, seleccionar columnas, crear nuevas variables y calcular estadísticas descriptivas. Además, puedes combinar múltiples data frames y aplicar operaciones a nivel de fila o columna.\nPaquetes necesarios # install.packages(\u0026#34;dplyr\u0026#34;) # Manipulación de datos install.packages(\u0026#34;tidyr\u0026#34;) # Manipulación de datos install.packages(\u0026#34;tidyverse\u0026#34;)# Manipulación de datos install.packages(\u0026#34;reshape2\u0026#34;) # Transformación de datos install.packages(\u0026#34;ggplot2\u0026#34;) # Visualización grafica install.packages(\u0026#34;cowplot\u0026#34;) # Generar varios graficos en una misma figura Funciones básicas en R # Función Empleo Documentación Empleos sum() Adición / suma ?sum sum(2+7) prod() Sustracción/resta ?prod prod(9-2) max() Valor máximo ?max max(c(1,2,3,4,5)) min() Valor mínimo ?min min(1:5) range() Rango ?range range(c(2,8,7,6,1)) mean() Promedio ?mean mean(c(2,8,7,6,1)) median() Mediana ?median median(c(2,8,7,6,1)) var() Varianza ?var var(1:10); var(1:5, 1:5) con() Covarianza ?cov cov(1:10, 2:11) cor() Matriz de correlación ?cor cor(1:10,2:11) unique() Valor unico ?unique unique(df$expression) sort() Ordenar ?sort sort(df$expression) order() Ordenar ?order df[order(df$expression),] table() cuentas de cada valor en tablas ?table table(df) subset() Extraer información de una MATRIZ o DATAFRAME ?subset subset(df, expression == 1.8) sample() Extraer información de manera aleatoria ?sample sample(df$expression, size = 3) length() Número de elementos de un VECTOR ?length length(df$expression) dim() Dimensiones de una MATRIZ o DATAFRAME ?dim dim(df) is.na() Es un valor NA? ?is.na is.na(df) t() Cambiar filas por columnas (transposición) ?t t(df) Existen otras funciones matematicas como log, exp,log10, log2, sin, cos, tan, asin, acos, atan, abs, sqrt, etc.\nOtras funciones importantes son rbind() y cbind() # Puedes encontrar su documentación empleando ?rbind y ?cbind\ncbind() # Podemos unir las columnas dos vectores.\na \u0026lt;- c(1, 3, 3, 4, 5) b \u0026lt;- c(7, 7, 8, 3, 2) new_matrix \u0026lt;- cbind(a, b) new_matrix # a b # [1,] 1 7 # [2,] 3 7 # [3,] 3 8 # [4,] 4 3 # [5,] 5 2 Crear un dataframe\ndf \u0026lt;- data.frame(genes = paste0(\u0026#34;Gen\u0026#34;, seq_len(8)), expression = c(3.8, 5.5, 6.3, 1.8, 9, rep(3,3)), treatment =c(rep(\u0026#34;Control\u0026#34;, 4), rep(\u0026#34;Condicion1\u0026#34;,4))) Tambiend podemos incorporarle una nueva columna a un dataframe\ndate_sample \u0026lt;- rep(c(11, 12, 13, 14),2) df \u0026lt;- cbind(df, date_sample) # Renombrar columna 4 colnames(df)[4] \u0026lt;- \u0026#34;Date\u0026#34; head(df) # genes expression treatment Date # 1 Gen1 3.8 Control 11 # 2 Gen2 5.5 Control 12 # 3 Gen3 6.3 Control 13 # 4 Gen4 1.8 Control 14 # 5 Gen5 9.0 Condicion1 11 # 6 Gen6 3.0 Condicion1 12 rbinf() # Vamos a unir dos dataframe pero ambos deben tener el mismo numero y nombre en su columnas.\nNOTA: Los rownames deben ser Únicos, por lo que no debemos comenzar desde el Gen1.\ndf_v2 \u0026lt;- data.frame(genes = paste0(\u0026#34;Gen\u0026#34;, 9:16), expression = c(6.1, 6.2, 5, 2, 7, rep(8,3)), treatment = c(rep(\u0026#34;Control\u0026#34;, 4), rep(\u0026#34;Condicion1\u0026#34;,4)), Date = rep(c(11, 12, 13, 14),2) ) df_v2$treatment \u0026lt;- as.factor(df_v2$treatment) # conversión a factor #unir df_new \u0026lt;- rbind(df, df_v2) head(df_new) # genes expression treatment Date # 1 Gen1 3.8 Control 11 # 2 Gen2 5.5 Control 12 # 3 Gen3 6.3 Control 13 # 4 Gen4 1.8 Control 14 # 5 Gen5 9.0 Condicion1 11 # 6 Gen6 3.0 Condicion1 12 Información de la estructura de un dataframe # Para ver su estructura e información:\ndim(df) # dimensiones [fila, columna] length(df) # largo, número de columnas ncol(df) # número de columnas nrow(df) # número de filas names(df) # nombre de las columnas str(df) # Estructura Podemos adornar la salida colocando estas notas.\ncat(\u0026#34;Dimensiones:\u0026#34;, dim(df), \u0026#34;\\n\u0026#34;) # Dimensiones: 8 4 cat(\u0026#34;Numero de columnas:\u0026#34;, ncol(df), \u0026#34;\\n\u0026#34;) # Numero de columnas: 4 cat(\u0026#34;Numero de filas:\u0026#34;, nrow(df), \u0026#34;\\n\u0026#34;) # Numero de filas: 8 cat(\u0026#34;Nombre de las columnas:\u0026#34;, names(df), \u0026#34;\\n\u0026#34;) # Nombre de las columnas: genes expression treatment Date NOTA: El \u0026ldquo;\\n\u0026rdquo; indica saltos de linea en el texto.\nFunción which() # Podemos usar esta función para extraer la informacion y/o las posiciones que cumpla con un argumento logico.\nDocumentación ?which\nx \u0026lt;- c(1, 5, 4, 8, 4) which(x == 4 | x == 1) # condicional que sea igual a 4 o a 1 # [1] 1 3 5 ¿Cuántos números son iguales a 4 y a 1?\nlength(which(x == 4 | x == 1)) # [1] 3 En una matriz # Ejemplo 1: Obtener las valores que al divirse entre 3 sean iguales a cero # m \u0026lt;- matrix(1:12, 3, 4) # Generar una matriz de 3 x 4 # Opción A - con R base m[m %% 3 == 0] # [1] 3 6 9 12 # Opción B - con la función which div.3 \u0026lt;- m %% 3 == 0 which(div.3) # OR which(m %% 3 == 0) # [1] 3 6 9 12 Ejemplo 2: Obtener las posiciones de los numeros que al divirse entre 3 sean iguales a cero # # Para obtener la información de las posiciones podemos usar: which(div.3, arr.ind = TRUE) # row col # [1,] 3 1 # [2,] 3 2 # [3,] 3 3 # [4,] 3 4 # Ejemplo 2 rownames(m) \u0026lt;- paste(\u0026#34;Case\u0026#34;, 1:3, sep = \u0026#34;_\u0026#34;) # renombrar las filas which(m %% 5 == 0, arr.ind = TRUE) # Extraer las posiciones que cumplan con la condición logica # row col # Case_2 2 2 # Case_1 1 4 Index # Por medio de un index podemos:\n1) Obtener la información de un dato en específico. 2) Modificar un dato en específico. 3) Eliminarlo un dato en específico. Podemos hacer la pregunta de dos maneras, 1) ¿Cuál es el nivel de expresión del Gen2? O 2) ¿Que gen contiene una expresión de 5.5?\nFunción which() en un dataframe # ¿Que gen contiene una expresión de 1.8?\n# Opción A which(df == 1.8, arr.ind = TRUE) # row col # [1,] 4 2 # Opción B df[which(df$expression == 1.8), ] # genes expression treatment Date # 4 Gen4 1.8 Control 14 Repaso # Paso 1. Crear un RBioProject # Paso 2. Descargar los datos y verificar su ubicaciónen la carpeta data/ # Descarga los tres datasets de Marvel dando click en este link, debes tener tres archivos en la misma carpeta charactersStats.csv, heroesInformation.csv y superHeroPowers.csv. Asegúrate de guardarlo en el directorio donde hiciste tu Rproject. En mi caso, guarde los datos en la carpeta data/.\nVerifica que se encuentren los tres archivos en la carpeta data/.\ndir(\u0026#34;data\u0026#34;) # [1] \u0026#34;charactersStats.csv\u0026#34; \u0026#34;dirty_iris.csv\u0026#34; \u0026#34;fullMarvelDc.RData\u0026#34; # [4] \u0026#34;heroesInformation.csv\u0026#34; \u0026#34;Info_data.RData\u0026#34; \u0026#34;marvelDc.RData\u0026#34; # [7] \u0026#34;marvelDcInfo.RData\u0026#34; \u0026#34;MMHOME.csv\u0026#34; \u0026#34;planets.csv\u0026#34; # [10] \u0026#34;superheroes.RData\u0026#34; \u0026#34;superHeroPowers.csv\u0026#34; Paso 3. Importar los datos en R # Importa los archivos en R de la siguiente manera: infoCharacters \u0026lt;- read.csv(\u0026#34;data/heroesInformation.csv\u0026#34;, na.strings = c(\u0026#34;-\u0026#34;, \u0026#34;-99\u0026#34;)) # La opción na.string nos permite sustituir valores - y -99 por NA infoPowers \u0026lt;- read.csv(\u0026#34;data/superHeroPowers.csv\u0026#34;) infoStats \u0026lt;- read.csv(\u0026#34;data/charactersStats.csv\u0026#34;, na.strings = \u0026#34;\u0026#34;) Visualiza su información con head() o View().\nNOTA: Primero debes crear la carpeta data/ antes de descargar los archivos.\nBuenas prácticas # Nuestro script debe verse asi:\n###### # Script de clase \u0026#34;Intro a R\u0026#34; # Evelia Coss # 8 de marzo 2024 ####### indir = \u0026#34;C:/Users/ecoss/OneDrive - CINVESTAV/Documentos/Posdoc_LIIGH/VieRnesBioinfo/ViernesBioinfo_2024/Presentaciones/data/\u0026#34; outdir = \u0026#34;C:/Users/ecoss/OneDrive - CINVESTAV/Documentos/Posdoc_LIIGH/VieRnesBioinfo/ViernesBioinfo_2024/Presentaciones/\u0026#34; # Importar datos infoCharacters \u0026lt;- read.csv(paste0(indir,\u0026#34;heroesInformation.csv\u0026#34;), na.strings = c(\u0026#34;-\u0026#34;, \u0026#34;-99\u0026#34;)) # La opción na.string nos permite sustituir valores - y -99 por NA infoPowers \u0026lt;- read.csv(paste0(indir,\u0026#34;superHeroPowers.csv\u0026#34;)) infoStats \u0026lt;- read.csv(paste0(indir,\u0026#34;charactersStats.csv\u0026#34;), na.strings = \u0026#34;\u0026#34;) Paso 4. Renombrar la columna Name en todos los dataframe # Vamos a unificar el nombre las columnas que tienen los nombre en todas las columnas colocando el nombre Name. El dataframe infoStats ya contiene ese nombre en la columna 1.\ncolnames(infoCharacters)[colnames(infoCharacters) == \u0026#34;name\u0026#34;] \u0026lt;- \u0026#34;Name\u0026#34; colnames(infoPowers)[colnames(infoPowers) == \u0026#34;hero_names\u0026#34;] \u0026lt;- \u0026#34;Name\u0026#34; Paso 5. Seleccionar SOLO los datos de Marvel Comics y DC Comics # Podemos usar la función unique() para obtener los valores únicos en un vector o de una columna en un dataframe.\n# Empresas comprendidas en esta base de datos unique(infoCharacters$Publisher) # [1] \u0026#34;Marvel Comics\u0026#34; \u0026#34;Dark Horse Comics\u0026#34; \u0026#34;DC Comics\u0026#34; # [4] \u0026#34;NBC - Heroes\u0026#34; \u0026#34;Wildstorm\u0026#34; \u0026#34;Image Comics\u0026#34; # [7] \u0026#34;\u0026#34; \u0026#34;Icon Comics\u0026#34; \u0026#34;SyFy\u0026#34; # [10] \u0026#34;Hanna-Barbera\u0026#34; \u0026#34;George Lucas\u0026#34; \u0026#34;Team Epic TV\u0026#34; # [13] \u0026#34;South Park\u0026#34; \u0026#34;HarperCollins\u0026#34; \u0026#34;ABC Studios\u0026#34; # [16] \u0026#34;Universal Studios\u0026#34; \u0026#34;Star Trek\u0026#34; \u0026#34;IDW Publishing\u0026#34; # [19] \u0026#34;Shueisha\u0026#34; \u0026#34;Sony Pictures\u0026#34; \u0026#34;J. K. Rowling\u0026#34; # [22] \u0026#34;Titan Books\u0026#34; \u0026#34;Rebellion\u0026#34; \u0026#34;Microsoft\u0026#34; # [25] \u0026#34;J. R. R. Tolkien\u0026#34; Verificamos las dimensiones # Esperariamos que cada fila sea un solo personaje, pero este dataframe contiene nombres repetidos.\ndim(marvelDcInfo) # [1] 603 11 Esperariamos que las filas representaran el numero de personales, teniendo un total de 603 personajes y las columnas representaran las variables, teniendo un total de 11 variables.\nSin embargo, podemos extraer los nombres de los personajes que solo se repitan una vez y veremos que nuestro dataset no esta limpio. Ya que solo tiene un total de 585 personajes.\nlength(unique(marvelDcInfo$Name)) # [1] 585 Observar valores duplicados # Observar cuales se duplican mediante la función duplicated() de R base.\nhead(marvelDcInfo[duplicated(marvelDcInfo$Name), ], 3) # X Name Gender Eye.color Race Hair.color Height Publisher # 49 48 Atlas Male blue God / Eternal Brown 198 DC Comics # 51 50 Atom Male \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; \u0026lt;NA\u0026gt; -99 DC Comics # 64 63 Batgirl Female green Human Red 170 DC Comics # Skin.color Alignment Weight # 49 \u0026lt;NA\u0026gt; bad 126 # 51 \u0026lt;NA\u0026gt; good -99 # 64 \u0026lt;NA\u0026gt; good 57 Para saber cuantos personajes duplicados podemos usar length()\nlength(marvelDcInfo[duplicated(marvelDcInfo$Name), ]) # [1] 11 Existen 11 personajes que se encuentran duplicados en esta base de datos.\nRevisemos un ejemplo de datos duplicados # Vamos a obtener la información de Batman y vemos que tiene dos filas pertenecientes al mismo personaje.\n# Opción A marvelDcInfo[marvelDcInfo$Name == \u0026#34;Batman\u0026#34;, ] # X Name Gender Eye.color Race Hair.color Height Publisher Skin.color # 69 68 Batman Male blue Human black 188 DC Comics \u0026lt;NA\u0026gt; # 70 69 Batman Male blue Human Black 178 DC Comics \u0026lt;NA\u0026gt; # Alignment Weight # 69 good 95 # 70 good 77 Tambien podemos usar la función subset() para extraer información de algun personaje.\n# Opción B subset(marvelDcInfo, Name == \u0026#34;Batman\u0026#34;) # X Name Gender Eye.color Race Hair.color Height Publisher Skin.color # 69 68 Batman Male blue Human black 188 DC Comics \u0026lt;NA\u0026gt; # 70 69 Batman Male blue Human Black 178 DC Comics \u0026lt;NA\u0026gt; # Alignment Weight # 69 good 95 # 70 good 77 Empecemos con la limpieza de los datos # Paso 6. Eliminar duplicados # El signo de exclamación ! nos permite indicar lo contrario, es decir, devolverme todos los que no esten duplicados seria asi !duplicated().\nmarvelDcInfo \u0026lt;- marvelDcInfo[!duplicated(marvelDcInfo$Name), ] Paso 7. Seleccionar columnas # marvelDcInfo \u0026lt;- marvelDcInfo[, c(\u0026#34;Name\u0026#34;, \u0026#34;Gender\u0026#34;, \u0026#34;Race\u0026#34;, \u0026#34;Publisher\u0026#34;)] head(marvelDcInfo, 3) # Name Gender Race Publisher # 1 A-Bomb Male Human Marvel Comics # 3 Abin Sur Male Ungaran DC Comics # 4 Abomination Male Human / Radiation Marvel Comics Paso 8. Cambiar formatos en algunas columnas # Debemos convertir las columnas Name, Gender, Race y Publisher de character a factor.\nstr(marvelDcInfo) # \u0026#39;data.frame\u0026#39;: 585 obs. of 4 variables: # $ Name : chr \u0026#34;A-Bomb\u0026#34; \u0026#34;Abin Sur\u0026#34; \u0026#34;Abomination\u0026#34; \u0026#34;Abraxas\u0026#34; ... # $ Gender : chr \u0026#34;Male\u0026#34; \u0026#34;Male\u0026#34; \u0026#34;Male\u0026#34; \u0026#34;Male\u0026#34; ... # $ Race : chr \u0026#34;Human\u0026#34; \u0026#34;Ungaran\u0026#34; \u0026#34;Human / Radiation\u0026#34; \u0026#34;Cosmic Entity\u0026#34; ... # $ Publisher: chr \u0026#34;Marvel Comics\u0026#34; \u0026#34;DC Comics\u0026#34; \u0026#34;Marvel Comics\u0026#34; \u0026#34;Marvel Comics\u0026#34; ... Para cambiar a factor usamos la función as.factor().\nmarvelDcInfo$Name \u0026lt;- as.factor(marvelDcInfo$Name) marvelDcInfo$Gender \u0026lt;- as.factor(marvelDcInfo$Gender) marvelDcInfo$Race \u0026lt;- as.factor(marvelDcInfo$Race) marvelDcInfo$Publisher \u0026lt;- as.factor(marvelDcInfo$Publisher) Ejercicios # ¿Cuántos personajes hay por cada empresa?\n¿Cuántos personajes son mujeres y hombres hay por cada empresa?\n¿Cuántas razas hay en el dataframe?\n¿Cuáles son las razas predominantes de cada empresa?\n1) ¿Cuántos personajes hay por cada empresa? # Opcion A # summary(marvelDcInfo$Publisher) # DC Comics Marvel Comics # 206 379 Opcion B # table(marvelDcInfo$Publisher) # # DC Comics Marvel Comics # 206 379 2) ¿Cuántos personajes son mujeres y hombres hay por cada empresa? # DC Comics # cat(\u0026#34;DC Comics, hombres:\u0026#34;, nrow(subset(marvelDcInfo, Publisher == \u0026#34;DC Comics\u0026#34; \u0026amp; Gender == \u0026#34;Male\u0026#34;)), \u0026#34;\\n\u0026#34;) # DC Comics, hombres: 147 cat(\u0026#34;DC Comics, mujeres:\u0026#34;, nrow(subset(marvelDcInfo, Publisher == \u0026#34;DC Comics\u0026#34; \u0026amp; Gender == \u0026#34;Female\u0026#34;)), \u0026#34;\\n\u0026#34;) # DC Comics, mujeres: 58 Marvel # cat(\u0026#34;Marvel, hombres:\u0026#34;, nrow(subset(marvelDcInfo, Publisher == \u0026#34;Marvel Comics\u0026#34; \u0026amp; Gender == \u0026#34;Male\u0026#34;)), \u0026#34;\\n\u0026#34;) # Marvel, hombres: 245 cat(\u0026#34;Marvel, mujeres:\u0026#34;, nrow(subset(marvelDcInfo, Publisher == \u0026#34;Marvel Comics\u0026#34; \u0026amp; Gender == \u0026#34;Female\u0026#34;)), \u0026#34;\\n\u0026#34;) # Marvel, mujeres: 110 3) ¿Cuántas razas hay en el dataframe? # Opción A # Eliminamos los NA que tengamos con !is.na(), posteriormente, obtenemos los nombres unicos y medimos.\nlength(unique(marvelDcInfo$Race[!is.na(marvelDcInfo$Race)])) # [1] 48 Opción B # Como esta columna se encuentra en factores, podemos ver el numero de niveles con a funcion nlevels().\nnlevels(marvelDcInfo$Race) # [1] 48 4) ¿Cuáles son las razas predominantes de cada empresa? # Podemos usar la función sort() para ordenar los datos de mayor a menor, usando el argumento decreasing = TRUE.\nLa raza Human o humana es la mas predominante en ambas empresas, seguida de la mutante en el caso de Marvel Comics.\nhead(sort(table(marvelDcInfo$Race), decreasing = TRUE), 10) # # Human Mutant Human / Radiation God / Eternal # 167 58 11 10 # Symbiote Alien Kryptonian Android # 8 7 7 6 # Cyborg Asgardian # 6 5 Guardar variables para la siguiente clase # Guardar una sola variable\nsave(marvelDcInfo, file = \u0026#34;Presentaciones/data/marvelDcInfo.RData\u0026#34;) Guardar varias variables\nsave(infoStats, infoPowers, marvelDcInfo, file = \u0026#34;Presentaciones/data/Info_data.RData\u0026#34;) ","date":"8 marzo 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-6/","section":"Publicaciones","summary":"La manipulación de datos con funciones de R base es un tema esencial en análisis de datos.","title":"Manipulación de datos con funciones de R base","type":"posts"},{"content":" ","date":"1 marzo 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-5/","section":"Publicaciones","summary":" ","title":"Terapia de Bioinfo grupal (opcional)","type":"posts"},{"content":"","date":"23 febrero 2024","externalUrl":null,"permalink":"/authors/alejandra/","section":"Authors","summary":"","title":"Alejandra Schafer","type":"authors"},{"content":" ¿Que es y para que sirve Rmarkdown? # Es una herramienta que permite escribir documentos dinamicos con código de R, de manera fácil y legible.\n¿Por que realizar un Rmarkdown? # Nos ayuda a entregar un reporte interactivo ya sea en archivo html o pdf.\n¿Como creamos un archivo Rmarkdown? # Vayamos a la parte superior al menú Archivos \u0026gt; Nuevo documento.\nLo primero que vamos a tener será un archivo vacio así: # Y para poder generar los documentos hay que knitearlo así:\nLos archivos que se pueden generar son:\nPDF (Tesis o curriculum vitae)\nhtml (página web o presentaciones)\nWord\nOrganización de la información: # División de titulos:\n# Titulo principal ## Subtitulo 1\n### Subtitulo 2\n#### Subtitulo 3\n##### Subtitulo 4\nTitulo principal # Subtitulo 1 # Organización de la información: # División de titulos:\n# Titulo principal ## Subtitulo 1 ### Subtitulo 2 #### Subtitulo 3 ##### Subtitulo 4 Titulo principal # Subtitulo 1 # Subtitulo 2 # Subtitulo 3Subtitulo 2 # Subtitulo 3 # Organización de la información: # Estilos de las letras: para modificar el estilo hay que agregar un \u0026lsquo;*\u0026rsquo; antes y despúes del texto.\nitalica* *negritas**\n**ambos***\n~~tachado~~\n\u0026lt;span style=\u0026ldquo;color:blue\u0026rdquo;\u0026gt;Texto azul\u0026lt;/span\u0026gt;\nitalica.\nnegritas.\nambos.\ntachado.\nTexto azul (La pagina web no soporta span)\nOrganización de la información: # Listas:\nuno dos - 2a - 2b * tres - 3a + 3rd layer - 2b * cuatro uno\ndos\n- 2a - - 2b - tres\n- 3a - - 3rd layer - - - 2b - cuatro\nDiferentes lenguajes de programación # Existen varios lenguajes de programación que se pueden usar en un Rmarkdown # Diferentes lenguajes de programación # R # x = \u0026#39;hello, world!\u0026#39; x # [1] \u0026#34;hello, world!\u0026#34; Bash # x=$(echo \u0026#39;hello, world!\u0026#39;) echo $x # hello, world! Visualización de datos # Vamos a usar un set de data predeterminado de R, este se llama pressure. Y vamos a visualizar los datos con la función head()\nhead(pressure) # temperature pressure # 1 0 0.0002 # 2 20 0.0012 # 3 40 0.0060 # 4 60 0.0300 # 5 80 0.0900 # 6 100 0.2700 Para ver las estadisticas de estos datos usamos la función summary()\nsummary(pressure) # temperature pressure # Min. : 0 Min. : 0.0002 # 1st Qu.: 90 1st Qu.: 0.1800 # Median :180 Median : 8.8000 # Mean :180 Mean :124.3367 # 3rd Qu.:270 3rd Qu.:126.5000 # Max. :360 Max. :806.0000 Ahora haremos un plot con los datos.\nplot(pressure, type=\u0026#34;l\u0026#34;, main=\u0026#34;Grafica muestra\u0026#34;, xlab=\u0026#34;Eje X\u0026#34;, ylab=\u0026#34;Eje Y\u0026#34;) Ejercicio: # Crea un Rmarkdown\nCarga el siguiente set de datos\ndatos \u0026lt;- read.csv(\u0026#34;https://raw.githubusercontent.com/rpizarrog/Curso-Titulacion-Data-Science-/master/2020/datos/starwars.csv\u0026#34;, encoding = \u0026#34;UTF-8\u0026#34;) Visualiza los datos usando la funcion (head)\nCrea Titulos y subtitulos en el archivo usando la tematica del dataset.\nGeneracion de tablas # La forma más sencilla es de la siguiente manera:\nCabecera A | Cabecera B -- | -- Campo A1 | Campo B1 Campo A2 | Campo B Cabecera A Cabecera B Campo A1 Campo B1 Campo A2 Campo B2 Si queremos modificar la alineación de las columnas. Se pueden poner dos puntos para especificar el orden.\n| Objetos a la izquierda | Obetos centrados | Objetos a la derecha | | :------- | :------: | -------: | | 1 | a | i | | 2 | b | ii | Objetos a la izquierda Objetos centrados Objetos a la derecha 1 a i 2 b ii Tambien podemos generar tablas en formato de html\nNum Header Header2 Header3 1 first 1st One 2 second 2nd Two 3 third 3rd Three iris %\u0026gt;% head(3) %\u0026gt;% DT::datatable() Ejercicio: # Has una tabla con la siguiente informacion:\nhead(datos[,1:5]) # X name height mass hair_color # 1 1 Luke Skywalker 172 77 blond # 2 2 C-3PO 167 75 \u0026lt;NA\u0026gt; # 3 3 R2-D2 96 32 \u0026lt;NA\u0026gt; # 4 4 Darth Vader 202 136 none # 5 5 Leia Organa 150 49 brown # 6 6 Owen Lars 178 120 brown, grey Respuesta del ejericicio # X | name | height | mass | hair_color -- | -- | -- | -- | -- 1 | Luke Skywalker | 172 | 77 | blond 2 | C-3PO | 167 | 75 | NA 3 | R2-D2 | 96 | 32 | NA 4 | Darth Vader | 202 | 136 | none 5 | Leia Organa | 150 | 49 | brown 6 | Owen Lars | 178 | 120 | brown, grey X name height mass hair_color 1 Luke Skywalker 172 77 blond 2 C-3PO 167 75 NA 3 R2-D2 96 32 NA 4 Darth Vader 202 136 none 5 Leia Organa 150 49 brown 6 Owen Lars 178 120 brown, grey Agregar imagenes en un reporte # Desde internet # ![Example](https://i.imgur.com/kDAxKFz.png) Agregar imagenes en un reporte # Desde un archivo de nuestra computadora # \u0026lt;img src = \u0026#34;photo6.png\u0026#34;, height = \u0026#34;350\u0026#34;\u0026gt; Realizar calculos en un texto # Podemos realizar calculos matematicos en el texto usando comillas invertidas () en ambos extremos.\nLa suma de 4 mas 5 es \u0026#39;r 4+5\u0026#39; La division de 4 entre 5 es \u0026#39;r 4/5\u0026#39; La multiplicacion de 4 por 5 es \u0026#39;r 4*5\u0026#39; Si 4^5 cuanto es? \u0026#39;r 4^5\u0026#39; Redondear valores, 9.44 se redondea a \u0026#39;r round(9.44,1)\u0026#39; La suma de 4 mas 5 es 9.\nLa division de 4 entre 5 es 0.8.\nLa multiplicacion de 4 por 5 es 20.\nSi 4^5 cuanto es? 1024.\nRedondear valores, 9.44 se redondea a 9.4.\nAgregar una ecuacion matematica # En la misma linea: $A = \\pi*r^{2}$ Aparte: $$y = \\mu + \\sum_{i=1}^p \\beta_i x_i + \\epsilon$$ Agregar subindices para formulas CO~2~, alternativamente con `html` CO\u0026lt;sub\u0026gt;2\u0026lt;/sub\u0026gt; Agregar super indice E=MC^2^ o $E=MC^2$, alternativamente con `html` E=MC\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt; En la misma linea: A=π∗r2\nAparte:\n$$ y = \\mu + \\sum_{i=1}^p {B_i x_i + \\epsilon} $$\nAgregar subindices para formulas CO~2~, alternativamente con html CO~2~\nAgregar super indice E=MC^2^ o E=MC2, alternativamente con html E=MC^2^\nAgregar un indice en el reporte # Informacion incial title: \u0026#34;Introduccion a Rmarkdown\u0026#34; author: \u0026#34;Alejandra Schafer\u0026#34; date: \u0026#34;2024-02-23\u0026#34; output: html_document Informacion modificada para agregar el indice. title: \u0026#34;Introduccion a Rmarkdown\u0026#34; author: \u0026#34;Alejandra Schafer\u0026#34; date: \u0026#34;2024-02-23\u0026#34; output: - html_document: - toc: yes - toc_float: yes - toc_depth: 6 - theme: cerulean title: \u0026#34;Introduccion a Rmarkdown\u0026#34; author: \u0026#34;Alejandra Schafer\u0026#34; date: \u0026#34;2024-02-23\u0026#34; output: - html_document: - toc: yes - toc_float: yes - toc_depth: 6 - theme: cerulean toc es para indicar que vas a agregar un indice en el reporte.\ntoc_float es para indicar si el indice va a ser flotante o no, si indicas yes el indice se localizara a la izquiera de la pantalla y la informacion se desplegara cuando se coloques sobre ella.\ntoc_depth es para indicar el numero de subtitulos que puedes tener en el archivo.\ntheme es la decoracion del archivo.\nPara mas temas puedes entrar al siguiente link: https://www.datadreaming.org/post/r-markdown-theme-gallery/\nConfiguracion de los chunks # En los chunks algunas cosas que se pueden especificar son: {r setup1, include = FALSE, echo= FALSE, eval=FALSE}:\ninclude = FALSE: no muestra el código.\necho = FALSE: no muestra el resultado en el documento final.\nwarning = FALSE: no muestra los warnings.\nerror = FALSE: no muestra los mensajes de error.\nmessage = FALSE: no muestra los mensajes.\ncollapse = TRUE: de ser posible colapsa la fuente y outputs de los bloques de código.\neval = FALSE: no evalúa los códigos, sirve para mostrar bloques de código sin que emita resultados.\nfig.dim = c(n,m): vector numérico para el tamaño de los plots.\nfig.cap = \u0026ldquo;message\u0026rdquo;: para colocar un caption a los plots.\nPueden encontrar mas opciones para los chunks en el siguiente link: https://yihui.org/knitr/options/#chunk-options\nEjercicio # Agrega una imagen de internet en el archivo de Rmarkdown que creaste previamente.\nSuma la columna de \u0026ldquo;height\u0026rdquo; de la tabla de tabla que generaste.\nAgrega un indice en el documento.\n","date":"23 febrero 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-4/","section":"Publicaciones","summary":"¿Que es y para que sirve Rmarkdown?","title":"Introducción a Rmarkdown","type":"posts"},{"content":"","date":"23 febrero 2024","externalUrl":null,"permalink":"/tags/rstudio/","section":"Tags","summary":"","title":"Rstudio","type":"tags"},{"content":"Matrices y Listas.\nMatriz (matrix) # # Opcion A x \u0026lt;- matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3) x # [,1] [,2] [,3] # [1,] 1 3 5 # [2,] 2 4 6 Ahora que ya conocemos las funciones seq() y seq_len() podemos crear la matriz de esta manera:\n# Opcion B x \u0026lt;- matrix(seq(1,6), nrow = 2, ncol = 3) # Opcion C **x \u0026lt;- matrix(seq_len(6), nrow = 2, ncol = 3)** Extraer elementos de una matriz (matrix) # Al igual que con los dataframe usaremos las filas y columnas (x[fila, columna]) para extraer la información.\nx[2,3] # [1] 6 Obtener la información de la columna 1.\nx[,1] # [1] 1 2 A diferencia del error que nos daria si no respetamos el [fila, columna], en las matrices si nos dara una salida:\nx[2] # [1] 2 Nos da el 2nd elemento contenido en la matriz, recuerdas que los elementos de la matriz al declararla eran c(1,2,3,4,5,6).\nNOTA: Para evitar complicaciones es mejor usar la manera [fila, columna].\nEjercicios: # Genera una matriz de tamano 2 x 3 (filas, columnas) (rows, columns) # Opcion A x \u0026lt;- matrix(1:6, nrow = 2, ncol = 3) # Opcion B x \u0026lt;- matrix(1:6, 2, 3) x Sustituir los valores presentes en la columna 3 de la matriz, por los valores 10 y 15 x[, 3] \u0026lt;- c(10,15) x # [,1] [,2] [,3] # [1,] 1 3 10 # [2,] 2 4 15 Visualizacion en modo de vector x[, 3] # [1] 10 15 Visualizacion en modo de matriz x[, 3, drop = FALSE] # [,1] # [1,] 10 # [2,] 15 NOTA: Por default se encuentra como drop = TRUE dentro del codigo interno, si queremos visualizar nuestros datos como una matriz de salida, podriamos cambiarlo a drop = FALSE.\nEliminar la columna 1 x[, -1] # [,1] [,2] # [1,] 3 10 # [2,] 4 15 Eliminar multiples columnas y Visualizacion en modo de matriz x[, -(1:2), drop = FALSE] # es lo mismo que x[, 3, drop = FALSE] # [,1] # [1,] 10 # [2,] 15 Tambien podemos usar drop = FALSE en los dataframes # En la clase anterior visualizamos los cambios que podemos realizarle al siguiente dataframe.\ndf \u0026lt;- data.frame(genes = paste0(\u0026#34;Gen\u0026#34;, seq_len(8)), expression = c(3.8, 5.5, 6.3, 1.8, 9, rep(3,3)), treatment =c(rep(\u0026#34;Control\u0026#34;, 4), rep(\u0026#34;Condicion1\u0026#34;,4))) Si quiero visualizar los primeros 3 datos de la columna 1 en forma de matriz\nhead(df[,2, drop = FALSE],3) # expression # 1 3.8 # 2 5.5 # 3 6.3 Propiedades de las matrices # Estructura de la matriz:\nstr(x) # num [1:2, 1:3] 1 2 3 4 10 15 class(x) # [1] \u0026#34;matrix\u0026#34; \u0026#34;array\u0026#34; Dimensiones:\ndim(x) # [1] 2 3 A diferencia de una dataframe, en la matriz el nombre de las filas y columnas es un valor NULL.\nrownames(x) # NULL colnames(x) # NULL Renombrar filas y columnas en la matriz # Recuerda que es una matriz de 2 filas con 3 columnas:\n# Renombrar filas rownames(x) \u0026lt;- c(\u0026#34;Gen1\u0026#34;, \u0026#34;Gen2\u0026#34;) x # [,1] [,2] [,3] # Gen1 1 3 10 # Gen2 2 4 15 # Renombrar columnas colnames(x) \u0026lt;- c(\u0026#34;Condicion1\u0026#34;, \u0026#34;Condicion2\u0026#34;, \u0026#34;Condicion3\u0026#34;) x # Condicion1 Condicion2 Condicion3 # Gen1 1 3 10 # Gen2 2 4 15 Operaciones en una matriz # Dividir toda la matriz entre 2.\nx / 2 # Condicion1 Condicion2 Condicion3 # Gen1 0.5 1.5 5.0 # Gen2 1.0 2.0 7.5 Elevar a la 2:\nx ** 3 # Condicion1 Condicion2 Condicion3 # Gen1 1 27 1000 # Gen2 8 64 3375 Transponer o invertir la matriz # Usando la funcion t(). Se puede emplear en un dataframe tambien.\nt(x) # Gen1 Gen2 # Condicion1 1 2 # Condicion2 3 4 # Condicion3 10 15 Agregar información en la matriz (por columnas) # # matriz 1 matriz1 \u0026lt;- matrix(c(\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;cherry\u0026#34;, \u0026#34;orange\u0026#34;,\u0026#34;grape\u0026#34;, \u0026#34;pineapple\u0026#34;, \u0026#34;pear\u0026#34;, \u0026#34;melon\u0026#34;, \u0026#34;fig\u0026#34;), nrow = 3, ncol = 3) # matriz 2 matriz2 \u0026lt;- matrix(c(\u0026#34;strawberry\u0026#34;, \u0026#34;blueberry\u0026#34;, \u0026#34;raspberry\u0026#34;), nrow = 3, ncol = 1) # Juntar matrices newmatrix \u0026lt;- cbind(matriz1, matriz2) newmatrix # [,1] [,2] [,3] [,4] # [1,] \u0026#34;apple\u0026#34; \u0026#34;orange\u0026#34; \u0026#34;pear\u0026#34; \u0026#34;strawberry\u0026#34; # [2,] \u0026#34;banana\u0026#34; \u0026#34;grape\u0026#34; \u0026#34;melon\u0026#34; \u0026#34;blueberry\u0026#34; # [3,] \u0026#34;cherry\u0026#34; \u0026#34;pineapple\u0026#34; \u0026#34;fig\u0026#34; \u0026#34;raspberry\u0026#34; NOTA: cbind() nos permite unir por columnas las dos matrices, respetando que ambas tienen 3 filas.\nAgregar información en la matriz (por filas) # # Crear una nueva matriz mientras juntamos a la matriz 1 newmatrix \u0026lt;- rbind(matriz1, c(\u0026#34;strawberry\u0026#34;, \u0026#34;blueberry\u0026#34;, \u0026#34;raspberry\u0026#34;)) newmatrix # [,1] [,2] [,3] # [1,] \u0026#34;apple\u0026#34; \u0026#34;orange\u0026#34; \u0026#34;pear\u0026#34; # [2,] \u0026#34;banana\u0026#34; \u0026#34;grape\u0026#34; \u0026#34;melon\u0026#34; # [3,] \u0026#34;cherry\u0026#34; \u0026#34;pineapple\u0026#34; \u0026#34;fig\u0026#34; # [4,] \u0026#34;strawberry\u0026#34; \u0026#34;blueberry\u0026#34; \u0026#34;raspberry\u0026#34; NOTA: rbind() nos permite unir por filas respetando que tenemos 3 elementos por fila.\nExtraer datos en una matriz # Para un solo elemento, visualizacion tipo matriz\n# Opcion A newmatrix == \u0026#34;apple\u0026#34; # [,1] [,2] [,3] # [1,] TRUE FALSE FALSE # [2,] FALSE FALSE FALSE # [3,] FALSE FALSE FALSE # [4,] FALSE FALSE FALSE Para un solo elemento, visualizacion tipo vector\n# Opcion B newmatrix %in% \u0026#34;apple\u0026#34; # [1] TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE Extraer datos en una matriz # Para multiples elementos, visualizacion tipo matriz\n# Opcion A newmatrix == c(\u0026#34;apple\u0026#34;, \u0026#34;melon\u0026#34;) # [,1] [,2] [,3] # [1,] TRUE FALSE FALSE # [2,] FALSE FALSE TRUE # [3,] FALSE FALSE FALSE # [4,] FALSE FALSE FALSE Para multiples elementos, visualizacion tipo vector\n# Opcion B newmatrix %in% c(\u0026#34;apple\u0026#34;, \u0026#34;melon\u0026#34;) # [1] TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE Crear una lista (list) # Primero veamos como se declara una lista y su estructura:\n# Declarar una lista, cada elemento esta separado por una coma mylist \u0026lt;- list(\u0026#34;8\u0026#34;, c(1,2,3)) mylist # [[1]] # [1] \u0026#34;8\u0026#34; # # [[2]] # [1] 1 2 3 Estructura de la lista\nstr(mylist) # List of 2 # $ : chr \u0026#34;8\u0026#34; # $ : num [1:3] 1 2 3 Una lista puede contener vectores y matrices dentro:\nmyvector \u0026lt;- 1:10 mymatrix \u0026lt;- matrix(1:4, nrow = 2) mydf \u0026lt;- data.frame(\u0026#34;num\u0026#34; = 1:3, \u0026#34;let\u0026#34; = c(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;)) Guardamos todo en la lista:\nmylist \u0026lt;- list( \u0026#34;vector\u0026#34; = myvector, \u0026#34;matriz\u0026#34; = mymatrix, \u0026#34;dataframe\u0026#34; = mydf ) str(mylist) # List of 3 # $ vector : int [1:10] 1 2 3 4 5 6 7 8 9 10 # $ matriz : int [1:2, 1:2] 1 2 3 4 # $ dataframe:\u0026#39;data.frame\u0026#39;: 3 obs. of 2 variables: # ..$ num: int [1:3] 1 2 3 # ..$ let: chr [1:3] \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34; Propiedades de una lista\nEl largo de una lista es igual al número de elementos que contiene, sin importar de qué tipo o clase sean.\nlength(mylist) # [1] 3 Dado que una lista siempre tiene una sola dimensión, la función dim() nos devuelve NULL.\ndim(mylist) # NULL Las listas tienen clase list, sin importar qué elementos contienen.\nclass(mylist) # [1] \u0026#34;list\u0026#34; Extraer elementos de una lista # Para una lista, puede utilizar corchetes simples [ ] o corchetes dobles [[ ]], dependiendo de lo que desee extraer.\nmylist \u0026lt;- list(myvector, mymatrix, mydf) mylist # [[1]] # [1] 1 2 3 4 5 6 7 8 9 10 # # [[2]] # [,1] [,2] # [1,] 1 3 # [2,] 2 4 # # [[3]] # num let # 1 1 a # 2 2 b # 3 3 c Elementos en esta lista, las sublistas:\n[[1]] - Vector (myvector)\n[[2]] - Matriz (mymatrix)\n[[3]] - dataframe (mydf)\nPodemos utilizar [ ] para extraer una sublista que sólo contenga, por ejemplo, el primer elemento, que es el vector\nmylist[1] # [[1]] # [1] 1 2 3 4 5 6 7 8 9 10 Tambien podemos utilizar [[ ]] para extraer un único elemento, que tendrá la clase de ese elemento.\nmylist[[1]] # [1] 1 2 3 4 5 6 7 8 9 10 En este caso para obtener el primer elemento de esta sublista, emplearemos lo visto en la clase anterior sobre dataframe.\nmylist[[1]][1] # [1] 1 Asignar nombres a cada sublista\nnames(mylist) = c(\u0026#34;vector\u0026#34;, \u0026#34;matriz\u0026#34;, \u0026#34;dataframe\u0026#34;) Para obtener una sublista, podemos emplear lo visto para dataframe, empleando el nombre de la sublista.\nmylist$vector # [1] 1 2 3 4 5 6 7 8 9 10 O puedes usar:\nmylist[[\u0026#34;vector\u0026#34;]] # [1] 1 2 3 4 5 6 7 8 9 10 Entonces para obtener el primer elemento de la sublista vector puedo hacerlo de la siguiente manera:\n# Opcion A mylist[[1]][1] # [1] 1 # Opcion B mylist$vector[1] # [1] 1 # Opcion C mylist[[\u0026#34;vector\u0026#34;]][1] # [1] 1 Otra forma de extraer elementos de una lista # Extraer el 3er elemento de la primera sublista.\n# Opcion A mylist[[1]][3] # [1] 3 # Opcion B mylist[[c(1, 3)]] # [1] 3 NOTA: Dentro del c(), primero colocamos la sublista y luego el elemento. c(sublista, elemento).\nExtraer multiples sublistas # Si queremos las dos primeras sublistas, usaremos [] para seleccionarlas\n# Opcion A mylist[c(1, 2)] # $vector # [1] 1 2 3 4 5 6 7 8 9 10 # # $matriz # [,1] [,2] # [1,] 1 3 # [2,] 2 4 # Opcion B mylist[c(\u0026#34;vector\u0026#34;, \u0026#34;matriz\u0026#34;)] # $vector # [1] 1 2 3 4 5 6 7 8 9 10 # # $matriz # [,1] [,2] # [1,] 1 3 # [2,] 2 4 NOTA: Son [] simples para llamar sublistas y [[]] para nombrar a los elementos de las sublistas.\nOperaciones en una lista # Podemos realizar operaciones si especificamos a que elemento de la lista queremos ejecutarle alguna operacion.\nmylist[[1]] * 2 # [1] 2 4 6 8 10 12 14 16 18 20 NOTA: No olvides los [[]] para indicar los elementos contenidos en la lista.\nFiltrar algunos elementos # Podemos emplear nuestros conocimientos previos para buscar elementos en una sublista:\n# Ejemplo 1 mylist$matriz[mylist$matriz == 2] # [1] 2 # Ejemplo 2 mylist$dataframe[mylist$dataframe == \u0026#34;a\u0026#34;] # [1] \u0026#34;a\u0026#34; Sustituir un elemento # mylist$matriz[1] \u0026lt;- 5 mylist$matriz # [,1] [,2] # [1,] 5 3 # [2,] 2 4 Eliminar una sublista # Para eliminar una sublista debemos darle el valor de NULL. En este caso eliminaremos el primera sublista (elemento) que es el vector.\nmylist[[1]] = NULL mylist # $matriz # [,1] [,2] # [1,] 5 3 # [2,] 2 4 # # $dataframe # num let # 1 1 a # 2 2 b # 3 3 c Agregar una nueva sublista # Para agregar una sublista usaremos $.\nmylist$occupation \u0026lt;- \u0026#34;Analista de datos\u0026#34; mylist # $matriz # [,1] [,2] # [1,] 5 3 # [2,] 2 4 # # $dataframe # num let # 1 1 a # 2 2 b # 3 3 c # # $occupation # [1] \u0026#34;Analista de datos\u0026#34; Agregar una lista existente # frutas \u0026lt;- list( c(\u0026#34;manzana\u0026#34;, \u0026#34;pera\u0026#34;, \u0026#34;uva\u0026#34;)) mylist \u0026lt;- c(mylist, \u0026#34;frutas\u0026#34; = frutas) mylist # $matriz # [,1] [,2] # [1,] 5 3 # [2,] 2 4 # # $dataframe # num let # 1 1 a # 2 2 b # 3 3 c # # $occupation # [1] \u0026#34;Analista de datos\u0026#34; # # $frutas # [1] \u0026#34;manzana\u0026#34; \u0026#34;pera\u0026#34; \u0026#34;uva\u0026#34; Usar append() # Sirve para agregar elementos a una lista. Toma tres argumentos: la lista original, los elementos a añadir y la posición en la vamos a añadirlos.\nappend(mylist, #lista original list(c(\u0026#34;azul\u0026#34;, \u0026#34;rojo\u0026#34;, \u0026#34;verde\u0026#34;, \u0026#34;negro\u0026#34;)), #elementos por agregar en formato de lista after = 2 # Posicion ) # $matriz # [,1] [,2] # [1,] 5 3 # [2,] 2 4 # # $dataframe # num let # 1 1 a # 2 2 b # 3 3 c # # [[3]] # [1] \u0026#34;azul\u0026#34; \u0026#34;rojo\u0026#34; \u0026#34;verde\u0026#34; \u0026#34;negro\u0026#34; # # $occupation # [1] \u0026#34;Analista de datos\u0026#34; # # $frutas # [1] \u0026#34;manzana\u0026#34; \u0026#34;pera\u0026#34; \u0026#34;uva\u0026#34; Ejercicios # Crea una lista con los nombres de los amigos, Rosita, Rachel y Joey. La lista debe llamarse friends. NOTA: Cada amigo es una sublista.\nAgrega a la lista el nombre de Carlos, despues de Rachel. Empleando la funcion append()\nAgrega a los amigos Monica y Carmen, al final de la lista. Emplea c().\nElimina a Carlos de la lista de friends.\nRespuestas Fuentes (Viernes 3): EveliaCoss/ViernesBioinfo2024 Viernes de Bioinformatica en el LIIGH, 2 febrero - 2 de agosto 2024 HTML 22 2 ","date":"16 febrero 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-3/","section":"Publicaciones","summary":"Matrices y Listas.","title":"Manipulación de datos con R base (matrix y lista)","type":"posts"},{"content":"Vector y dataframe.\nPaquetes Necesarios # install.packages(\u0026#34;rmarkdown\u0026#34;) install.packages(\u0026#34;dplyr\u0026#34;) install.packages(\u0026#34;reshape2\u0026#34;) install.packages(\u0026#34;remotes\u0026#34;) Estructura de Datos/Tipos de Datos # Existen 5 estructuras de datos en R # Las estructuras de datos son objetos que contienen datos. Cuando trabajamos con R, lo que estamos haciendo es manipular estas estructuras.\nTIpo Declaracion de la variable Conversion Dimensiones Contenido Vector c(), seq(), rep(), valorI:valorN; seq_len() as.vector() 1 homogenea Lists list() as.list() 1* homogenea Matrix matrix(valores, nrow = x, ncol = y) as.matrix() 2 heterogenea Dataframe data.frame() as.dataframe() 2 heterogenea Tambien estan los array pero son poco usados en R.\nPara conocer la estructura del archivo debes usar str().\nUna lista puede contener matrices en su interior, vectores, funciones, etc.\nClases Declaración de la variable Conversión de formato Reglas numeric numeric() as.numeric() FALSE -\u0026gt; 0, TRUE -\u0026gt; 1; \u0026ldquo;1\u0026rdquo;, \u0026ldquo;2\u0026rdquo;, \u0026hellip; -\u0026gt; 1,2, \u0026hellip;; \u0026ldquo;A\u0026rdquo; -\u0026gt; NA integer integer() as.integer() FALSE -\u0026gt; 0, TRUE -\u0026gt; 1; \u0026ldquo;1\u0026rdquo;, \u0026ldquo;2\u0026rdquo;, \u0026hellip; -\u0026gt; 1,2, \u0026hellip;; \u0026ldquo;A\u0026rdquo; -\u0026gt; NA double double() as.double() character character() as.character() 1,2, \u0026hellip; -\u0026gt; \u0026ldquo;1\u0026rdquo;, \u0026ldquo;2\u0026rdquo;, \u0026hellip;; FALSE -\u0026gt; \u0026ldquo;FALSE\u0026rdquo;; TRUE -\u0026gt; \u0026ldquo;TRUE\u0026rdquo; logical logical() as.logical() 0 -\u0026gt; FALSE, other numbers -\u0026gt; TRUE; (\u0026ldquo;FALSE\u0026rdquo;, \u0026ldquo;F\u0026rdquo;) -\u0026gt; FALSE; (\u0026ldquo;TRUE\u0026rdquo;, \u0026ldquo;T\u0026rdquo;) -\u0026gt; TRUE, other character -\u0026gt; NA factor factor() as.factor() Si queremos saber la clase de la variable debemos usar class(), aunque tambien str() te dice esta información.\nNOTA: as.integer() convierte los numeros a enteros. Ejemplo: as.integer(2.5) = 2. En cambio, as.double() permite que los numeros contengan decimales.\nRecordatorio: Operadores # Aritméticos Comparación Argumentos lógicos (Logical Operators) + Adición / suma \u0026lt; Menor que !x - Not x (logical NOT) - Sustracción / resta \u0026gt; Mayor que x \u0026amp; y OR x AND y - (logical AND) * Multiplicación \u0026lt;= Menor o igual que x \u0026amp;\u0026amp; y - identico / OR %% División \u0026gt;= Mayor o igual que xor(x,y) Funcion OR ^ OR ** Exponencial == Igual a %in% pertenece a %/% División integral != Diferente de Otra forma de escrir OR es x | y OR x || y.\nJerarquía de operaciones # En R, al igual que en matemáticas, las operaciones tienen un orden de evaluación definido.\nCuanto tenemos varias operaciones ocurriendo al mismo tiempo, en realidad, algunas de ellas son realizadas antes que otras y el resultado de ellas dependerá de este orden.\nOrden Operadores 1 ^ 2 * / 3 + - 4 \u0026lt; \u0026gt; \u0026lt;= \u0026gt;= == != 5 ! 6 \u0026amp; 7 OR Manipulación de datos con R base (vector y dataframe) # Vector: Formas de declarar un vector # # Declarar el vector con 5 posiciones (del 1 al 5) # Opcion A - c() x \u0026lt;- c(1,2,3,4,5) # Opcion B - valorI:valorN x \u0026lt;- 1:5 x # Opcion C - seq(inicio, final) x \u0026lt;- seq(1,5) x # Opcion D -seq_len(final) x \u0026lt;- seq_len(5) x \\# Opcion E - rep(valor, veces) y \u0026lt;- c(rep(1,5), rep(c(3,5),5)) y Vector: Estructura y clases de variables # Conocer la estructura de un vector mediante la función str(). El vector es de tipo integer y va de 1 a 5.\nstr(x) Para solo ver el tipo usamos la función class()\nclass(x) Ejercicios # x \u0026lt;- c(TRUE, TRUE, FALSE, FALSE) x x \u0026lt;- as.factor(x) Vamos a crear un nuevo vector con los nombres de los participantes a esta clase\nClaseBioinfo \u0026lt;- c(\u0026#34;Jose Luis\u0026#34;, \u0026#34;Diego\u0026#34;, \u0026#34;Rosita\u0026#34;, \u0026#34;Yuri\u0026#34;, \u0026#34;Ulises\u0026#34;, \u0026#34;Tere\u0026#34;, \u0026#34;Chucho\u0026#34;) ClaseBioinfo #ver estructura str(ClaseBioinfo) Extraer información\nClaseBioinfo ==\u0026#34;Ulises\u0026#34; ClaseBioinfo ==\u0026#34;Chucho\u0026#34; Cuando son mas de un valor usamos %in%\nClaseBioinfo %in% c(\u0026#34;Ulises\u0026#34;, \u0026#34;Chucho\u0026#34;) Ahora tambien podemos usar:\nClaseBioinfo == c(\u0026#34;Ulises\u0026#34;, \u0026#34;Chucho\u0026#34;) Podemos declarar un vector de los tratamientos\n#Opcion A y \u0026lt;- rep(c(\u0026#34;Control\u0026#34;, \u0026#34;Condicion\u0026#34;),5) #Opcion B y \u0026lt;- c(rep(\u0026#34;Control\u0026#34;,5), rep(\u0026#34;Condicion\u0026#34;,5)) y Dataframe # Dataframe: Formas de declarar un vector # x \u0026lt;- 1:4 n \u0026lt;- 10 M \u0026lt;- c(10, 35) y \u0026lt;- 2:4 Podemos declarar los componentes de un Dataframe en variables separadas y luego juntarlo o en una sola linea.\nx \u0026lt;- 1:4; n \u0026lt;- 10; M \u0026lt;- c(10, 35); y \u0026lt;- 2:4 Vamos a crear dataframes apartir de estos vectores.\ndata.frame(x,n) data.frame(x, M) Dataframe en una sola linea # data.frame(x = 1:4, n = 10) data.frame(x = 1:4, M = c(10,35)) Dataframe: Ejercicio # data.frame(x, y) NOTA: El número de filas y columnas debe ser el mismo número. Existen excepciones al usar paquetes como dplyr.\nDataframe: Estructura y clases de variables # Cada columna es una variable la cual puede ser de un tipo o clase.\ndf \u0026lt;- data.frame(genes = paste0(\u0026#34;Gen\u0026#34;, seq_len(8)), expression = c(3.8, 5.5, 6.3, 1.8, 9, rep(3,3)), treatment =c(rep(\u0026#34;Control\u0026#34;, 4), rep(\u0026#34;Condicion1\u0026#34;,4))) head(df) Es un dataframe con 3 variables(genes, expression y treatment) y cada uno tiene su propia clase.\nstr(df) Dataframe con los datos de la clase # Vamos a crear un nuevo vector con las edades, llamado edad, posteriormente, vamos a combinarlo con el vector que creamos previamente ClaseBioinfo\n# declarar un vector e incorporarlo en el dataframe edad \u0026lt;- c(31,32, 30, 30, 28, 32, 29) # Almacenar el dataframe ClaseBioinfo \u0026lt;- data.frame(ClaseBioinfo, edad) ClaseBioinfo Agregar una columna en el dataframe # Tambien podemos agregar nuevas columnas usando el simbolo $ de la siguiente manera:\nClaseBioinfo$formacion \u0026lt;- c(\u0026#34;medicina\u0026#34;, \u0026#34;nutricion\u0026#34;, \u0026#34;medicina\u0026#34;, \u0026#34;biologia\u0026#34;, \u0026#34;medicina\u0026#34;, \u0026#34;medicina\u0026#34;, \u0026#34;biologia\u0026#34;) head(ClaseBioinfo,3) El dataframe tiene 7 filas y 3 columnas.\nstr(ClaseBioinfo) Dataframe, completando espacios faltantes # Cuando creamos la columna formacion en el dataframe al contener 9 elementos el dataframe, R repite 3 veces los valores contenidos en la columna formacion para llenar los 9 espacios.\nClaseBioinfo \u0026lt;- c(\u0026#34;Jose Luis\u0026#34;, \u0026#34;Diego\u0026#34;, \u0026#34;Rosita\u0026#34;, \u0026#34;Yuri\u0026#34;, \u0026#34;Ulises\u0026#34;, \u0026#34;Tere\u0026#34;, \u0026#34;Chucho\u0026#34;, \u0026#34;Evelia\u0026#34;, \u0026#34;Fulanito\u0026#34;) edad \u0026lt;-c(31,32, 30, 30, 28, 32, 29,29,30) ClaseBioinfo \u0026lt;- data.frame(ClaseBioinfo, edad) # crear dataframe ClaseBioinfo$formacion \u0026lt;- c(\u0026#34;medicina\u0026#34;, \u0026#34;nutricion\u0026#34;, \u0026#34;medicina\u0026#34;) head(ClaseBioinfo, 3) Ejercicios: # A partir del siguiente ejemplo, completa los siguientes ejercicios:\ndf \u0026lt;- data.frame(genes = paste0(\u0026#34;Gen\u0026#34;, seq_len(8)), expression = c(3.8, 5.5, 6.3, 1.8, 9, rep(3,3)), treatment =c(rep(\u0026#34;Control\u0026#34;, 4), rep(\u0026#34;Condicion1\u0026#34;,4))) Convierte la columna 3 perteneciente a tratamiento (treatment) a factor. NOTA: En este ejemplo, solo tenemos dos condiciones \u0026ldquo;Control\u0026rdquo; y \u0026ldquo;Condicion1\u0026rdquo;. Por lo que, solo deben hacer dos niveles (levels).\nRenombra las filas con los nombres de los genes y elimina la columna 1. NOTA: Recuerda que para renombrar las filas es rownames() y las columnas se usa colnames().\nRespuestas # Modifica la columna 3 perteneciente a tratamiento (treatment) a factor. df$treatment \u0026lt;- as.factor(df$treatment) # conversion a factor str(df) NOTA: El signo de dinero $ nos permite seleccionar una columna (variable) de un dataframe.\nRenombra las filas con los nombres de los genes y elimina la columna 1. rownames(df) \u0026lt;- df$genes # renombrar df \u0026lt;- df[,-1] # eliminar columna 1 Index # Por medio de un index podemos:\n1) Obtener la información de un dato en específico. 2) Modificar un dato en específico. 3) Eliminarlo un dato en específico. Podemos hacer la pregunta de dos maneras, 1) ¿Cuál es el nivel de expresión del Gen2? O 2) ¿Que gen contiene una expresión de 5.5?\nEjercicios # ¿Cuál es el nivel de expresión del Gen2? NOTA: Recuerda que un dataframe tiene dos dimensiones 1) fila y 2) columna, dataframe[fila, columna]. Estos nos ayudaran como coordenadas en el dataframe.\n# Opcion A df[2,1] # [1] 5.5 # Opcion B df$expression[2] # [1] 5.5 # Opcion C df[\u0026#34;Gen2\u0026#34;,] # expression treatment # Gen2 5.5 Control df[\u0026#34;Gen2\u0026#34;,1] # [1] 5.5 # Opcion D df[\u0026#34;Gen2\u0026#34;,\u0026#34;expression\u0026#34;] # [1] 5.5 ¿Que gen contiene una expresión de 1.8? # Opcion A df[df[, \u0026#34;expression\u0026#34;] == 1.8,] # expression treatment # Gen4 1.8 Control df[df[, 1] == 1.8,] # expression treatment # Gen4 1.8 Control # Opcion B df[df == 1.8,] # expression treatment # Gen4 1.8 Control # Opcion C df[df$expression == 1.8,] # expression treatment # Gen4 1.8 Control # Opcion D subset(df, expression == 1.8) # expression treatment # Gen4 1.8 Control Index usando un vector # Podemos crear una variable i que será nuestro index para extraer valores\nx \u0026lt;- 1:5 i \u0026lt;- c(1, 3) # el index es numero y nos permite extraer la posicion 1 y 3 del vector x[i] Usar el vector i para obtener las filas 1 y 3\ndf[i,] # expression treatment # Gen1 3.8 Control # Gen3 6.3 Control NOTA: Recuerda que una matriz esta compuesta de filas y columnas.\nEjercicio 1 - Vector # # Declarar el vector con 5 posiciones (del 1 al 5) x \u0026lt;- 1:5 x # Observar el componente / posicion 3 x[3] # Observar multiles posiciones x[c(1,3)] x[c(1:3,5)] # OR x[-4] # Sustituir el valor de la posicion 3 x[3] \u0026lt;- 20 x # Eliminar la posicion 1 x[-1] Ejercicio 2 - Matriz # # Genera una matriz de tamano 2 x 3 (filas, columnas) (rows, columns) x \u0026lt;- matrix(1:6, 2, 3) x # # Sustituir los valores presentes en la columna 3 de la matriz x[, 3] \u0026lt;- 21:22 x # Visualizacion en modo de matriz x[, 3, drop = FALSE] # Eliminar la columna 1 x[, -1] # Eliminar multiples columnas y Visualizacion en modo de matriz x[, -(1:2), drop = FALSE] # es lo mismo que x[, 3, drop = FALSE] Ejercicio 3 - Lista # # Opcion A n=c(2, 3, 5) s=c(\u0026#34;aa\u0026#34;, \u0026#34;bb\u0026#34;, \u0026#34;cc\u0026#34;, \u0026#34;dd\u0026#34;, \u0026#34;ee\u0026#34;) x=list(n, s, 3) x # Opcion B x \u0026lt;- list(c(2, 3, 5), c(\u0026#34;aa\u0026#34;, \u0026#34;bb\u0026#34;, \u0026#34;cc\u0026#34;, \u0026#34;dd\u0026#34;, \u0026#34;ee\u0026#34;), 3) x Ejercicio 4 - Acceder a los elementos de la lista # x[2] # 2do elemento, los datos con titulo x[[2]] # 2do elemento, solo los datos x[c(2, 3)] # 2ndo y 3er elemento Acceder a un dato de un elemento\nx[[c(2, 3)]] # dato 3 del elemento 2 Ejercicio 5 - Operaciones # # Ejercicio 1 x \u0026lt;- 1:10 # Declarar un vector x[x \u0026gt;= 5] \u0026lt;- 20 # todos los numeros que sean mayor o igual a 5 sustituir por 20 x # A partir del resultado de x realiza lo siguiente x[x == 1] \u0026lt;- 25 # todos los numeros que sean igual a 1 sustituir por 25 x # Ejercicio 2 x \u0026lt;- matrix(1:20, 4, 5) #Genera una matriz de tamano 4 x 5 (filas, columnas) (rows, columns) x # Visualizar la matriz # A partir de la matriz generada realiza lo siguiente x[, 5] \u0026lt;- 51:54 # 1. ¿Qué cambios existieron en la matriz? x # Visualizar la matriz de salida # 2. ¿Cuáles son los valores presentes en la columna 3 de la matriz? x[, 5] #3. ¿Como cambia el valor de salida cuando coloco drop= FALSE? x[, 5, drop = FALSE] Ejercicio 6 - Operaciones # # Ejercicio 3. # 1. ¿Como cambia el valor de salida al eliminar la columna 3? x \u0026lt;- matrix(1:16, 4, 4) #Genera una matriz de tamano 4 x 5 (filas, columnas) (rows, columns) x[, -1] # 2. ¿Como cambia el valor de salida cuando coloco drop= FALSE? x[, -(1:2), drop = FALSE] # 3. Renombra las filas y columnas empleando rownames() y colnames(). En fila coloca los nombres: Gen 1, Gen 2, Gen 3 y Gen 4. Y en columnas coloca los nombres: SRA_1,SRA_2 Y SRA_3 # Ejercicio 4. Realiza las siguientes operaciones # 1. Sumatoria x \u0026lt;- 1:4 y \u0026lt;- 1:2 z \u0026lt;- x + y z # 2. Multiplicacion x \u0026lt;- 1:4 a \u0026lt;- 10 z \u0026lt;- a * x z Fuentes (Viernes 2): EveliaCoss/ViernesBioinfo2024 Viernes de Bioinformatica en el LIIGH, 2 febrero - 2 de agosto 2024 HTML 22 2 ","date":"9 febrero 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-2/","section":"Publicaciones","summary":"Vector y dataframe.","title":" Manipulación de datos con R base (vector y dataframe)","type":"posts"},{"content":"RStudio es un entorno de desarrollo integrado (IDE) para R. Un IDE es una aplicación que ayuda a los programadores a desarrollar código de una manera eficiente. Nos proporciona una interfaz para poder editar código fuente, herramientas de ambiente, visualización, terminal y consola.\nRStudio Desktop es una aplicación que se utiliza ampliamente para desarrollar programas en R, pero también podemos accesar al IDE de RStudio a través con RStudio Server, a través de un navegador web.\n¿Cómo descargamos RStudio? # Podemos descargar RStudio desde esta página. Ya realizamos el paso 1: Install R.\nEn el paso 2: Install R studio, nos debería detectar el sistema operativo, descarguemos la versión recomendada en el botón azul y sigamos las instrucciones de instalación.\nPartes de Rstudio # Cambiando el Aspecto de Rstudio # Podemos cambiar la forma en que se ve la aplicación desde Editar \u0026gt; Preferencias \u0026gt; Apariencia, escogemos el tema que nos guste y damos click en Aplicar y luego OK\nComenzando con R y RStudio: 1. R Project # Al comenzar a trabajar con R y RStudio, ya sea para crear un programa para un proyecto, crear una aplicación, presentación, blog, paquete, etc, es recomendado crear un R project.\nAl crear un R project, se creará un folder en donde estarán todos los documentos, fotos, scripts, etc. que usaremos en ese projecto. Es una forma organizada y práctica de trabajar con R.\n¿Cómo iniciamos un R project? # Vayamos en la parte superior al menú Archivos \u0026gt; Nuevo Proyecto.\nSeleccionamos la opción de Nuevo Directorio\nSeleccionamos el tipo de projecto que vamos a iniciar, en nuestro caso Nuevo Proyecto.\nNombramos el folder que creamos y seleccionamos en donde queremos que se almacene.\n¡Felicidades, acabas de crear un R project! Si vamos al folder en donde creamos nuestro proyecto, podemos observar que se creó un archivo con terminación Rproj, este es un archivo que contiene la configuración específica para nuestro proyecto.\nEste archivo también establece como directorio de trabajo el folder en donde iniciamos el proyecto (puedes comprobarlo desde la consola de RStudio, escribiendo el comando getwd()). Esto es muy conveniente puesto que así podemos asegurarnos de que vamos a acceder a los archivos que estén exclusivamente en nuestro entorno de trabajo.\ngetwd() Cambiar directorio de trabajo\nsetwd(\u0026#34;/Users/sofiasalazar/nuevodirectorio\u0026#34;) # Mac y Linux, iOS, ejemplo de Sofi setwd(\u0026#34;C:/Users/ecoss/OneDrive - CINVESTAV/Documentos/Posdoc_LIIGH/Clases_Cursos_Medicina_Guadalajara2023\u0026#34;) # Windows Comenzando con nuestro proyecto: Crear un Rscript # Para comenzar a trabajar en un proyecto, necesitamos crear un archivo para escribir nuestro programa. Entra en Archivo \u0026gt; Nuevo Archivo.\nPodemos ver que tenemos distintas opciones de archivos que podemos crear, en este caso vamos a crear nuestro primer Rscript.\nCrear Un Script # ¿Qué es un Rscript? Es simplemente un archivo de texto con las instrucciones de nuestro algoritmo escritas en el lenguaje de R. También contiene nuestros comentarios escritos con #.\nIntenta escribir tu primer Rscript en el editor, copiando el siguiente algoritmo para realizar una suma:\na \u0026lt;- 2 b \u0026lt;- 3 suma = a + b suma Selecciona todo el código, después ve a la parte superior de la ventana del editor y da click en el botón Run. Enseguida de esto, en la consola se ejecutará tu código y podrás ver el siguiente resultado:\nTambién pueden ejecutar tu código línea por línea, poniendo tu cursor al principio o al final de la linea y presionando las teclas Control + Enter o Command + Enter. Meme super importante R session # Al momento de comenzar a ejecutar líneas de código, guardar valores en variables y cargar librerías, estaremos guardando esto en nuestra \u0026ldquo;sesión de R\u0026rdquo;. Esto es un \u0026ldquo;ambiente\u0026rdquo; que puedes guardar al finalizar de trabajar y lo que guardaste lo puedes cargar a Rstudio la próxima vez que vayas a continuar trabajando.\nPara guardar tu sesión de R:\nsave.image(file = \u0026#34;/una/direccion/enTu/PC/sesionR_miPrograma.RData\u0026#34;) Para cargar tu sesión de R:\nload(file = \u0026#34;/una/direccion/enTu/PC/sesionR_miPrograma.RData\u0026#34;) También puedes guardar y cargar solo alguna variable:\nsave(variable, file = \u0026#34;/una/direccion/enTu/PC/variable.RData\u0026#34;) load(\u0026#34;/una/direccion/enTu/PC/variable.RData\u0026#34;) # ahora \u0026#34;variable\u0026#34; estara en tu ambiente Buenas practicas # Buenas prácticas de programación: Set up de tu trabajo Es buena idea comenzar todos tus scripts con las mismas líneas de código que indiquen lo siguiente:\nTítulo de tu programa Autor (author): Su nombre Fecha (date): Fecha de creación Propósito general de tu programa (Description): ¿Para qué sirve el programa? Ej: El siguiente programa realiza la suma de dos numeros enteros a partir de la entrada del usuario y posteriormente la imprime en pantalla. Usage ¿Cómo se utiliza? Paquetes (packages) Directorio de trabajo (Working directory): En que carpeta se encuentra tu datos y programa. Directorio de input: aquí estan guardados los datos que vas a usar en el programa Directorio de output: aquí es donde vas a guardar tus resultados Argumentos (Arguments) Información de entrada (Data Inputs): Ej: Solo numeros enteros (sin decimales). Información de salida (Outpus): Graficas, figuras, tablas, etc. Líneas en donde cargues los datos que vas a usar Meme super importante 2 Buenas prácticas de programación: Set up de tu trabajo # # Mi programa # Tu nombre # Fecha: dd-mm-aaaa # Este script ejecuta xxx utilizando como input xxx y dando como output xxx # Input dir indir \u0026lt;- \u0026#34;/Users/sofiasalazar/miPrograma/input/\u0026#34; # Output dir outdir \u0026lt;- \u0026#34;/Users/sofiasalazar/miPrograma/output/\u0026#34; # Librerias library(ggplot2) library(tidyverse) # Cargar input datos_file \u0026lt;- paste0(indir,\u0026#34;misDatos.csv\u0026#34;) datos_file datos \u0026lt;- read.csv(datos_file) load(file = paste0(indir, \u0026#34;variable.RData\u0026#34;)) load(file = paste0(indir, \u0026#34;sesionR_miPrograma.RData\u0026#34;)) ¿Qué es una librería? # En programación, una librería es una colección de código pre-escrito. Una librería contiene una \u0026ldquo;paquete\u0026rdquo; o \u0026ldquo;librería\u0026rdquo; de funciones que podemos utilizar si descargamos e importamos esa librería a nuestro programa.\nComo mencioné anteriormente, al descargar R, también descargamos una serie de librerías, llamadas base R packages. Sin embargo, dependiendo del problema que queramos resolver con nuestro programa, necesitaremos librerías que nos permitan hacer otras cosas.\nExisten distintas formas de instalar librerías.\nInstalar librerías: CRAN # Instalación desde el repositorio de CRAN: podemos descargar paqueterías de CRAN de dos formas: La primera, desde consola con el siguiente comando:\ninstall.packages(\u0026#34;ggplot2\u0026#34;) La segunda, desde el menú Herramientas \u0026gt; Instalar paqueterías. En la ventana, ingresamos el nombre de la librería y click en Instalar.\n###Instalar librerías: Bioconductor\nAlternativamente, podemos instalar paqueterías de Bioconductor, que es otro repositorio de paquetes diseñados para el análisis de datos genómicos, por ejemplo para hacer análisis estadísticos, anotación, acceso a bases de datos públicas, etc.\nHay muchas librerías que están tanto en CRAN como en Bioconductor, pero también hay librerías específicas para uno de ellos. Para poder instalar desde bioconductor, necesitamos primero instalar el \u0026ldquo;instalador de bioconductor\u0026rdquo;:\ninstall.packages(\u0026#34;BiocManager\u0026#34;) # Esto es necesario solo 1 vez Después, instalamos la librería que queremos y la cargamos:\nBiocManager::install(\u0026#34;DESeq2\u0026#34;) library(DESeq2) Puedes ver librerías y sus manuales en la página de Bioconductor o cuando ingresamos en consola:\nbrowseVignettes(\u0026#34;DESeq2\u0026#34;) Instalar librerías: Source # Podemos instalar librerías si tienes los archivos en tu PC, esto es útil cuando no tienes acceso a internet.\ninstall.packages(\u0026#34;~/Downloads/ggplot2_1.0.1.tar.gz\u0026#34;, type=\u0026#34;source\u0026#34;, repos=NULL) O desde GitHub:\ninstall.packages(\u0026#34;remotes\u0026#34;)# instalar el paquete remotes remotes::install_github(\u0026#34;mitchelloharawild/icons\u0026#34;) Cuando hay funciones que tienen el mismo nombre en varios paquetes, lo mejor es que le digas a R de que paquete viene esa función mediante los ::. Ejemplo: dplyr::select()\n¿Cómo podemos verificar que paquetes tenemos? # En la ventana inferior derecha, existe una pestaña que se llama \u0026ldquo;Packages\u0026rdquo; que contendra la lista de paquetes instalados en tu computadora, su descripción corta y su versión.\nTambien en esta pestaña podemos instalar paquetes dandado click en INSTALL.\nEliminación de paquetes # En algunas ocasiones vamos a tener que actualizar las versiones de los paquetes, pero primero dedes eliminar la versión anterior. Dando click en el botón que contiene una X que esta al final de la fila en cada programa.\nTambién puedes usar codigo para eliminar el paquete:\nremove.packages(\u0026#34;package-to-remove\u0026#34;) Cargar paquetes en el ambiente de R # Opción A: Emplear la función library para cargar en el ambiente el paquete.\nlibrary(ggplot2) Opción B: Dando click a la casilla que indica el paquete. Para dejar de usarlo da de nuevo click en esa casilla para que deje de estar marcada.\nBuenas prácticas al finalizar tu programa # Guarda tu output write.csv(datos_procesados, file = paste0(outdir, \u0026#34;datos_procesados.csv\u0026#34;)) save(datos_procesados, file = paste0(outdir, \u0026#34;datos_procesados.RData\u0026#34;)) save.image(file = paste0(outdir, \u0026#34;sesionR_miPrograma.RData\u0026#34;) Especifica qué librerías utilizaste y qué versiones Cuando hacemos un programa, puede que en el futuro otras personas lo quieran utilizar, sin embargo, es probable que las librerías que usaste en el momento que escribiste el programa se hayan actualizado.\nEs por eso que al final de TODO programa que escribas, ejecutes y escribas el resultado de correr la siguiente línea.\nsessionInfo() Puedes intentar correr este comando tú, lo que verás impreso en consola son todas las librerías instaladas en tu sesión de R, así como la versión. Entonces así, si alguien quiere reproducir tus resultados en algún momento, deberá instalar las mismas versiones de las librerías que tú utilizaste.\nImportar datos en R # Existen distintos tipos de formatos de datos que podemos ingresar a R para su análisis. Los principales son:\nA) Datos separados por un valor # Por ejemplo por comas (.csv), tab (.tsv) o espacios. Aunque la siguiente función puede leer por cualquier separador.\nread.table(\u0026#34;/path/dataset.csv\u0026#34;, header = TRUE, delim = \u0026#34;,\u0026#34;) read.table(\u0026#34;/path/dataset.tsv\u0026#34;, header = TRUE, delim = \u0026#34;\\t\u0026#34;) read.table(\u0026#34;/path/dataset.\u0026#34;, header = TRUE, delim = \u0026#34;,\u0026#34;) El parámetro header nos dice si considerar la primera fila como nombre de las variables.\nTambién podemos leer un archivo .csv directamente:\nread.csv(\u0026#34;/path/dataset.csv\u0026#34;) Datos en formato CSV # Archivos separados por comas.\nEste ejemplo fue obtenido del repositorio de Github de Cosmoduende.\nDatos en formato TSV # Archivo separado por tabuladores.\nEste ejemplo proviene de la base de datos de Arabidopsis thaliana, la planta modelo en el estudio de la genómica. Este archivo indica el tipo o característica del gen anotado en Araport11.\nSe pueden cargar datos biológicos en formato TSV # -Formato de texto plano - Araport11 Gene Type.txt -Formato GFF: Araport11_GFF3_genes_transposons.current.gff -Formato GTF: Araport11_GTF_genes_transposons.current.gtf - -Formato BED12 - Araport11_pcoding_transcripts.bed\nOtros formatos # B) Archivos tipo RData # Usualmente cargan todo el ambiente o varias variables\nload(\u0026#34;/path/ambiente.RData\u0026#34;) C) Archivos tipo RDS # Se usan para cargar variables, usualmente muy pesadas\nvariable \u0026lt;- readRDS(\u0026#34;/path/variable.RData\u0026#34;) Crea un RProject # Recapitulando las buenas prácticas: # ###### # Script de clase \u0026#34;Intro a R\u0026#34; # Evelia Coss # 9 de octubre 2023 ####### indir = \u0026#34;C:/Users/ecoss/IntroR_BasesDeDatos2023/data/\u0026#34; outdir = \u0026#34;C:/Users/ecoss/IntroR_BasesDeDatos2023/results\u0026#34; Ejercicio: cargar un dataset # Descarga los tres datasets de Marvel dando click en este link, debes tener tres archivos en la misma carpeta charactersStats.csv, heroesInformation.csv y superHeroPowers.csv. Asegúrate de guardarlo en el directorio donde hiciste tu Rproject. En mi caso, guarde los datos en la carpeta data/.\nImporta los archivos en R de la siguiente manera:\ninfoCharacters \u0026lt;- read.csv(\u0026#34;data/heroesInformation.csv\u0026#34;, na.strings = c(\u0026#34;-\u0026#34;, \u0026#34;-99\u0026#34;)) # La opcion na.string nos permite sustituir valores - y -99 por NA infoPowers \u0026lt;- read.csv(\u0026#34;data/superHeroPowers.csv\u0026#34;) infoStats \u0026lt;- read.csv(\u0026#34;data/charactersStats.csv\u0026#34;, na.strings = \u0026#34;\u0026#34;) Visualiza su información con head() o View(). NOTA: Primero debes crear la carpeta data/ antes de descargar los archivos. Recuerda: Verifica que el archivo este en el lugar correcto # Verifica tu directorio de trabajo getwd() 2. Verifica que se encuentren los tres archivos en la carpeta data/.\ndir(\u0026#34;data\u0026#34;) Buenas prácticas # Importar datos ###### # Script de clase \u0026#34;Intro a R\u0026#34; # Evelia Coss # 9 de octubre 2023 ####### indir = \u0026#34;C:/Users/ecoss/OneDrive - CINVESTAV/Documentos/Posdoc_LIIGH/VieRnesBioinfo/ViernesBioinfo_2024/Presentaciones/data/\u0026#34; outdir = \u0026#34;C:/Users/ecoss/OneDrive - CINVESTAV/Documentos/Posdoc_LIIGH/VieRnesBioinfo/ViernesBioinfo_2024/Presentaciones/\u0026#34; infoCharacters \u0026lt;- read.csv(paste0(indir,\u0026#34;heroesInformation.csv\u0026#34;), na.strings = c(\u0026#34;-\u0026#34;, \u0026#34;-99\u0026#34;)) # La opcion na.string nos permite sustituir valores - y -99 por NA infoPowers \u0026lt;- read.csv(paste0(indir,\u0026#34;superHeroPowers.csv\u0026#34;)) infoStats \u0026lt;- read.csv(paste0(indir,\u0026#34;charactersStats.csv\u0026#34;), na.strings = \u0026#34;\u0026#34;) Visualizar su información con head() head(infoCharacters, 5)[1:5] # X name Gender Eye.color Race # 1 0 A-Bomb Male yellow Human # 2 1 Abe Sapien Male blue Icthyo Sapien # 3 2 Abin Sur Male blue Ungaran # 4 3 Abomination Male green Human / Radiation # 5 4 Abraxas Male blue Cosmic Entity Ejercicio: Guarda tu ambiente # Con el comando:\nsave.image(paste0(indir, miAmbiente1.RData)) Fuentes (Viernes 1): EveliaCoss/ViernesBioinfo2024 Viernes de Bioinformatica en el LIIGH, 2 febrero - 2 de agosto 2024 HTML 22 2 ","date":"2 febrero 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-1/","section":"Publicaciones","summary":"RStudio es un entorno de desarrollo integrado (IDE) para R.","title":"Introduccion a Rstudio","type":"posts"},{"content":"Postdoctoral Research at Center of Sciences Mathematics - UNAM | Topological and Geometric Data Analysis | Bioinformatics | Geometric Group Theory | Global Riemannian Geometry | Quantum Geometry and Topology | Member of R-Ladies\n","date":"1 enero 0001","externalUrl":null,"permalink":"/authors/adriana/","section":"Authors","summary":"Postdoctoral Research at Center of Sciences Mathematics - UNAM | Topological and Geometric Data Analysis | Bioinformatics | Geometric Group Theory | Global Riemannian Geometry | Quantum Geometry and Topology | Member of R-Ladies","title":"Adriana Haydeé Contreras Peruyero","type":"authors"},{"content":" ","date":"1 enero 0001","externalUrl":null,"permalink":"/calendar/","section":"calendar","summary":" ","title":"calendar","type":"calendar"},{"content":"","date":"1 enero 0001","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"Especialista de Datos Jr, GF Banorte | Tesista en la UNAM | Feminista Datera |\n","date":"1 enero 0001","externalUrl":null,"permalink":"/authors/jazmin/","section":"Authors","summary":"Especialista de Datos Jr, GF Banorte | Tesista en la UNAM | Feminista Datera |","title":"Jazmín López Chacón","type":"authors"},{"content":"Postdoctoral fellow, Bioinformatics, R programming, Spatial transcriptomics.\n","date":"1 enero 0001","externalUrl":null,"permalink":"/authors/joselyn/","section":"Authors","summary":"Postdoctoral fellow, Bioinformatics, R programming, Spatial transcriptomics.","title":"Joselyn Cristina Chávez Fuentes","type":"authors"},{"content":"PhD student | Human genetics | Member R-ladies\n","date":"1 enero 0001","externalUrl":null,"permalink":"/authors/mjose/","section":"Authors","summary":"PhD student | Human genetics | Member R-ladies","title":"María José Palma Martínez (Maestría)","type":"authors"},{"content":"PhD Student | Bioinformatics | Population Genomics | Clinical Genomics | Mexican Indigenous Populations\n","date":"1 enero 0001","externalUrl":null,"permalink":"/authors/maria/","section":"Authors","summary":"PhD Student | Bioinformatics | Population Genomics | Clinical Genomics | Mexican Indigenous Populations","title":"MSc. Maria Fernanda Miron Toruno","type":"authors"},{"content":"","date":"1 enero 0001","externalUrl":null,"permalink":"/playlist/","section":"Playlists","summary":"","title":"Playlists","type":"playlist"},{"content":"Estudiante de Maestría | Asistente de investigación | Genómica de poblaciones | Filogeografía | Evolución | Ecología | R-ladies |\n","date":"1 enero 0001","externalUrl":null,"permalink":"/authors/szorrilla/","section":"Authors","summary":"Estudiante de Maestría | Asistente de investigación | Genómica de poblaciones | Filogeografía | Evolución | Ecología | R-ladies |","title":"Sofía Zorrilla Azcué","type":"authors"}]