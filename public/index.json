
[{"content":"","date":"29 julio 2024","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"29 julio 2024","externalUrl":null,"permalink":"/authors/alejandra/","section":"Authors","summary":"","title":"Alejandra","type":"authors"},{"content":"","date":"29 julio 2024","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":" ¿Que es y para que sirve Rmarkdown? # Es una herramienta que permite escribir documentos dinamicos con código de R, de manera fácil y legible.\n¿Por que realizar un Rmarkdown? # Nos ayuda a entregar un reporte interactivo ya sea en archivo html o pdf.\nComo creamos un archivo Rmarkdown? # ","date":"29 julio 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-4/","section":"Publicaciones","summary":"¿Que es y para que sirve Rmarkdown?","title":"Introducción a Rmarkdown","type":"posts"},{"content":" ","date":"29 julio 2024","externalUrl":null,"permalink":"/posts/","section":"Publicaciones","summary":" ","title":"Publicaciones","type":"posts"},{"content":"","date":"29 julio 2024","externalUrl":null,"permalink":"/tags/r/","section":"Tags","summary":"","title":"R","type":"tags"},{"content":"","date":"29 julio 2024","externalUrl":null,"permalink":"/tags/rstudio/","section":"Tags","summary":"","title":"Rstudio","type":"tags"},{"content":"","date":"29 julio 2024","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"29 julio 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"29 julio 2024","externalUrl":null,"permalink":"/tags/viernes/","section":"Tags","summary":"","title":"Viernes","type":"tags"},{"content":"","date":"29 julio 2024","externalUrl":null,"permalink":"/series/viernes2024/","section":"Series","summary":"","title":"Viernes2024","type":"series"},{"content":" EveliaCoss/ViernesBioinfo2024 Viernes de Bioinformatica en el LIIGH, 2 febrero - 2 de agosto 2024 HTML 18 1 ","date":"25 julio 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/","section":"Publicaciones","summary":" EveliaCoss/ViernesBioinfo2024 Viernes de Bioinformatica en el LIIGH, 2 febrero - 2 de agosto 2024 HTML 18 1 ","title":"Viernes de Bioinformatica 2024","type":"posts"},{"content":" CRAN. # Lo primero que tenemos que hacer es ir a la pagina de CRAN y seleccionar la descarga dependiendo nuestro sistema operativo.\nLinux (Ubuntu) # Lo primero que vamos a hacer es abrir nuestra terminal Ctrl + Alt + T y vamos a ver el inicio asi:\nusuario@nombre-de-computadora:directorio$ Después en este espacio escribimos lo siguiente (Probablemente te pida contraseña, es tu computadora pidiéndote permisos para crear y modificar archivos):\n# Actualizar indices del sistema sudo apt update -qq # Instalar unos paquetes sudo apt install --no-install-recommends software-properties-common dirmngr # Añadir una clave de acceso para descargar R wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc # Añadir el repositorio de R desde CRAN sudo add-apt-repository \u0026#34;deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\u0026#34; # Despues ejecutamos la orden de instalar R sudo apt install --no-install-recommends r-base # Por ultimo instalamos mas de 5000 paquetes de CRAN sudo add-apt-repository ppa:c2d4u.team/c2d4u4.0+ Listo, ya tienes R en Linux Ubuntu, si sabes como instalarlo en otra distribución puedes mandar tu aportación a mi correo (jasvpj@gmail.com)\nWindows # Descarga con este enlace el ejectuable y sigue la guia de instalación.\nMac OS # M1-3 Macs # Descarga con este enlace el ejectuable y sigue la guia de instalación.\nIntel Macs # Descarga con este enlace el ejectuable y sigue la guia de instalación.\n","date":"8 junio 2024","externalUrl":null,"permalink":"/posts/tutoriales/instalacion-de-r/","section":"Publicaciones","summary":"CRAN.","title":"Instalacion de R","type":"posts"},{"content":" ","date":"8 junio 2024","externalUrl":null,"permalink":"/authors/jorge/","section":"Authors","summary":" ","title":"Jorge Alfredo Suazo Victoria","type":"authors"},{"content":" ¿Qué es R? # R es un entorno de desarrollo de software libre y lenguaje de programación.\n¿Por qué usar R? # Es ampliamente utilizado para la computación estadística, gráfica, y de machine learning. Ofrece una amplia variedad de funciones estadísticas(modelos lineales y no lineales, pruebas estadísticas clásicas, análisis de series de tiempo, clasificación, agrupamiento, etc.), y para realizar gráficas.\nAdemás, existen numerosas librerías que nos permiten realizar el análisis y más graficas, incluyendo para análisis de datos genómicos.\nMeme importante # pythonzzz ¿Cómo instalamos R? # Aqui hay una guia para la instalacion de R\nInstalacion de R 8 junio 2024\u0026middot;215 palabras\u0026middot; loading \u0026middot; loading Jorge Alfredo Suazo Victoria R Tutorial CRAN. Rstudio # Es recomendable utilizar Rstudio para empezar a programar en R, puedes utilizar la siguiente guia para instalar y empezar un proyecto en Rstudio:\nIntroduccion a Rstudio 2 febrero 2024\u0026middot;1991 palabras\u0026middot; loading \u0026middot; loading Sofia Guadalupe Salazar Magaña ,\u0026nbsp; Evelia Lorena Coss-Navarrete R Tutorial Rstudio Viernes RStudio es un entorno de desarrollo integrado (IDE) para R. Comandos Basicos # Podemos entender a R como una consola super poderosa, y como cualquier computadora podemos: sumar, restar, dividir y multiplicar.\n#Sumar 2 + 2 #Restar 2 - 2 #Dividir 2 / 2 #Multiplicar 2 * 2 Como puedes ver en R, a diferencia de otros lenguajes no es necesario utilizar algún símbolo para indicar el fin de una operación básica. Ademas de esto R puede sacar el Modulo, que es el restante de una división.\n#Modulo 10 %% 3 #El resultado deberia de ser 1, el restante de division de 10/3 R también tiene un comando para obtener la parte entera de una división.\n#Parte entera de una division 10 %/% 3 #El resultado deberia de ser 3 Con esto podemos hacer operaciones basicas de calculadora pero querermos ir más allá.\nVariables # En R utilizamos \u0026lt;- para asignar un valor de cualquier tipo a una variable, una variable en programación en simples palabras es el nombre o identificacion que recibe un valor, estas pueden ser estaticas o pueden cambiar, ser locales o globales, etc.\n¡Advertencia! Para asignar variables globales se usa \u0026lt;\u0026lt;- Tipos de Variables # En R, existen varios tipos de variables que puedes utilizar en tus análisis y programación. Estos están los más comunes:\n-Numérico (numeric): Representa valores decimales, como 4.5. También incluye números enteros (integers).\n-Carácter (character): Se utiliza para almacenar texto o cadenas de caracteres. Por ejemplo, “Hola, mundo”.\n-Lógico (logical): Puede tomar dos valores: TRUE o FALSE. Se utiliza para expresar condiciones o respuestas binarias.\n-Complejo (complex): Representa números complejos, como 3 + 2i.\n-Crudo (raw): Almacena datos en formato binario sin procesar.\n-Además, hay otros tipos más avanzados, como factores (que representan categorías).\nAsignacion y uso de variables # Tenemos en una situación donde queremos registrar nuestro nombre, edad y fecha de cumpleaños.\n#Registraremos nuestro nombre, los nombres son cadenas de caracteres #es decir su comportamiento es diferente al de los numeros (Por ahora) #Para escribir una cadena de texto usamos comillas(\u0026#34;\u0026#34;)(\u0026#39;\u0026#39;) Mi_nombre \u0026lt;- \u0026#34;Jorge Alfredo Suazo Victoria\u0026#34; #Nuestro cumpleaños va a ser registrado en el siguiente orden [Dia] de [Mes] #de [año], esto tendra importancia más adelante Mi_cumpleaños \u0026lt;- \u0026#34;30 de Diciembre de 2005\u0026#34; #La edad simplemente será un numero Mi_edad \u0026lt;- 18 Si quisieramos imprimir un saludo con estos datos tenemos las siguientes opciones.\n#Utilizando la funcion cat(), el separador de cada variable es la coma cat(\u0026#34;¡Hola!, mi nombre es\u0026#34;, Mi_nombre ,\u0026#34;tengo\u0026#34; , Mi_edad , \u0026#34;años, y cumplo el\u0026#34; , Mi_cumpleaños) #Utilizando sprintf(), es una forma muy parecida a como hacemos cadenas de #texto en lenguajes como C print(sprintf(\u0026#34;Hola, mi nombre es %s, tengo %d años, y cumplo el %s.\u0026#34;, Mi_nombre, Mi_edad, Mi_cumpleaños)) Las diferencias entre ambos son las siguientes:\nprint(): # Devuelve el objeto tal cual, incluyendo comillas si es una cadena de caracteres. Útil para imprimir variables, mensajes o resultados con fines de depuración. Puede personalizarse con argumentos como digits para controlar el número de decimales. Puede imprimir varios tipos de objetos, como cadenas, variables, tablas, marcos de datos y más. cat(): # Concatena y muestra objetos sin comillas. Permite especificar un separador personalizado con sep. Solo admite vectores atómicos (conjunto de datos del mismo tipo). Puede usarse para escribir valores en un archivo. Agrega saltos de línea automáticamente si usas \\\u0026quot;\\\\n\\\u0026quot; como separador. Elimina información específica del código (por ejemplo, convierte n en una nueva línea). Vectores o listas # En R, las diferencias principales entre un vector y una lista son las siguientes:\nUnidimensional vs. Multidimensional: # Un vector es un objeto unidimensional. Puede contener elementos del mismo tipo (numéricos, lógicos, caracteres, etc.). Una lista, en cambio, es un objeto multidimensional. Puede contener elementos de diferentes tipos. Estructura y Contenido: # Los vectores contienen elementos homogéneos (del mismo tipo). Las listas pueden contener elementos heterogéneos (de diferentes tipos), incluso otras listas. El siguiente problema sera descifrar que edad tendremos en una fecha impuesta por el usuario, para esto tenemos que desentrañar mi fecha de cumpleaños.\n#Utilizaremos el comando strsplit(), este comando separa un string (cadena de #texto) usando el separador que establece el usuario, ejemplo: strsplit(Mi_cadena, \u0026#34;separador\u0026#34;) Mi_cumpleaños_separado \u0026lt;- strsplit(Mi_cumpleaños, \u0026#34; \u0026#34;) print(Mi_cumpleaños_separado) #Veremos que tipo de objeto es Mi_cumpleaños_separado class(Mi_cumpleaños_separado) Listas # Una lista en R es una colección ordenada de cualquier objeto. A diferencia de los vectores y las matrices, donde los elementos deben ser del mismo tipo, en el caso de las listas, los elementos pueden ser de diferentes tipos o almacenar distintas estructuras.\nEn una lista, se pueden extraer elementos de la siguiente forma:\n#El primer renglon se escribe [[n]] y para la columna es [m] Dia_de_mi_cumple \u0026lt;- Mi_cumpleaños_separado[[1]][1] #Si quisieramos agregar otro renglon es de la siguiente manera Mi_cumpleaños_separado[[2]] \u0026lt;- list() #Le decimos que la segunda seccion de #la lista tambien es una lista (xd) Mi_cumpleaños_separado[[2]][1] \u0026lt;- \u0026#34;howdy\u0026#34; print(Mi_cumpleaños_separado[[2]][1]) #Comprobacion #Vamos a guardar el dia, mes y año en diferentes variables Dia_cumple \u0026lt;- Mi_cumpleaños_separado[[1]][1] Mes_cumple \u0026lt;- Mi_cumpleaños_separado[[1]][3] Año_cumple \u0026lt;- Mi_cumpleaños_separado[[1]][5] #Listo, ahora revisaremos que tipo de objeto es cada uno cat(class(Dia_cumple), class(Mes_cumple), class(Año_cumple)) El unico que concuerda es el mes, porque el dia y el año son numeros, para cambiar el tipo de variable debemos hacer lo siguiente.\n#La función as.numeric() se utiliza para convertir un valor o una cadena de #texto en un número decimal (de punto flotante) en R. Cuando aplicas #as.numeric() a una cadena de caracteres que representa un número, R intenta #interpretarla como un número y devuelve el valor numérico correspondiente. as.numeric(Dia_cumple) #Comprobamos print(class(Dia_cumple)) Al pareceer no se guardo el cambio que realizamos.\n¡Advertencia! Para darle un nuevo valor o clase a una variable hay que sobreescribirla #Sobreescribimos Dia_cumple \u0026lt;- as.numeric(Dia_cumple) Año_cumple \u0026lt;- as.numeric(Año_cumple) cat(class(Dia_cumple), class(Año_cumple)) Listo ahora falta cambiar los meses a numeros, pero como son puramente texto tenemos que hacer cambios más radicales.\nDeclaraciones Condicionales # if y else # Basicamente, if es si pasa algo y else es si no pasa ese algo.\nEjemplo: Si tengo 30 pesos me compro un elote y si no me pongo a llorar.\nOperadores comunes # Igualdad (==): El operador == se utiliza para verificar si dos valores son iguales.\nDesigualdad (!=): El operador != se utiliza para verificar si dos valores no son iguales.\nMayor (\u0026gt;): El operador \u0026gt; verifica si el valor de la izquierda es mayor al valor de la derecha.\nMayor o Igual (\u0026gt;=): El operador \u0026gt;= verifica si el valor de la izquierda es mayor o igual al valor de la derecha.\nMenor (\u0026lt;): El operador \u0026lt; verifica si el valor de la izquierda es menor al valor de la derecha.\nMenor o Igual (\u0026lt;=): El operador \u0026lt;= verifica si el valor de la izquierda es menor o igual al valor de la derecha.\ngraph TD; Title(Problema del elote)---\u003e A[Dinero] A[Dinero]--\u003eB{¿Tienes 30 pesos?}; B --SI---\u003e Si[Feli] B --NO---\u003e No[Tite] # El dinero es igual a 30 Money \u0026lt;- 30 # ¿El dinero es igual a 30? if(Money == 30){ #Si print(\u0026#34;feli\u0026#34;) }else{ #No print(\u0026#34;tite\u0026#34;) } Pero\u0026hellip; ¿Y si tenemos más de dos opciones?(if(options != 2))\nifelse # Si tengo exactamente 30 pesos, quiero imprimir ‘Justo’. Si tengo más de 30 pesos, quiero imprimir ‘Espero cambio devuelta’. Y si no tengo dinero, quiero imprimir ‘tite’.\ngraph TD; Title(Problema del elote)---\u003e A[Dinero] A[Dinero]--\u003eB{¿Tienes 30 pesos?}; B --SI---\u003e Si[Feli] B --NO---\u003e No{Menos o mas} No --\"-\"---\u003e D[tite] No --\"+\"---\u003e C[Espero Cambio] # El dinero es igual a 30 dinero \u0026lt;- 30 # ¿El dinero es igual a 30? ifelse(dinero == 30, \u0026#34;Justo\u0026#34;, ifelse(dinero \u0026gt; 30, \u0026#34;Espero cambio devuelta\u0026#34;, \u0026#34;tite\u0026#34;)) #En R funciona un comando en diferentes lineas hasta que se cierra el parentesis Con esto podemos hacerenos una idea de como hacer que los meses en texto se vuelvan numeros. Lo voy a hacer pero despues veremos una forma más eficiente de hacerlo.\n#Sobreescribir Mes_cumple \u0026lt;- ifelse(Mes_cumple == \u0026#34;Diciembre\u0026#34;, 12, ifelse(Mes_cumple == \u0026#34;Noviembre\u0026#34;, 11, ifelse(Mes_cumple == \u0026#34;Octubre\u0026#34;, 10, ifelse(Mes_cumple == \u0026#34;Septiembre\u0026#34;, 9, ifelse(Mes_cumple == \u0026#34;Agosto\u0026#34;, 8, ifelse(Mes_cumple == \u0026#34;Julio\u0026#34;, 7, ifelse(Mes_cumple == \u0026#34;Junio\u0026#34;, 6, ifelse(Mes_cumple == \u0026#34;Mayo\u0026#34;, 5, ifelse(Mes_cumple == \u0026#34;Abril\u0026#34;, 4, ifelse(Mes_cumple == \u0026#34;Marzo\u0026#34;, 3, ifelse(Mes_cumple == \u0026#34;Febrero\u0026#34;, 2, ifelse(Mes_cumple == \u0026#34;Enero\u0026#34;, 1, \u0026#34;NA\u0026#34;)))))))))))) #Al final se puso \u0026#34;NA\u0026#34;(No aplica) Si no concuerda con ningun mes existente print(Mes_cumple) Switch case # El switch es como si verdaderamente estuvieramos añadiendo mas opciones, ifelse se parece más a:\ngraph TD; Title(Ifelse)---\u003e A[variable] A --\u003e B{condicion1} B --Si---\u003e Af[Fin1] B --\"No\"---\u003e C{Condicion2} C --\"Si\"---\u003e Bf[Fin2] C --\"No\"---\u003e D{Condicion3} D --\"Si\"---\u003e Cf[Fin3] D --\"No\"---\u003e Df[Fin4] Y asi, pero switch es como:\ngraph TD; Title(Switch)---\u003e A[variable] A --\u003e B{condicion1} B --case1---\u003e Af[Fin1] B --case2---\u003e Bf[Fin2] B --case3---\u003e Cf[Fin3] B --case4---\u003e Df[Fin4] Ahora como se veria en codigo\nMes_cumple \u0026lt;- switch(Mes_cumple, \u0026#34;Diciembre\u0026#34; = 12, \u0026#34;Noviembre\u0026#34; = 11, \u0026#34;Ocutubre\u0026#34; = 10, \u0026#34;Septiembre\u0026#34; = 9, \u0026#34;Agosto\u0026#34; = 8, \u0026#34;Julio\u0026#34; = 7, \u0026#34;Junio\u0026#34; = 6, \u0026#34;Mayo\u0026#34; = 5, \u0026#34;Abril\u0026#34; = 4, \u0026#34;Marzo\u0026#34; = 3, \u0026#34;Febrero\u0026#34; = 2, \u0026#34;Enero\u0026#34; = 1, \u0026#34;default\u0026#34; = \u0026#34;NA\u0026#34;) print(Mes_cumple) ¡¿Que!? ¿Por que 1?, Bueno anteriormente hicimos el mismo ejercicio pero con ifelse entonces el valor de Mes_cumple quedo en 12.\ngraph LR; A[\"\"Diciembre\"\"] --ifelse---\u003e B[12] --switch---\u003e C[1] El 1 se debe a que en switch si el input (El valor de entrada) es un numero, lo que va a hacer es buscar la posicion del input, en este caso buscó la posicion numero 12 que corresponde a \u0026ldquo;Enero\u0026rdquo; = 1. Vamos a volver a hacerlo:\nMes_cumple \u0026lt;- \u0026#34;Diciembre\u0026#34; Mes_cumple \u0026lt;- switch(Mes_cumple, \u0026#34;Diciembre\u0026#34; = 12, \u0026#34;Noviembre\u0026#34; = 11, \u0026#34;Ocutubre\u0026#34; = 10, \u0026#34;Septiembre\u0026#34; = 9, \u0026#34;Agosto\u0026#34; = 8, \u0026#34;Julio\u0026#34; = 7, \u0026#34;Junio\u0026#34; = 6, \u0026#34;Mayo\u0026#34; = 5, \u0026#34;Abril\u0026#34; = 4, \u0026#34;Marzo\u0026#34; = 3, \u0026#34;Febrero\u0026#34; = 2, \u0026#34;Enero\u0026#34; = 1, \u0026#34;default\u0026#34; = \u0026#34;NA\u0026#34;) print(Mes_cumple) graph LR; A[\"\"Diciembre\"\"] --switch---\u003e C[12] ¡Perfecto! Ya tenemos todos las variables en numeros, ahora falta calcular la edad.\nVectores # Crear funciones # Ahora necesitamos que el usuario nos diga que fecha requiere en el mismo formato de antes, pero ahora no quiero que la fecha este \u0026ldquo;hardcodeada\u0026rdquo; (Que este dentro del script).\n#Pedirle al usuario que escriba algo es facil, vamos a trabajar con la #funcion readline(), el formato seria algo asi readline(prompt = \u0026#34;Texto que muestra al #registrar entrada\u0026#34;) Fecha_Destino \u0026lt;- readline(prompt = \u0026#34;Ingresa la fecha destino: \u0026#34;) Okey, ya tenemos la fecha, ahora hay que copiar y pegar todo el codigo que hicimos antes\u0026hellip; y remplazar nombres de variables\u0026hellip;\nMejor vamos a hacer una función a este punto yo creo que ya intuimos que es una función, su definición en programación es:\nEn programación es un bloque de código diseñado para realizar una tarea específica. Puede procesar datos y devolver un resultado. Las funciones nos permiten dividir un programa en partes más pequeñas y manejables, lo que facilita la comprensión, el mantenimiento y la reutilización del código. Lo que nos interesa es lo que pone en negritas, reutilizar código. Ahora vamos a copiar y pegar nuestro código remplazando variables\u0026hellip; lo se, pero esta va a ser la ultima vez que lo hagamos.\n#La funcion para hacer funciones se llama function(), en el parentesis, vamos #a poner todas las variables externas a la funcion que se vayan emplear #adentro de la funcion convertir_fecha \u0026lt;- function(Fecha) { # Divide la cadena en palabras separadas por espacios Fecha_separado \u0026lt;- strsplit(Fecha, \u0026#34; \u0026#34;) # Extrae el día, mes y año Dia \u0026lt;- as.numeric(Fecha_separado[[1]][1]) Mes \u0026lt;- Fecha_separado[[1]][3] Año \u0026lt;- as.numeric(Fecha_separado[[1]][5]) # Convierte el mes a un valor numérico Mes \u0026lt;- switch(Mes, \u0026#34;Diciembre\u0026#34; = 12, \u0026#34;Noviembre\u0026#34; = 11, \u0026#34;Octubre\u0026#34; = 10, \u0026#34;Septiembre\u0026#34; = 9, \u0026#34;Agosto\u0026#34; = 8, \u0026#34;Julio\u0026#34; = 7, \u0026#34;Junio\u0026#34; = 6, \u0026#34;Mayo\u0026#34; = 5, \u0026#34;Abril\u0026#34; = 4, \u0026#34;Marzo\u0026#34; = 3, \u0026#34;Febrero\u0026#34; = 2, \u0026#34;Enero\u0026#34; = 1, \u0026#34;default\u0026#34; = NA) #Utilizamos c() para crear vectores, en este caso lo vamos a ocupar para #regresar los valores de Dia, Mes y Año en una sola variable (resultados) return(c(Dia, Mes, Año)) # La funcion return(), indica que valores nos va # a dar la funcion en general, en este caso la funcion \u0026#34;convertir_fecha\u0026#34; # nos va ad dar Dia, Mes Año en un vector } #Suponiendo que el usuario nos dio la fecha 13 de Noviembre de 2030 resultados \u0026lt;- convertir_fecha(Fecha_Destino) print(resultados) } \u0026ldquo;Resultado\u0026rdquo; es un vector, por lo tanto si quisieramos cambiar de clase a uno de sus elementos todo el vector cambiaria.\n#Como los vectores son unidimensionales solo hace falta el indice para acceder a un valor Resultado[1] \u0026lt;- as.character(Resultado[1]) print(class(Resultado[2])) Bueno, sabiendo esto podemos hacer la ultima función, para saber que edad tendré en una fecha establecida.\n#Vamos a usar una funcion dentro de una funcion, ya lo habiamos hecho antes #al poner print(class()) o al poner return(c()) pero ahora se hara más #evidente Conocer_Edad \u0026lt;- function(Mi_cumpleaños, Fecha_Destino){ #Utilizamos la funcion convertir_fecha Resultado_cumple \u0026lt;- convertir_fecha(Mi_cumpleaños) Resultado_Fecha \u0026lt;- convertir_fecha(Fecha_Destino) #Convertirmos Meses a Dias (Un mes tiene 30.4375 en promedio, esto porque un #año tiene 365.25 dias contando el año bisiesto) Resultado_cumple[2] \u0026lt;- Resultado_cumple[2] * 30.4375 Resultado_Fecha[2] \u0026lt;- Resultado_Fecha[2] * 30.4375 #Convertimos Meses a Años Resultado_cumple[3] \u0026lt;- Resultado_cumple[3] * 365.25 Resultado_Fecha[3] \u0026lt;- Resultado_Fecha[3] * 365.25 #Ahora sumamos para ver el total de dias, usando sum(), si a sum() le das un #vector numerico, automaticamente sumara todos los valores dentro del vector Total_Dias_cumple \u0026lt;- sum(Resultado_cumple) Total_Dias_Fecha \u0026lt;- sum(Resultado_Fecha) #Ahora sacamos la diferencia entre los Dias y lo dividimos entre 365.25 para obtener los años Diferencia_Años \u0026lt;- (Total_Dias_Fecha - Total_Dias_cumple)/365.25 #El resultado probablemente sea un numero decimal con punto flotante, asi que podemos usar floor() para redondear el valor hacia abajo Años_Aproximados \u0026lt;- floor(Diferencia_Años) return(Años_Aproximados) } Edad_Aproximada \u0026lt;- Conocer_Edad(Mi_cumpleaños, Fecha_Destino) cat(\u0026#34;Hola mi nombre es\u0026#34;, Mi_nombre, \u0026#34;tengo\u0026#34;, Mi_edad, \u0026#34;años, nací el\u0026#34;, Mi_cumpleaños,\u0026#34;en el\u0026#34;, Fecha_Destino , \u0026#34;tendré\u0026#34;, Edad_Aproximada, \u0026#34;años\u0026#34;) Listo, ahora ya sabes como calcular una edad aproximada en R, te animo a que trates de modificar el código, intentes añadir nuevas funciones, quizás agregar una función que te diga tu signo zodiacal, lo que se te ocurra, cualquier duda mi correo esta en la parte superior de la pagina en forma de arroba :).\n","date":"8 junio 2024","externalUrl":null,"permalink":"/posts/tutoriales/mecanicas-basicas-de-r/","section":"Publicaciones","summary":"¿Qué es R?","title":"Mecanicas Basicas de R","type":"posts"},{"content":"","date":"8 junio 2024","externalUrl":null,"permalink":"/tags/principiante/","section":"Tags","summary":"","title":"Principiante","type":"tags"},{"content":"","date":"8 junio 2024","externalUrl":null,"permalink":"/series/r/","section":"Series","summary":"","title":"R","type":"series"},{"content":"","date":"8 junio 2024","externalUrl":null,"permalink":"/tags/tutorial/","section":"Tags","summary":"","title":"Tutorial","type":"tags"},{"content":"Encuentra tutoriales prácticos sobre diferentes lenguajes y conceptos de programación. 🖥️💡\n","date":"8 junio 2024","externalUrl":null,"permalink":"/posts/tutoriales/","section":"Publicaciones","summary":"Encuentra tutoriales prácticos sobre diferentes lenguajes y conceptos de programación.","title":"Tutoriales","type":"posts"},{"content":"Posdoctoral Research Associate | Bioinformation | lncRNAs | autoimmune diseases | Evolution | gene regulation | Member R-Ladies, LupusRGMX, Project JAGUAR\n","date":"16 febrero 2024","externalUrl":null,"permalink":"/authors/evelia/","section":"Authors","summary":"Posdoctoral Research Associate | Bioinformation | lncRNAs | autoimmune diseases | Evolution | gene regulation | Member R-Ladies, LupusRGMX, Project JAGUAR","title":"Evelia Lorena Coss-Navarrete","type":"authors"},{"content":"Matrices y Listas.\nMatriz (matrix) # # Opcion A x \u0026lt;- matrix(c(1,2,3,4,5,6), nrow = 2, ncol = 3) x # [,1] [,2] [,3] # [1,] 1 3 5 # [2,] 2 4 6 Ahora que ya conocemos las funciones seq() y seq_len() podemos crear la matriz de esta manera:\n# Opcion B x \u0026lt;- matrix(seq(1,6), nrow = 2, ncol = 3) # Opcion C **x \u0026lt;- matrix(seq_len(6), nrow = 2, ncol = 3)** Extraer elementos de una matriz (matrix) # Al igual que con los dataframe usaremos las filas y columnas (x[fila, columna]) para extraer la información.\nx[2,3] # [1] 6 Obtener la información de la columna 1.\nx[,1] # [1] 1 2 A diferencia del error que nos daria si no respetamos el [fila, columna], en las matrices si nos dara una salida:\nx[2] # [1] 2 Nos da el 2nd elemento contenido en la matriz, recuerdas que los elementos de la matriz al declararla eran c(1,2,3,4,5,6).\nNOTA: Para evitar complicaciones es mejor usar la manera [fila, columna].\nEjercicios: # Genera una matriz de tamano 2 x 3 (filas, columnas) (rows, columns) # Opcion A x \u0026lt;- matrix(1:6, nrow = 2, ncol = 3) # Opcion B x \u0026lt;- matrix(1:6, 2, 3) x Sustituir los valores presentes en la columna 3 de la matriz, por los valores 10 y 15 x[, 3] \u0026lt;- c(10,15) x # [,1] [,2] [,3] # [1,] 1 3 10 # [2,] 2 4 15 Visualizacion en modo de vector x[, 3] # [1] 10 15 Visualizacion en modo de matriz x[, 3, drop = FALSE] # [,1] # [1,] 10 # [2,] 15 NOTA: Por default se encuentra como drop = TRUE dentro del codigo interno, si queremos visualizar nuestros datos como una matriz de salida, podriamos cambiarlo a drop = FALSE.\nEliminar la columna 1 x[, -1] # [,1] [,2] # [1,] 3 10 # [2,] 4 15 Eliminar multiples columnas y Visualizacion en modo de matriz x[, -(1:2), drop = FALSE] # es lo mismo que x[, 3, drop = FALSE] # [,1] # [1,] 10 # [2,] 15 Tambien podemos usar drop = FALSE en los dataframes # En la clase anterior visualizamos los cambios que podemos realizarle al siguiente dataframe.\ndf \u0026lt;- data.frame(genes = paste0(\u0026#34;Gen\u0026#34;, seq_len(8)), expression = c(3.8, 5.5, 6.3, 1.8, 9, rep(3,3)), treatment =c(rep(\u0026#34;Control\u0026#34;, 4), rep(\u0026#34;Condicion1\u0026#34;,4))) Si quiero visualizar los primeros 3 datos de la columna 1 en forma de matriz\nhead(df[,2, drop = FALSE],3) # expression # 1 3.8 # 2 5.5 # 3 6.3 Propiedades de las matrices # Estructura de la matriz:\nstr(x) # num [1:2, 1:3] 1 2 3 4 10 15 class(x) # [1] \u0026#34;matrix\u0026#34; \u0026#34;array\u0026#34; Dimensiones:\ndim(x) # [1] 2 3 A diferencia de una dataframe, en la matriz el nombre de las filas y columnas es un valor NULL.\nrownames(x) # NULL colnames(x) # NULL Renombrar filas y columnas en la matriz # Recuerda que es una matriz de 2 filas con 3 columnas:\n# Renombrar filas rownames(x) \u0026lt;- c(\u0026#34;Gen1\u0026#34;, \u0026#34;Gen2\u0026#34;) x # [,1] [,2] [,3] # Gen1 1 3 10 # Gen2 2 4 15 # Renombrar columnas colnames(x) \u0026lt;- c(\u0026#34;Condicion1\u0026#34;, \u0026#34;Condicion2\u0026#34;, \u0026#34;Condicion3\u0026#34;) x # Condicion1 Condicion2 Condicion3 # Gen1 1 3 10 # Gen2 2 4 15 Operaciones en una matriz # Dividir toda la matriz entre 2.\nx / 2 # Condicion1 Condicion2 Condicion3 # Gen1 0.5 1.5 5.0 # Gen2 1.0 2.0 7.5 Elevar a la 2:\nx ** 3 # Condicion1 Condicion2 Condicion3 # Gen1 1 27 1000 # Gen2 8 64 3375 Transponer o invertir la matriz # Usando la funcion t(). Se puede emplear en un dataframe tambien.\nt(x) # Gen1 Gen2 # Condicion1 1 2 # Condicion2 3 4 # Condicion3 10 15 Agregar información en la matriz (por columnas) # # matriz 1 matriz1 \u0026lt;- matrix(c(\u0026#34;apple\u0026#34;, \u0026#34;banana\u0026#34;, \u0026#34;cherry\u0026#34;, \u0026#34;orange\u0026#34;,\u0026#34;grape\u0026#34;, \u0026#34;pineapple\u0026#34;, \u0026#34;pear\u0026#34;, \u0026#34;melon\u0026#34;, \u0026#34;fig\u0026#34;), nrow = 3, ncol = 3) # matriz 2 matriz2 \u0026lt;- matrix(c(\u0026#34;strawberry\u0026#34;, \u0026#34;blueberry\u0026#34;, \u0026#34;raspberry\u0026#34;), nrow = 3, ncol = 1) # Juntar matrices newmatrix \u0026lt;- cbind(matriz1, matriz2) newmatrix # [,1] [,2] [,3] [,4] # [1,] \u0026#34;apple\u0026#34; \u0026#34;orange\u0026#34; \u0026#34;pear\u0026#34; \u0026#34;strawberry\u0026#34; # [2,] \u0026#34;banana\u0026#34; \u0026#34;grape\u0026#34; \u0026#34;melon\u0026#34; \u0026#34;blueberry\u0026#34; # [3,] \u0026#34;cherry\u0026#34; \u0026#34;pineapple\u0026#34; \u0026#34;fig\u0026#34; \u0026#34;raspberry\u0026#34; NOTA: cbind() nos permite unir por columnas las dos matrices, respetando que ambas tienen 3 filas.\nAgregar información en la matriz (por filas) # # Crear una nueva matriz mientras juntamos a la matriz 1 newmatrix \u0026lt;- rbind(matriz1, c(\u0026#34;strawberry\u0026#34;, \u0026#34;blueberry\u0026#34;, \u0026#34;raspberry\u0026#34;)) newmatrix # [,1] [,2] [,3] # [1,] \u0026#34;apple\u0026#34; \u0026#34;orange\u0026#34; \u0026#34;pear\u0026#34; # [2,] \u0026#34;banana\u0026#34; \u0026#34;grape\u0026#34; \u0026#34;melon\u0026#34; # [3,] \u0026#34;cherry\u0026#34; \u0026#34;pineapple\u0026#34; \u0026#34;fig\u0026#34; # [4,] \u0026#34;strawberry\u0026#34; \u0026#34;blueberry\u0026#34; \u0026#34;raspberry\u0026#34; NOTA: rbind() nos permite unir por filas respetando que tenemos 3 elementos por fila.\nExtraer datos en una matriz # Para un solo elemento, visualizacion tipo matriz\n# Opcion A newmatrix == \u0026#34;apple\u0026#34; # [,1] [,2] [,3] # [1,] TRUE FALSE FALSE # [2,] FALSE FALSE FALSE # [3,] FALSE FALSE FALSE # [4,] FALSE FALSE FALSE Para un solo elemento, visualizacion tipo vector\n# Opcion B newmatrix %in% \u0026#34;apple\u0026#34; # [1] TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE Extraer datos en una matriz # Para multiples elementos, visualizacion tipo matriz\n# Opcion A newmatrix == c(\u0026#34;apple\u0026#34;, \u0026#34;melon\u0026#34;) # [,1] [,2] [,3] # [1,] TRUE FALSE FALSE # [2,] FALSE FALSE TRUE # [3,] FALSE FALSE FALSE # [4,] FALSE FALSE FALSE Para multiples elementos, visualizacion tipo vector\n# Opcion B newmatrix %in% c(\u0026#34;apple\u0026#34;, \u0026#34;melon\u0026#34;) # [1] TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE Crear una lista (list) # Primero veamos como se declara una lista y su estructura:\n# Declarar una lista, cada elemento esta separado por una coma mylist \u0026lt;- list(\u0026#34;8\u0026#34;, c(1,2,3)) mylist # [[1]] # [1] \u0026#34;8\u0026#34; # # [[2]] # [1] 1 2 3 Estructura de la lista\nstr(mylist) # List of 2 # $ : chr \u0026#34;8\u0026#34; # $ : num [1:3] 1 2 3 Una lista puede contener vectores y matrices dentro:\nmyvector \u0026lt;- 1:10 mymatrix \u0026lt;- matrix(1:4, nrow = 2) mydf \u0026lt;- data.frame(\u0026#34;num\u0026#34; = 1:3, \u0026#34;let\u0026#34; = c(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;)) Guardamos todo en la lista:\nmylist \u0026lt;- list( \u0026#34;vector\u0026#34; = myvector, \u0026#34;matriz\u0026#34; = mymatrix, \u0026#34;dataframe\u0026#34; = mydf ) str(mylist) # List of 3 # $ vector : int [1:10] 1 2 3 4 5 6 7 8 9 10 # $ matriz : int [1:2, 1:2] 1 2 3 4 # $ dataframe:\u0026#39;data.frame\u0026#39;: 3 obs. of 2 variables: # ..$ num: int [1:3] 1 2 3 # ..$ let: chr [1:3] \u0026#34;a\u0026#34; \u0026#34;b\u0026#34; \u0026#34;c\u0026#34; Propiedades de una lista\nEl largo de una lista es igual al número de elementos que contiene, sin importar de qué tipo o clase sean.\nlength(mylist) # [1] 3 Dado que una lista siempre tiene una sola dimensión, la función dim() nos devuelve NULL.\ndim(mylist) # NULL Las listas tienen clase list, sin importar qué elementos contienen.\nclass(mylist) # [1] \u0026#34;list\u0026#34; Extraer elementos de una lista # Para una lista, puede utilizar corchetes simples [ ] o corchetes dobles [[ ]], dependiendo de lo que desee extraer.\nmylist \u0026lt;- list(myvector, mymatrix, mydf) mylist # [[1]] # [1] 1 2 3 4 5 6 7 8 9 10 # # [[2]] # [,1] [,2] # [1,] 1 3 # [2,] 2 4 # # [[3]] # num let # 1 1 a # 2 2 b # 3 3 c Elementos en esta lista, las sublistas:\n[[1]] - Vector (myvector)\n[[2]] - Matriz (mymatrix)\n[[3]] - dataframe (mydf)\nPodemos utilizar [ ] para extraer una sublista que sólo contenga, por ejemplo, el primer elemento, que es el vector\nmylist[1] # [[1]] # [1] 1 2 3 4 5 6 7 8 9 10 Tambien podemos utilizar [[ ]] para extraer un único elemento, que tendrá la clase de ese elemento.\nmylist[[1]] # [1] 1 2 3 4 5 6 7 8 9 10 En este caso para obtener el primer elemento de esta sublista, emplearemos lo visto en la clase anterior sobre dataframe.\nmylist[[1]][1] # [1] 1 Asignar nombres a cada sublista\nnames(mylist) = c(\u0026#34;vector\u0026#34;, \u0026#34;matriz\u0026#34;, \u0026#34;dataframe\u0026#34;) Para obtener una sublista, podemos emplear lo visto para dataframe, empleando el nombre de la sublista.\nmylist$vector # [1] 1 2 3 4 5 6 7 8 9 10 O puedes usar:\nmylist[[\u0026#34;vector\u0026#34;]] # [1] 1 2 3 4 5 6 7 8 9 10 Entonces para obtener el primer elemento de la sublista vector puedo hacerlo de la siguiente manera:\n# Opcion A mylist[[1]][1] # [1] 1 # Opcion B mylist$vector[1] # [1] 1 # Opcion C mylist[[\u0026#34;vector\u0026#34;]][1] # [1] 1 Otra forma de extraer elementos de una lista # Extraer el 3er elemento de la primera sublista.\n# Opcion A mylist[[1]][3] # [1] 3 # Opcion B mylist[[c(1, 3)]] # [1] 3 NOTA: Dentro del c(), primero colocamos la sublista y luego el elemento. c(sublista, elemento).\nExtraer multiples sublistas # Si queremos las dos primeras sublistas, usaremos [] para seleccionarlas\n# Opcion A mylist[c(1, 2)] # $vector # [1] 1 2 3 4 5 6 7 8 9 10 # # $matriz # [,1] [,2] # [1,] 1 3 # [2,] 2 4 # Opcion B mylist[c(\u0026#34;vector\u0026#34;, \u0026#34;matriz\u0026#34;)] # $vector # [1] 1 2 3 4 5 6 7 8 9 10 # # $matriz # [,1] [,2] # [1,] 1 3 # [2,] 2 4 NOTA: Son [] simples para llamar sublistas y [[]] para nombrar a los elementos de las sublistas.\nOperaciones en una lista # Podemos realizar operaciones si especificamos a que elemento de la lista queremos ejecutarle alguna operacion.\nmylist[[1]] * 2 # [1] 2 4 6 8 10 12 14 16 18 20 NOTA: No olvides los [[]] para indicar los elementos contenidos en la lista.\nFiltrar algunos elementos # Podemos emplear nuestros conocimientos previos para buscar elementos en una sublista:\n# Ejemplo 1 mylist$matriz[mylist$matriz == 2] # [1] 2 # Ejemplo 2 mylist$dataframe[mylist$dataframe == \u0026#34;a\u0026#34;] # [1] \u0026#34;a\u0026#34; Sustituir un elemento # mylist$matriz[1] \u0026lt;- 5 mylist$matriz # [,1] [,2] # [1,] 5 3 # [2,] 2 4 Eliminar una sublista # Para eliminar una sublista debemos darle el valor de NULL. En este caso eliminaremos el primera sublista (elemento) que es el vector.\nmylist[[1]] = NULL mylist # $matriz # [,1] [,2] # [1,] 5 3 # [2,] 2 4 # # $dataframe # num let # 1 1 a # 2 2 b # 3 3 c Agregar una nueva sublista # Para agregar una sublista usaremos $.\nmylist$occupation \u0026lt;- \u0026#34;Analista de datos\u0026#34; mylist # $matriz # [,1] [,2] # [1,] 5 3 # [2,] 2 4 # # $dataframe # num let # 1 1 a # 2 2 b # 3 3 c # # $occupation # [1] \u0026#34;Analista de datos\u0026#34; Agregar una lista existente # frutas \u0026lt;- list( c(\u0026#34;manzana\u0026#34;, \u0026#34;pera\u0026#34;, \u0026#34;uva\u0026#34;)) mylist \u0026lt;- c(mylist, \u0026#34;frutas\u0026#34; = frutas) mylist # $matriz # [,1] [,2] # [1,] 5 3 # [2,] 2 4 # # $dataframe # num let # 1 1 a # 2 2 b # 3 3 c # # $occupation # [1] \u0026#34;Analista de datos\u0026#34; # # $frutas # [1] \u0026#34;manzana\u0026#34; \u0026#34;pera\u0026#34; \u0026#34;uva\u0026#34; Usar append() # Sirve para agregar elementos a una lista. Toma tres argumentos: la lista original, los elementos a añadir y la posición en la vamos a añadirlos.\nappend(mylist, #lista original list(c(\u0026#34;azul\u0026#34;, \u0026#34;rojo\u0026#34;, \u0026#34;verde\u0026#34;, \u0026#34;negro\u0026#34;)), #elementos por agregar en formato de lista after = 2 # Posicion ) # $matriz # [,1] [,2] # [1,] 5 3 # [2,] 2 4 # # $dataframe # num let # 1 1 a # 2 2 b # 3 3 c # # [[3]] # [1] \u0026#34;azul\u0026#34; \u0026#34;rojo\u0026#34; \u0026#34;verde\u0026#34; \u0026#34;negro\u0026#34; # # $occupation # [1] \u0026#34;Analista de datos\u0026#34; # # $frutas # [1] \u0026#34;manzana\u0026#34; \u0026#34;pera\u0026#34; \u0026#34;uva\u0026#34; Ejercicios # Crea una lista con los nombres de los amigos, Rosita, Rachel y Joey. La lista debe llamarse friends. NOTA: Cada amigo es una sublista.\nAgrega a la lista el nombre de Carlos, despues de Rachel. Empleando la funcion append()\nAgrega a los amigos Monica y Carmen, al final de la lista. Emplea c().\nElimina a Carlos de la lista de friends.\nRespuestas Fuentes (Viernes 3): EveliaCoss/ViernesBioinfo2024 Viernes de Bioinformatica en el LIIGH, 2 febrero - 2 de agosto 2024 HTML 18 1 ","date":"16 febrero 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-3/","section":"Publicaciones","summary":"Matrices y Listas.","title":"Manipulación de datos con R base (matrix y lista)","type":"posts"},{"content":"Vector y dataframe.\nPaquetes Necesarios # install.packages(\u0026#34;rmarkdown\u0026#34;) install.packages(\u0026#34;dplyr\u0026#34;) install.packages(\u0026#34;reshape2\u0026#34;) install.packages(\u0026#34;remotes\u0026#34;) Estructura de Datos/Tipos de Datos # Existen 5 estructuras de datos en R # Las estructuras de datos son objetos que contienen datos. Cuando trabajamos con R, lo que estamos haciendo es manipular estas estructuras.\nTIpo Declaracion de la variable Conversion Dimensiones Contenido Vector c(), seq(), rep(), valorI:valorN; seq_len() as.vector() 1 homogenea Lists list() as.list() 1* homogenea Matrix matrix(valores, nrow = x, ncol = y) as.matrix() 2 heterogenea Dataframe data.frame() as.dataframe() 2 heterogenea Tambien estan los array pero son poco usados en R.\nPara conocer la estructura del archivo debes usar str().\nUna lista puede contener matrices en su interior, vectores, funciones, etc.\nClases Declaración de la variable Conversión de formato Reglas numeric numeric() as.numeric() FALSE -\u0026gt; 0, TRUE -\u0026gt; 1; \u0026ldquo;1\u0026rdquo;, \u0026ldquo;2\u0026rdquo;, \u0026hellip; -\u0026gt; 1,2, \u0026hellip;; \u0026ldquo;A\u0026rdquo; -\u0026gt; NA integer integer() as.integer() FALSE -\u0026gt; 0, TRUE -\u0026gt; 1; \u0026ldquo;1\u0026rdquo;, \u0026ldquo;2\u0026rdquo;, \u0026hellip; -\u0026gt; 1,2, \u0026hellip;; \u0026ldquo;A\u0026rdquo; -\u0026gt; NA double double() as.double() character character() as.character() 1,2, \u0026hellip; -\u0026gt; \u0026ldquo;1\u0026rdquo;, \u0026ldquo;2\u0026rdquo;, \u0026hellip;; FALSE -\u0026gt; \u0026ldquo;FALSE\u0026rdquo;; TRUE -\u0026gt; \u0026ldquo;TRUE\u0026rdquo; logical logical() as.logical() 0 -\u0026gt; FALSE, other numbers -\u0026gt; TRUE; (\u0026ldquo;FALSE\u0026rdquo;, \u0026ldquo;F\u0026rdquo;) -\u0026gt; FALSE; (\u0026ldquo;TRUE\u0026rdquo;, \u0026ldquo;T\u0026rdquo;) -\u0026gt; TRUE, other character -\u0026gt; NA factor factor() as.factor() Si queremos saber la clase de la variable debemos usar class(), aunque tambien str() te dice esta información.\nNOTA: as.integer() convierte los numeros a enteros. Ejemplo: as.integer(2.5) = 2. En cambio, as.double() permite que los numeros contengan decimales.\nRecordatorio: Operadores # Aritméticos Comparación Argumentos lógicos (Logical Operators) + Adición / suma \u0026lt; Menor que !x - Not x (logical NOT) - Sustracción / resta \u0026gt; Mayor que x \u0026amp; y OR x AND y - (logical AND) * Multiplicación \u0026lt;= Menor o igual que x \u0026amp;\u0026amp; y - identico / OR %% División \u0026gt;= Mayor o igual que xor(x,y) Funcion OR ^ OR ** Exponencial == Igual a %in% pertenece a %/% División integral != Diferente de Otra forma de escrir OR es x | y OR x || y.\nJerarquía de operaciones # En R, al igual que en matemáticas, las operaciones tienen un orden de evaluación definido.\nCuanto tenemos varias operaciones ocurriendo al mismo tiempo, en realidad, algunas de ellas son realizadas antes que otras y el resultado de ellas dependerá de este orden.\nOrden Operadores 1 ^ 2 * / 3 + - 4 \u0026lt; \u0026gt; \u0026lt;= \u0026gt;= == != 5 ! 6 \u0026amp; 7 OR Manipulación de datos con R base (vector y dataframe) # Vector: Formas de declarar un vector # # Declarar el vector con 5 posiciones (del 1 al 5) # Opcion A - c() x \u0026lt;- c(1,2,3,4,5) # Opcion B - valorI:valorN x \u0026lt;- 1:5 x # Opcion C - seq(inicio, final) x \u0026lt;- seq(1,5) x # Opcion D -seq_len(final) x \u0026lt;- seq_len(5) x \\# Opcion E - rep(valor, veces) y \u0026lt;- c(rep(1,5), rep(c(3,5),5)) y Vector: Estructura y clases de variables # Conocer la estructura de un vector mediante la función str(). El vector es de tipo integer y va de 1 a 5.\nstr(x) Para solo ver el tipo usamos la función class()\nclass(x) Ejercicios # x \u0026lt;- c(TRUE, TRUE, FALSE, FALSE) x x \u0026lt;- as.factor(x) Vamos a crear un nuevo vector con los nombres de los participantes a esta clase\nClaseBioinfo \u0026lt;- c(\u0026#34;Jose Luis\u0026#34;, \u0026#34;Diego\u0026#34;, \u0026#34;Rosita\u0026#34;, \u0026#34;Yuri\u0026#34;, \u0026#34;Ulises\u0026#34;, \u0026#34;Tere\u0026#34;, \u0026#34;Chucho\u0026#34;) ClaseBioinfo #ver estructura str(ClaseBioinfo) Extraer información\nClaseBioinfo ==\u0026#34;Ulises\u0026#34; ClaseBioinfo ==\u0026#34;Chucho\u0026#34; Cuando son mas de un valor usamos %in%\nClaseBioinfo %in% c(\u0026#34;Ulises\u0026#34;, \u0026#34;Chucho\u0026#34;) Ahora tambien podemos usar:\nClaseBioinfo == c(\u0026#34;Ulises\u0026#34;, \u0026#34;Chucho\u0026#34;) Podemos declarar un vector de los tratamientos\n#Opcion A y \u0026lt;- rep(c(\u0026#34;Control\u0026#34;, \u0026#34;Condicion\u0026#34;),5) #Opcion B y \u0026lt;- c(rep(\u0026#34;Control\u0026#34;,5), rep(\u0026#34;Condicion\u0026#34;,5)) y Dataframe # Dataframe: Formas de declarar un vector # x \u0026lt;- 1:4 n \u0026lt;- 10 M \u0026lt;- c(10, 35) y \u0026lt;- 2:4 Podemos declarar los componentes de un Dataframe en variables separadas y luego juntarlo o en una sola linea.\nx \u0026lt;- 1:4; n \u0026lt;- 10; M \u0026lt;- c(10, 35); y \u0026lt;- 2:4 Vamos a crear dataframes apartir de estos vectores.\ndata.frame(x,n) data.frame(x, M) Dataframe en una sola linea # data.frame(x = 1:4, n = 10) data.frame(x = 1:4, M = c(10,35)) Dataframe: Ejercicio # data.frame(x, y) NOTA: El número de filas y columnas debe ser el mismo número. Existen excepciones al usar paquetes como dplyr.\nDataframe: Estructura y clases de variables # Cada columna es una variable la cual puede ser de un tipo o clase.\ndf \u0026lt;- data.frame(genes = paste0(\u0026#34;Gen\u0026#34;, seq_len(8)), expression = c(3.8, 5.5, 6.3, 1.8, 9, rep(3,3)), treatment =c(rep(\u0026#34;Control\u0026#34;, 4), rep(\u0026#34;Condicion1\u0026#34;,4))) head(df) Es un dataframe con 3 variables(genes, expression y treatment) y cada uno tiene su propia clase.\nstr(df) Dataframe con los datos de la clase # Vamos a crear un nuevo vector con las edades, llamado edad, posteriormente, vamos a combinarlo con el vector que creamos previamente ClaseBioinfo\n# declarar un vector e incorporarlo en el dataframe edad \u0026lt;- c(31,32, 30, 30, 28, 32, 29) # Almacenar el dataframe ClaseBioinfo \u0026lt;- data.frame(ClaseBioinfo, edad) ClaseBioinfo Agregar una columna en el dataframe # Tambien podemos agregar nuevas columnas usando el simbolo $ de la siguiente manera:\nClaseBioinfo$formacion \u0026lt;- c(\u0026#34;medicina\u0026#34;, \u0026#34;nutricion\u0026#34;, \u0026#34;medicina\u0026#34;, \u0026#34;biologia\u0026#34;, \u0026#34;medicina\u0026#34;, \u0026#34;medicina\u0026#34;, \u0026#34;biologia\u0026#34;) head(ClaseBioinfo,3) El dataframe tiene 7 filas y 3 columnas.\nstr(ClaseBioinfo) Dataframe, completando espacios faltantes # Cuando creamos la columna formacion en el dataframe al contener 9 elementos el dataframe, R repite 3 veces los valores contenidos en la columna formacion para llenar los 9 espacios.\nClaseBioinfo \u0026lt;- c(\u0026#34;Jose Luis\u0026#34;, \u0026#34;Diego\u0026#34;, \u0026#34;Rosita\u0026#34;, \u0026#34;Yuri\u0026#34;, \u0026#34;Ulises\u0026#34;, \u0026#34;Tere\u0026#34;, \u0026#34;Chucho\u0026#34;, \u0026#34;Evelia\u0026#34;, \u0026#34;Fulanito\u0026#34;) edad \u0026lt;-c(31,32, 30, 30, 28, 32, 29,29,30) ClaseBioinfo \u0026lt;- data.frame(ClaseBioinfo, edad) # crear dataframe ClaseBioinfo$formacion \u0026lt;- c(\u0026#34;medicina\u0026#34;, \u0026#34;nutricion\u0026#34;, \u0026#34;medicina\u0026#34;) head(ClaseBioinfo, 3) Ejercicios: # A partir del siguiente ejemplo, completa los siguientes ejercicios:\ndf \u0026lt;- data.frame(genes = paste0(\u0026#34;Gen\u0026#34;, seq_len(8)), expression = c(3.8, 5.5, 6.3, 1.8, 9, rep(3,3)), treatment =c(rep(\u0026#34;Control\u0026#34;, 4), rep(\u0026#34;Condicion1\u0026#34;,4))) Convierte la columna 3 perteneciente a tratamiento (treatment) a factor. NOTA: En este ejemplo, solo tenemos dos condiciones \u0026ldquo;Control\u0026rdquo; y \u0026ldquo;Condicion1\u0026rdquo;. Por lo que, solo deben hacer dos niveles (levels).\nRenombra las filas con los nombres de los genes y elimina la columna 1. NOTA: Recuerda que para renombrar las filas es rownames() y las columnas se usa colnames().\nRespuestas # Modifica la columna 3 perteneciente a tratamiento (treatment) a factor. df$treatment \u0026lt;- as.factor(df$treatment) # conversion a factor str(df) NOTA: El signo de dinero $ nos permite seleccionar una columna (variable) de un dataframe.\nRenombra las filas con los nombres de los genes y elimina la columna 1. rownames(df) \u0026lt;- df$genes # renombrar df \u0026lt;- df[,-1] # eliminar columna 1 Index # Por medio de un index podemos:\n1) Obtener la información de un dato en específico. 2) Modificar un dato en específico. 3) Eliminarlo un dato en específico. Podemos hacer la pregunta de dos maneras, 1) ¿Cuál es el nivel de expresión del Gen2? O 2) ¿Que gen contiene una expresión de 5.5?\nEjercicios # ¿Cuál es el nivel de expresión del Gen2? NOTA: Recuerda que un dataframe tiene dos dimensiones 1) fila y 2) columna, dataframe[fila, columna]. Estos nos ayudaran como coordenadas en el dataframe.\n# Opcion A df[2,1] # [1] 5.5 # Opcion B df$expression[2] # [1] 5.5 # Opcion C df[\u0026#34;Gen2\u0026#34;,] # expression treatment # Gen2 5.5 Control df[\u0026#34;Gen2\u0026#34;,1] # [1] 5.5 # Opcion D df[\u0026#34;Gen2\u0026#34;,\u0026#34;expression\u0026#34;] # [1] 5.5 ¿Que gen contiene una expresión de 1.8? # Opcion A df[df[, \u0026#34;expression\u0026#34;] == 1.8,] # expression treatment # Gen4 1.8 Control df[df[, 1] == 1.8,] # expression treatment # Gen4 1.8 Control # Opcion B df[df == 1.8,] # expression treatment # Gen4 1.8 Control # Opcion C df[df$expression == 1.8,] # expression treatment # Gen4 1.8 Control # Opcion D subset(df, expression == 1.8) # expression treatment # Gen4 1.8 Control Index usando un vector # Podemos crear una variable i que será nuestro index para extraer valores\nx \u0026lt;- 1:5 i \u0026lt;- c(1, 3) # el index es numero y nos permite extraer la posicion 1 y 3 del vector x[i] Usar el vector i para obtener las filas 1 y 3\ndf[i,] # expression treatment # Gen1 3.8 Control # Gen3 6.3 Control NOTA: Recuerda que una matriz esta compuesta de filas y columnas.\nEjercicio 1 - Vector # # Declarar el vector con 5 posiciones (del 1 al 5) x \u0026lt;- 1:5 x # Observar el componente / posicion 3 x[3] # Observar multiles posiciones x[c(1,3)] x[c(1:3,5)] # OR x[-4] # Sustituir el valor de la posicion 3 x[3] \u0026lt;- 20 x # Eliminar la posicion 1 x[-1] Ejercicio 2 - Matriz # # Genera una matriz de tamano 2 x 3 (filas, columnas) (rows, columns) x \u0026lt;- matrix(1:6, 2, 3) x # # Sustituir los valores presentes en la columna 3 de la matriz x[, 3] \u0026lt;- 21:22 x # Visualizacion en modo de matriz x[, 3, drop = FALSE] # Eliminar la columna 1 x[, -1] # Eliminar multiples columnas y Visualizacion en modo de matriz x[, -(1:2), drop = FALSE] # es lo mismo que x[, 3, drop = FALSE] Ejercicio 3 - Lista # # Opcion A n=c(2, 3, 5) s=c(\u0026#34;aa\u0026#34;, \u0026#34;bb\u0026#34;, \u0026#34;cc\u0026#34;, \u0026#34;dd\u0026#34;, \u0026#34;ee\u0026#34;) x=list(n, s, 3) x # Opcion B x \u0026lt;- list(c(2, 3, 5), c(\u0026#34;aa\u0026#34;, \u0026#34;bb\u0026#34;, \u0026#34;cc\u0026#34;, \u0026#34;dd\u0026#34;, \u0026#34;ee\u0026#34;), 3) x Ejercicio 4 - Acceder a los elementos de la lista # x[2] # 2do elemento, los datos con titulo x[[2]] # 2do elemento, solo los datos x[c(2, 3)] # 2ndo y 3er elemento Acceder a un dato de un elemento\nx[[c(2, 3)]] # dato 3 del elemento 2 Ejercicio 5 - Operaciones # # Ejercicio 1 x \u0026lt;- 1:10 # Declarar un vector x[x \u0026gt;= 5] \u0026lt;- 20 # todos los numeros que sean mayor o igual a 5 sustituir por 20 x # A partir del resultado de x realiza lo siguiente x[x == 1] \u0026lt;- 25 # todos los numeros que sean igual a 1 sustituir por 25 x # Ejercicio 2 x \u0026lt;- matrix(1:20, 4, 5) #Genera una matriz de tamano 4 x 5 (filas, columnas) (rows, columns) x # Visualizar la matriz # A partir de la matriz generada realiza lo siguiente x[, 5] \u0026lt;- 51:54 # 1. ¿Qué cambios existieron en la matriz? x # Visualizar la matriz de salida # 2. ¿Cuáles son los valores presentes en la columna 3 de la matriz? x[, 5] #3. ¿Como cambia el valor de salida cuando coloco drop= FALSE? x[, 5, drop = FALSE] Ejercicio 6 - Operaciones # # Ejercicio 3. # 1. ¿Como cambia el valor de salida al eliminar la columna 3? x \u0026lt;- matrix(1:16, 4, 4) #Genera una matriz de tamano 4 x 5 (filas, columnas) (rows, columns) x[, -1] # 2. ¿Como cambia el valor de salida cuando coloco drop= FALSE? x[, -(1:2), drop = FALSE] # 3. Renombra las filas y columnas empleando rownames() y colnames(). En fila coloca los nombres: Gen 1, Gen 2, Gen 3 y Gen 4. Y en columnas coloca los nombres: SRA_1,SRA_2 Y SRA_3 # Ejercicio 4. Realiza las siguientes operaciones # 1. Sumatoria x \u0026lt;- 1:4 y \u0026lt;- 1:2 z \u0026lt;- x + y z # 2. Multiplicacion x \u0026lt;- 1:4 a \u0026lt;- 10 z \u0026lt;- a * x z Fuentes (Viernes 2): EveliaCoss/ViernesBioinfo2024 Viernes de Bioinformatica en el LIIGH, 2 febrero - 2 de agosto 2024 HTML 18 1 ","date":"9 febrero 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-2/","section":"Publicaciones","summary":"Vector y dataframe.","title":" Manipulación de datos con R base (vector y dataframe)","type":"posts"},{"content":"Genomic Scientist. Interested in bioinformatics, AI and statistics.\n","date":"9 febrero 2024","externalUrl":null,"permalink":"/authors/sofia/","section":"Authors","summary":"Genomic Scientist.","title":"Sofia Guadalupe Salazar Magaña","type":"authors"},{"content":"RStudio es un entorno de desarrollo integrado (IDE) para R. Un IDE es una aplicación que ayuda a los programadores a desarrollar código de una manera eficiente. Nos proporciona una interfaz para poder editar código fuente, herramientas de ambiente, visualización, terminal y consola.\nRStudio Desktop es una aplicación que se utiliza ampliamente para desarrollar programas en R, pero también podemos accesar al IDE de RStudio a través con RStudio Server, a través de un navegador web.\n¿Cómo descargamos RStudio? # Podemos descargar RStudio desde esta página. Ya realizamos el paso 1: Install R.\nEn el paso 2: Install R studio, nos debería detectar el sistema operativo, descarguemos la versión recomendada en el botón azul y sigamos las instrucciones de instalación.\nPartes de Rstudio # Cambiando el Aspecto de Rstudio # Podemos cambiar la forma en que se ve la aplicación desde Editar \u0026gt; Preferencias \u0026gt; Apariencia, escogemos el tema que nos guste y damos click en Aplicar y luego OK\nComenzando con R y RStudio: 1. R Project # Al comenzar a trabajar con R y RStudio, ya sea para crear un programa para un proyecto, crear una aplicación, presentación, blog, paquete, etc, es recomendado crear un R project.\nAl crear un R project, se creará un folder en donde estarán todos los documentos, fotos, scripts, etc. que usaremos en ese projecto. Es una forma organizada y práctica de trabajar con R.\n¿Cómo iniciamos un R project? # Vayamos en la parte superior al menú Archivos \u0026gt; Nuevo Proyecto.\nSeleccionamos la opción de Nuevo Directorio\nSeleccionamos el tipo de projecto que vamos a iniciar, en nuestro caso Nuevo Proyecto.\nNombramos el folder que creamos y seleccionamos en donde queremos que se almacene.\n¡Felicidades, acabas de crear un R project! Si vamos al folder en donde creamos nuestro proyecto, podemos observar que se creó un archivo con terminación Rproj, este es un archivo que contiene la configuración específica para nuestro proyecto.\nEste archivo también establece como directorio de trabajo el folder en donde iniciamos el proyecto (puedes comprobarlo desde la consola de RStudio, escribiendo el comando getwd()). Esto es muy conveniente puesto que así podemos asegurarnos de que vamos a acceder a los archivos que estén exclusivamente en nuestro entorno de trabajo.\ngetwd() Cambiar directorio de trabajo\nsetwd(\u0026#34;/Users/sofiasalazar/nuevodirectorio\u0026#34;) # Mac y Linux, iOS, ejemplo de Sofi setwd(\u0026#34;C:/Users/ecoss/OneDrive - CINVESTAV/Documentos/Posdoc_LIIGH/Clases_Cursos_Medicina_Guadalajara2023\u0026#34;) # Windows Comenzando con nuestro proyecto: Crear un Rscript # Para comenzar a trabajar en un proyecto, necesitamos crear un archivo para escribir nuestro programa. Entra en Archivo \u0026gt; Nuevo Archivo.\nPodemos ver que tenemos distintas opciones de archivos que podemos crear, en este caso vamos a crear nuestro primer Rscript.\nCrear Un Script # ¿Qué es un Rscript? Es simplemente un archivo de texto con las instrucciones de nuestro algoritmo escritas en el lenguaje de R. También contiene nuestros comentarios escritos con #.\nIntenta escribir tu primer Rscript en el editor, copiando el siguiente algoritmo para realizar una suma:\na \u0026lt;- 2 b \u0026lt;- 3 suma = a + b suma Selecciona todo el código, después ve a la parte superior de la ventana del editor y da click en el botón Run. Enseguida de esto, en la consola se ejecutará tu código y podrás ver el siguiente resultado:\nTambién pueden ejecutar tu código línea por línea, poniendo tu cursor al principio o al final de la linea y presionando las teclas Control + Enter o Command + Enter. Meme super importante R session # Al momento de comenzar a ejecutar líneas de código, guardar valores en variables y cargar librerías, estaremos guardando esto en nuestra \u0026ldquo;sesión de R\u0026rdquo;. Esto es un \u0026ldquo;ambiente\u0026rdquo; que puedes guardar al finalizar de trabajar y lo que guardaste lo puedes cargar a Rstudio la próxima vez que vayas a continuar trabajando.\nPara guardar tu sesión de R:\nsave.image(file = \u0026#34;/una/direccion/enTu/PC/sesionR_miPrograma.RData\u0026#34;) Para cargar tu sesión de R:\nload(file = \u0026#34;/una/direccion/enTu/PC/sesionR_miPrograma.RData\u0026#34;) También puedes guardar y cargar solo alguna variable:\nsave(variable, file = \u0026#34;/una/direccion/enTu/PC/variable.RData\u0026#34;) load(\u0026#34;/una/direccion/enTu/PC/variable.RData\u0026#34;) # ahora \u0026#34;variable\u0026#34; estara en tu ambiente Buenas practicas # Buenas prácticas de programación: Set up de tu trabajo Es buena idea comenzar todos tus scripts con las mismas líneas de código que indiquen lo siguiente:\nTítulo de tu programa Autor (author): Su nombre Fecha (date): Fecha de creación Propósito general de tu programa (Description): ¿Para qué sirve el programa? Ej: El siguiente programa realiza la suma de dos numeros enteros a partir de la entrada del usuario y posteriormente la imprime en pantalla. Usage ¿Cómo se utiliza? Paquetes (packages) Directorio de trabajo (Working directory): En que carpeta se encuentra tu datos y programa. Directorio de input: aquí estan guardados los datos que vas a usar en el programa Directorio de output: aquí es donde vas a guardar tus resultados Argumentos (Arguments) Información de entrada (Data Inputs): Ej: Solo numeros enteros (sin decimales). Información de salida (Outpus): Graficas, figuras, tablas, etc. Líneas en donde cargues los datos que vas a usar Meme super importante 2 Buenas prácticas de programación: Set up de tu trabajo # # Mi programa # Tu nombre # Fecha: dd-mm-aaaa # Este script ejecuta xxx utilizando como input xxx y dando como output xxx # Input dir indir \u0026lt;- \u0026#34;/Users/sofiasalazar/miPrograma/input/\u0026#34; # Output dir outdir \u0026lt;- \u0026#34;/Users/sofiasalazar/miPrograma/output/\u0026#34; # Librerias library(ggplot2) library(tidyverse) # Cargar input datos_file \u0026lt;- paste0(indir,\u0026#34;misDatos.csv\u0026#34;) datos_file datos \u0026lt;- read.csv(datos_file) load(file = paste0(indir, \u0026#34;variable.RData\u0026#34;)) load(file = paste0(indir, \u0026#34;sesionR_miPrograma.RData\u0026#34;)) ¿Qué es una librería? # En programación, una librería es una colección de código pre-escrito. Una librería contiene una \u0026ldquo;paquete\u0026rdquo; o \u0026ldquo;librería\u0026rdquo; de funciones que podemos utilizar si descargamos e importamos esa librería a nuestro programa.\nComo mencioné anteriormente, al descargar R, también descargamos una serie de librerías, llamadas base R packages. Sin embargo, dependiendo del problema que queramos resolver con nuestro programa, necesitaremos librerías que nos permitan hacer otras cosas.\nExisten distintas formas de instalar librerías.\nInstalar librerías: CRAN # Instalación desde el repositorio de CRAN: podemos descargar paqueterías de CRAN de dos formas: La primera, desde consola con el siguiente comando:\ninstall.packages(\u0026#34;ggplot2\u0026#34;) La segunda, desde el menú Herramientas \u0026gt; Instalar paqueterías. En la ventana, ingresamos el nombre de la librería y click en Instalar.\n###Instalar librerías: Bioconductor\nAlternativamente, podemos instalar paqueterías de Bioconductor, que es otro repositorio de paquetes diseñados para el análisis de datos genómicos, por ejemplo para hacer análisis estadísticos, anotación, acceso a bases de datos públicas, etc.\nHay muchas librerías que están tanto en CRAN como en Bioconductor, pero también hay librerías específicas para uno de ellos. Para poder instalar desde bioconductor, necesitamos primero instalar el \u0026ldquo;instalador de bioconductor\u0026rdquo;:\ninstall.packages(\u0026#34;BiocManager\u0026#34;) # Esto es necesario solo 1 vez Después, instalamos la librería que queremos y la cargamos:\nBiocManager::install(\u0026#34;DESeq2\u0026#34;) library(DESeq2) Puedes ver librerías y sus manuales en la página de Bioconductor o cuando ingresamos en consola:\nbrowseVignettes(\u0026#34;DESeq2\u0026#34;) Instalar librerías: Source # Podemos instalar librerías si tienes los archivos en tu PC, esto es útil cuando no tienes acceso a internet.\ninstall.packages(\u0026#34;~/Downloads/ggplot2_1.0.1.tar.gz\u0026#34;, type=\u0026#34;source\u0026#34;, repos=NULL) O desde GitHub:\ninstall.packages(\u0026#34;remotes\u0026#34;)# instalar el paquete remotes remotes::install_github(\u0026#34;mitchelloharawild/icons\u0026#34;) Cuando hay funciones que tienen el mismo nombre en varios paquetes, lo mejor es que le digas a R de que paquete viene esa función mediante los ::. Ejemplo: dplyr::select()\n¿Cómo podemos verificar que paquetes tenemos? # En la ventana inferior derecha, existe una pestaña que se llama \u0026ldquo;Packages\u0026rdquo; que contendra la lista de paquetes instalados en tu computadora, su descripción corta y su versión.\nTambien en esta pestaña podemos instalar paquetes dandado click en INSTALL.\nEliminación de paquetes # En algunas ocasiones vamos a tener que actualizar las versiones de los paquetes, pero primero dedes eliminar la versión anterior. Dando click en el botón que contiene una X que esta al final de la fila en cada programa.\nTambién puedes usar codigo para eliminar el paquete:\nremove.packages(\u0026#34;package-to-remove\u0026#34;) Cargar paquetes en el ambiente de R # Opción A: Emplear la función library para cargar en el ambiente el paquete.\nlibrary(ggplot2) Opción B: Dando click a la casilla que indica el paquete. Para dejar de usarlo da de nuevo click en esa casilla para que deje de estar marcada.\nBuenas prácticas al finalizar tu programa # Guarda tu output write.csv(datos_procesados, file = paste0(outdir, \u0026#34;datos_procesados.csv\u0026#34;)) save(datos_procesados, file = paste0(outdir, \u0026#34;datos_procesados.RData\u0026#34;)) save.image(file = paste0(outdir, \u0026#34;sesionR_miPrograma.RData\u0026#34;) Especifica qué librerías utilizaste y qué versiones Cuando hacemos un programa, puede que en el futuro otras personas lo quieran utilizar, sin embargo, es probable que las librerías que usaste en el momento que escribiste el programa se hayan actualizado.\nEs por eso que al final de TODO programa que escribas, ejecutes y escribas el resultado de correr la siguiente línea.\nsessionInfo() Puedes intentar correr este comando tú, lo que verás impreso en consola son todas las librerías instaladas en tu sesión de R, así como la versión. Entonces así, si alguien quiere reproducir tus resultados en algún momento, deberá instalar las mismas versiones de las librerías que tú utilizaste.\nImportar datos en R # Existen distintos tipos de formatos de datos que podemos ingresar a R para su análisis. Los principales son:\nA) Datos separados por un valor # Por ejemplo por comas (.csv), tab (.tsv) o espacios. Aunque la siguiente función puede leer por cualquier separador.\nread.table(\u0026#34;/path/dataset.csv\u0026#34;, header = TRUE, delim = \u0026#34;,\u0026#34;) read.table(\u0026#34;/path/dataset.tsv\u0026#34;, header = TRUE, delim = \u0026#34;\\t\u0026#34;) read.table(\u0026#34;/path/dataset.\u0026#34;, header = TRUE, delim = \u0026#34;,\u0026#34;) El parámetro header nos dice si considerar la primera fila como nombre de las variables.\nTambién podemos leer un archivo .csv directamente:\nread.csv(\u0026#34;/path/dataset.csv\u0026#34;) Datos en formato CSV # Archivos separados por comas.\nEste ejemplo fue obtenido del repositorio de Github de Cosmoduende.\nDatos en formato TSV # Archivo separado por tabuladores.\nEste ejemplo proviene de la base de datos de Arabidopsis thaliana, la planta modelo en el estudio de la genómica. Este archivo indica el tipo o característica del gen anotado en Araport11.\nSe pueden cargar datos biológicos en formato TSV # -Formato de texto plano - Araport11 Gene Type.txt -Formato GFF: Araport11_GFF3_genes_transposons.current.gff -Formato GTF: Araport11_GTF_genes_transposons.current.gtf - -Formato BED12 - Araport11_pcoding_transcripts.bed\nOtros formatos # B) Archivos tipo RData # Usualmente cargan todo el ambiente o varias variables\nload(\u0026#34;/path/ambiente.RData\u0026#34;) C) Archivos tipo RDS # Se usan para cargar variables, usualmente muy pesadas\nvariable \u0026lt;- readRDS(\u0026#34;/path/variable.RData\u0026#34;) Crea un RProject # Recapitulando las buenas prácticas: # ###### # Script de clase \u0026#34;Intro a R\u0026#34; # Evelia Coss # 9 de octubre 2023 ####### indir = \u0026#34;C:/Users/ecoss/IntroR_BasesDeDatos2023/data/\u0026#34; outdir = \u0026#34;C:/Users/ecoss/IntroR_BasesDeDatos2023/results\u0026#34; Ejercicio: cargar un dataset # Descarga los tres datasets de Marvel dando click en este link, debes tener tres archivos en la misma carpeta charactersStats.csv, heroesInformation.csv y superHeroPowers.csv. Asegúrate de guardarlo en el directorio donde hiciste tu Rproject. En mi caso, guarde los datos en la carpeta data/.\nImporta los archivos en R de la siguiente manera:\ninfoCharacters \u0026lt;- read.csv(\u0026#34;data/heroesInformation.csv\u0026#34;, na.strings = c(\u0026#34;-\u0026#34;, \u0026#34;-99\u0026#34;)) # La opcion na.string nos permite sustituir valores - y -99 por NA infoPowers \u0026lt;- read.csv(\u0026#34;data/superHeroPowers.csv\u0026#34;) infoStats \u0026lt;- read.csv(\u0026#34;data/charactersStats.csv\u0026#34;, na.strings = \u0026#34;\u0026#34;) Visualiza su información con head() o View(). NOTA: Primero debes crear la carpeta data/ antes de descargar los archivos. Recuerda: Verifica que el archivo este en el lugar correcto # Verifica tu directorio de trabajo getwd() 2. Verifica que se encuentren los tres archivos en la carpeta data/.\ndir(\u0026#34;data\u0026#34;) Buenas prácticas # Importar datos ###### # Script de clase \u0026#34;Intro a R\u0026#34; # Evelia Coss # 9 de octubre 2023 ####### indir = \u0026#34;C:/Users/ecoss/OneDrive - CINVESTAV/Documentos/Posdoc_LIIGH/VieRnesBioinfo/ViernesBioinfo_2024/Presentaciones/data/\u0026#34; outdir = \u0026#34;C:/Users/ecoss/OneDrive - CINVESTAV/Documentos/Posdoc_LIIGH/VieRnesBioinfo/ViernesBioinfo_2024/Presentaciones/\u0026#34; infoCharacters \u0026lt;- read.csv(paste0(indir,\u0026#34;heroesInformation.csv\u0026#34;), na.strings = c(\u0026#34;-\u0026#34;, \u0026#34;-99\u0026#34;)) # La opcion na.string nos permite sustituir valores - y -99 por NA infoPowers \u0026lt;- read.csv(paste0(indir,\u0026#34;superHeroPowers.csv\u0026#34;)) infoStats \u0026lt;- read.csv(paste0(indir,\u0026#34;charactersStats.csv\u0026#34;), na.strings = \u0026#34;\u0026#34;) Visualizar su información con head() head(infoCharacters, 5)[1:5] # X name Gender Eye.color Race # 1 0 A-Bomb Male yellow Human # 2 1 Abe Sapien Male blue Icthyo Sapien # 3 2 Abin Sur Male blue Ungaran # 4 3 Abomination Male green Human / Radiation # 5 4 Abraxas Male blue Cosmic Entity Ejercicio: Guarda tu ambiente # Con el comando:\nsave.image(paste0(indir, miAmbiente1.RData)) Fuentes (Viernes 1): EveliaCoss/ViernesBioinfo2024 Viernes de Bioinformatica en el LIIGH, 2 febrero - 2 de agosto 2024 HTML 18 1 ","date":"2 febrero 2024","externalUrl":null,"permalink":"/posts/viernes-de-bioinformatica-2024/viernes-1/","section":"Publicaciones","summary":"RStudio es un entorno de desarrollo integrado (IDE) para R.","title":"Introduccion a Rstudio","type":"posts"},{"content":"","date":"10 octubre 2010","externalUrl":null,"permalink":"/authors/israel/","section":"Authors","summary":"","title":"Israel","type":"authors"},{"content":" Viernes 1. Información general del curso e Introducción a R # Introduccion a Rstudio 2 febrero 2024\u0026middot;1991 palabras\u0026middot; loading \u0026middot; loading Sofia Guadalupe Salazar Magaña ,\u0026nbsp; Evelia Lorena Coss-Navarrete R Tutorial Rstudio Viernes RStudio es un entorno de desarrollo integrado (IDE) para R. Fecha: Viernes 2 de febrero 2024\nInstructora: Dra. Evelia Coss\nPresentación: Introducción a R\nLecturas y cursos recomendados:\nR for dummies\nR for beginners\nR para principiantes\nViernes 2. Manipulación de datos con R base (vector y dataframe) # Manipulación de datos con R base (vector y dataframe) 9 febrero 2024\u0026middot;1866 palabras\u0026middot; loading \u0026middot; loading Evelia Lorena Coss-Navarrete ,\u0026nbsp; Sofia Guadalupe Salazar Magaña Rstudio Viernes R Vector y dataframe. Fecha: Viernes 9 de febrero 2024\nInstructora: Dra. Evelia Coss\nPresentación: Manipulación de datos con R base (vector y dataframe)\nLecturas y cursos recomendados:\nR for dummies\nR for beginners\nR para principiantes\nGrabación: Viernes 3. Manipulación de datos con R base (matrix y lista) # Manipulación de datos con R base (matrix y lista) 16 febrero 2024\u0026middot;2030 palabras\u0026middot; loading \u0026middot; loading Evelia Lorena Coss-Navarrete Rstudio Viernes R Matrices y Listas. Fecha: Viernes 16 de febrero 2024\nInstructora: Dra. Evelia Coss\nPresentación: Manipulación de datos con R base (matrix y lista)\nGrabación:\nViernes 4. Introducción a Rmarkdown # Introducción a Rmarkdown 29 julio 2024\u0026middot;51 palabras\u0026middot; loading \u0026middot; loading Alejandra Rstudio Viernes R ¿Que es y para que sirve Rmarkdown? Fecha: Viernes 23 de febrero 2024\nInstructora: LCG Alejandra Schafer\nPresentación: Introducción a Rmarkdown\nGrabación:\nViernes 5. Terapia de Bioinfo grupal (opcional) # Fecha: Viernes 1 de marzo 2024\nInstructora: Dr. Israel Aguilar\nPresentación: Resolucion de problemas\nGrabación: Viernes 6. Manipulación de datos con funciones de R base # Fecha: Viernes 8 de marzo 2024\nInstructora: Dr. Evelia Coss\nPresentación: Manipulación de datos con funciones de R base\nScript: MarvelvsDCComics_limpieza_script.R\nOutput: Variables Info_data.RData\nGrabación:\nViernes 7. Manipulación de datos usando dplyr # Fecha: Viernes 15 de marzo 2024\nInstructora: Dr. Evelia Coss\nPresentación: Manipulación de datos usando dplyr\nScript: MarvelvsDCComics_Join_script.R\nInput: Vamos a emplear el Output de la clase 6 Info_data.RData\nGrabación:\nViernes 8. Generación de diversos gráficos usando ggplot2 # Fecha: Viernes 22 de marzo 2024\nInstructora: Sofia Salazar\nPresentación: Generación de diversos gráficos usando ggplot2\nScript: script_ggplot_clase.R\nGrabación:\nViernes 9. Terapia de Bioinfo grupal (opcional) # Fecha: Viernes 5 de abril 2024\nInstructores: LBt Josué Guzmán Linares, Dr. Israel Aguilar\nCarpeta con scripts y data: carpeta en gdrive\nGrabación:\nViernes 10. Manipulación de datos para crear un heatmap (ComplexHeatmap) # Fecha: Viernes 12 de abril 2024\nInstructora: Sofia Salazar\nScript: * get_data.R * heatmap_clase.R\nData: *Clase_Heatmaps/data\nManual de Complexheatmap\nGrabación:\nViernes 11 y 12. Bioestadistica parte 1 # Fecha: Viernes 19 de abril 2024\nInstructor: Dr. Obed Ramirez\nGrabación:\nParte 1. Parte 2. Viernes 13. Terapia de Bioinfo grupal (opcional) # Fecha: Viernes 3 de mayo 2024\nInstructor: Dr. Israel Aguilar\nScript: Material\nGrabación:\nViernes 14 y 15. Exploración de datos y elección de pruebas o modelos # Fecha: Viernes 17 de mayo y 24 de mayo 2024\nInstructor: Dr. Domingo Martinez\nMaterial:\nClase 14\nClase 14 - Presentacion\nClase 15\nGrabación:\nClase 14 Clase 15 Viernes 16, 17, 18 y 19. Introducción a Python # Fecha: Viernes 31 de mayo, 7, 14 y 21 de junio 2024\nInstructor: Dr. Shaday Guerrero\nMaterial:\nClase 16 - Plotting and Programming in Python\nClase 17 - Built-in Functions and Help\nClase 18 - plotting y listas\nClase 19- for loops\nGrabación:\nClase 16 Clase 17 Clase 18 Clase 19 Viernes 20 y 21. Introducción a Bash (28 de junio y 5 de julio) # Fecha: Viernes 28 de junio y 5 de julio 2024\nInstructor: Dr. Israel Aguilar\nMaterial:\nInstalación de una terminal de BASH (PREVIO A LA CLASE)\nOpción A: Instalar una Máquina virtual (VM) en sus computadoras\nVideos explicativos: https://youtu.be/Rt0agy32pFo , https://youtu.be/cInUitD6Wws\nManuales de instalación: Manuales De Instalación de Virtual Box y Ubuntu\nOpción B: Instalar Git Bashy MobaXterm\nInstalar Git Bash (seguir las instrucciones de instalación https://miguel-mx.github.io/2024-01-24-ccm-unam-swc/)\nInstalar MobaXterm https://mobaxterm.mobatek.net/\nEjercicios para practicar: RegexOne\nPresentacion:\nClase 21 Grabación:\nClase 20 Clase21 Viernes 22, 23 y 24. Nextflow # Fecha: Viernes 19 y 26 de julio, viernes 2 de agosto 2024\nInstructor: Dr. Israel Aguilar\nGrabación:\nClase22 Clase23\nClase24\nLicencia y términos de uso # El material de los VieRnes de Bioinformatica se distribuye públicamente a través de este repositorio GitHub bajo la Licencia No Comercial Creative Commons 4.0\nCreative Commons Licence This work is licensed under a Creative Commons Attribution-NonCommercial 4.0\nAgradecimientos # Queremos agradecer al LIIGH - UNAM por el apoyo y facilidades prestadas para poder impartir estos cursos. Queremos explícitamente agradecer, de manera muy especial, a la Dra. Maria Avila, la Dra, Alejandra Medina-Rivera, Licenciada Eglee Lomelin, Jair Santiago y Luis Aguilar por su extraordinaria labor y por impulsar estos cursos para el crecimiento de todos.\n","date":"10 octubre 2010","externalUrl":null,"permalink":"/playlist/","section":"","summary":"Viernes 1.","title":"Lista de Reproducción","type":"page"},{"content":" ","date":"10 octubre 2010","externalUrl":null,"permalink":"/authors/domingo/","section":"Authors","summary":" ","title":"Luis Domingo Martínez Vázquez","type":"authors"},{"content":"","date":"10 octubre 2010","externalUrl":null,"permalink":"/authors/obed/","section":"Authors","summary":"","title":"Obed","type":"authors"},{"content":"","date":"10 octubre 2010","externalUrl":null,"permalink":"/authors/shaday/","section":"Authors","summary":"","title":"Shaday","type":"authors"},{"content":"","date":"10 octubre 2010","externalUrl":null,"permalink":"/tags/videos/","section":"Tags","summary":"","title":"Videos","type":"tags"},{"content":" ","date":"1 enero 0001","externalUrl":null,"permalink":"/calendar/","section":"calendar","summary":" ","title":"calendar","type":"calendar"},{"content":"","date":"1 enero 0001","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"Especialista de Datos Jr, GF Banorte | Tesista en la UNAM | Feminista Datera |\n","date":"1 enero 0001","externalUrl":null,"permalink":"/authors/jazmin/","section":"Authors","summary":"Especialista de Datos Jr, GF Banorte | Tesista en la UNAM | Feminista Datera |","title":"Jazmín López Chacón","type":"authors"},{"content":"PhD Student | Bioinformatics | Population Genomics | Clinical Genomics | Mexican Indigenous Populations\n","date":"1 enero 0001","externalUrl":null,"permalink":"/authors/maria/","section":"Authors","summary":"PhD Student | Bioinformatics | Population Genomics | Clinical Genomics | Mexican Indigenous Populations","title":"MSc. Maria Fernanda Miron Toruno","type":"authors"}]