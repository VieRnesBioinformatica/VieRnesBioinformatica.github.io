
[{"content":"","date":"6 julio 2024","externalUrl":null,"permalink":"/","section":"","summary":"","title":"","type":"page"},{"content":"","date":"6 julio 2024","externalUrl":null,"permalink":"/tags/example/","section":"Tags","summary":"","title":"Example","type":"tags"},{"content":"an example to get you started\nThis is a heading # This is a subheading # This is a subsubheading # This is a subsubsubheading # This is a paragraph with bold and italic text. Check more at Blowfish documentation undefined\n","date":"6 julio 2024","externalUrl":null,"permalink":"/posts/1720280189427-introduccion-a-rstudio/","section":"Posts","summary":"an example to get you started","title":"Introduccion a Rstudio","type":"posts"},{"content":"","date":"6 julio 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"6 julio 2024","externalUrl":null,"permalink":"/tags/tag/","section":"Tags","summary":"","title":"Tag","type":"tags"},{"content":"","date":"6 julio 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"Lo primero que tenemos que hacer es ir a la pagina de CRAN y seleccionar la descarga dependiendo nuestro sistema operativo.\nLinux (Ubuntu) # Lo primero que vamos a hacer es abrir nuestra terminal Ctrl + Alt + T y vamos a ver el inicio asi:\nusuario@nombre-de-computadora:directorio$ Después en este espacio escribimos lo siguiente (Probablemente te pida contraseña, es tu computadora pidiéndote permisos para crear y modificar archivos):\n# Actualizar indices del sistema sudo apt update -qq # Instalar unos paquetes sudo apt install --no-install-recommends software-properties-common dirmngr # Añadir una clave de acceso para descargar R wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc # Añadir el repositorio de R desde CRAN sudo add-apt-repository \u0026#34;deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/\u0026#34; # Despues ejecutamos la orden de instalar R sudo apt install --no-install-recommends r-base # Por ultimo instalamos mas de 5000 paquetes de CRAN sudo add-apt-repository ppa:c2d4u.team/c2d4u4.0+ Listo, ya tienes R en Linux Ubuntu, si sabes como instalarlo en otra distribución puedes mandar tu aportación a mi correo (jasvpj@gmail.com)\nWindows # Descarga con este enlace el ejectuable y sigue la guia de instalación.\nMac OS # M1-3 Macs # Descarga con este enlace el ejectuable y sigue la guia de instalación.\nIntel Macs # Descarga con este enlace el ejectuable y sigue la guia de instalación.\n","date":"8 junio 2024","externalUrl":null,"permalink":"/posts/instalacion-de-r/","section":"Posts","summary":"Lo primero que tenemos que hacer es ir a la pagina de CRAN y seleccionar la descarga dependiendo nuestro sistema operativo.","title":"Instalacion de R","type":"posts"},{"content":" ¿Qué es R? # R es un entorno de desarrollo de software libre y lenguaje de programación.\n¿Por qué usar R? # Es ampliamente utilizado para la computación estadística, gráfica, y de machine learning. Ofrece una amplia variedad de funciones estadísticas(modelos lineales y no lineales, pruebas estadísticas clásicas, análisis de series de tiempo, clasificación, agrupamiento, etc.), y para realizar gráficas.\nAdemás, existen numerosas librerías que nos permiten realizar el análisis y más graficas, incluyendo para análisis de datos genómicos.\nMeme importante # pythonzzz ¿Cómo instalamos R? # Aqui hay una guia para la instalacion de R\nInstalacion de R 8 junio 2024\u0026middot;213 palabras R Tutorial Lo primero que tenemos que hacer es ir a la pagina de CRAN y seleccionar la descarga dependiendo nuestro sistema operativo. Rstudio # Es recomendable utilizar Rstudio para empezar a programar en R, puedes utilizar la siguiente guia para instalar y empezar un proyecto en Rstudio:\nComandos Basicos # Podemos entender a R como una consola super poderosa, y como cualquier computadora podemos: sumar, restar, dividir y multiplicar.\n#Sumar 2 + 2 #Restar 2 - 2 #Dividir 2 / 2 #Multiplicar 2 * 2 Como puedes ver en R, a diferencia de otros lenguajes no es necesario utilizar algún símbolo para indicar el fin de una operación básica. Ademas de esto R puede sacar el Modulo, que es el restante de una división.\n#Modulo 10 %% 3 #El resultado deberia de ser 1, el restante de division de 10/3 R también tiene un comando para obtener la parte entera de una división.\n#Parte entera de una division 10 %/% 3 #El resultado deberia de ser 3 Con esto podemos hacer operaciones basicas de calculadora pero querermos ir más allá.\nVariables # En R utilizamos \u0026lt;- para asignar un valor de cualquier tipo a una variable, una variable en programación en simples palabras es el nombre o identificacion que recibe un valor, estas pueden ser estaticas o pueden cambiar, ser locales o globales, etc.\n¡Advertencia! Para asignar variables globales se usa \u0026lt;\u0026lt;- Tipos de Variables # En R, existen varios tipos de variables que puedes utilizar en tus análisis y programación. Estos están los más comunes:\n-Numérico (numeric): Representa valores decimales, como 4.5. También incluye números enteros (integers).\n-Carácter (character): Se utiliza para almacenar texto o cadenas de caracteres. Por ejemplo, “Hola, mundo”.\n-Lógico (logical): Puede tomar dos valores: TRUE o FALSE. Se utiliza para expresar condiciones o respuestas binarias.\n-Complejo (complex): Representa números complejos, como 3 + 2i.\n-Crudo (raw): Almacena datos en formato binario sin procesar.\n-Además, hay otros tipos más avanzados, como factores (que representan categorías).\nAsignacion y uso de variables # Tenemos en una situación donde queremos registrar nuestro nombre, edad y fecha de cumpleaños.\n#Registraremos nuestro nombre, los nombres son cadenas de caracteres #es decir su comportamiento es diferente al de los numeros (Por ahora) #Para escribir una cadena de texto usamos comillas(\u0026#34;\u0026#34;)(\u0026#39;\u0026#39;) Mi_nombre \u0026lt;- \u0026#34;Jorge Alfredo Suazo Victoria\u0026#34; #Nuestro cumpleaños va a ser registrado en el siguiente orden [Dia] de [Mes] #de [año], esto tendra importancia más adelante Mi_cumpleaños \u0026lt;- \u0026#34;30 de Diciembre de 2005\u0026#34; #La edad simplemente será un numero Mi_edad \u0026lt;- 18 Si quisieramos imprimir un saludo con estos datos tenemos las siguientes opciones.\n#Utilizando la funcion cat(), el separador de cada variable es la coma cat(\u0026#34;¡Hola!, mi nombre es\u0026#34;, Mi_nombre ,\u0026#34;tengo\u0026#34; , Mi_edad , \u0026#34;años, y cumplo el\u0026#34; , Mi_cumpleaños) #Utilizando sprintf(), es una forma muy parecida a como hacemos cadenas de #texto en lenguajes como C print(sprintf(\u0026#34;Hola, mi nombre es %s, tengo %d años, y cumplo el %s.\u0026#34;, Mi_nombre, Mi_edad, Mi_cumpleaños)) Las diferencias entre ambos son las siguientes:\nprint(): # Devuelve el objeto tal cual, incluyendo comillas si es una cadena de caracteres. Útil para imprimir variables, mensajes o resultados con fines de depuración. Puede personalizarse con argumentos como digits para controlar el número de decimales. Puede imprimir varios tipos de objetos, como cadenas, variables, tablas, marcos de datos y más. cat(): # Concatena y muestra objetos sin comillas. Permite especificar un separador personalizado con sep. Solo admite vectores atómicos (conjunto de datos del mismo tipo). Puede usarse para escribir valores en un archivo. Agrega saltos de línea automáticamente si usas \\\u0026quot;\\\\n\\\u0026quot; como separador. Elimina información específica del código (por ejemplo, convierte n en una nueva línea). Vectores o listas # En R, las diferencias principales entre un vector y una lista son las siguientes:\nUnidimensional vs. Multidimensional: # Un vector es un objeto unidimensional. Puede contener elementos del mismo tipo (numéricos, lógicos, caracteres, etc.). Una lista, en cambio, es un objeto multidimensional. Puede contener elementos de diferentes tipos. Estructura y Contenido: # Los vectores contienen elementos homogéneos (del mismo tipo). Las listas pueden contener elementos heterogéneos (de diferentes tipos), incluso otras listas. El siguiente problema sera descifrar que edad tendremos en una fecha impuesta por el usuario, para esto tenemos que desentrañar mi fecha de cumpleaños.\n#Utilizaremos el comando strsplit(), este comando separa un string (cadena de #texto) usando el separador que establece el usuario, ejemplo: strsplit(Mi_cadena, \u0026#34;separador\u0026#34;) Mi_cumpleaños_separado \u0026lt;- strsplit(Mi_cumpleaños, \u0026#34; \u0026#34;) print(Mi_cumpleaños_separado) #Veremos que tipo de objeto es Mi_cumpleaños_separado class(Mi_cumpleaños_separado) Listas # Una lista en R es una colección ordenada de cualquier objeto. A diferencia de los vectores y las matrices, donde los elementos deben ser del mismo tipo, en el caso de las listas, los elementos pueden ser de diferentes tipos o almacenar distintas estructuras.\nEn una lista, se pueden extraer elementos de la siguiente forma:\n#El primer renglon se escribe [[n]] y para la columna es [m] Dia_de_mi_cumple \u0026lt;- Mi_cumpleaños_separado[[1]][1] #Si quisieramos agregar otro renglon es de la siguiente manera Mi_cumpleaños_separado[[2]] \u0026lt;- list() #Le decimos que la segunda seccion de #la lista tambien es una lista (xd) Mi_cumpleaños_separado[[2]][1] \u0026lt;- \u0026#34;howdy\u0026#34; print(Mi_cumpleaños_separado[[2]][1]) #Comprobacion #Vamos a guardar el dia, mes y año en diferentes variables Dia_cumple \u0026lt;- Mi_cumpleaños_separado[[1]][1] Mes_cumple \u0026lt;- Mi_cumpleaños_separado[[1]][3] Año_cumple \u0026lt;- Mi_cumpleaños_separado[[1]][5] #Listo, ahora revisaremos que tipo de objeto es cada uno cat(class(Dia_cumple), class(Mes_cumple), class(Año_cumple)) El unico que concuerda es el mes, porque el dia y el año son numeros, para cambiar el tipo de variable debemos hacer lo siguiente.\n#La función as.numeric() se utiliza para convertir un valor o una cadena de #texto en un número decimal (de punto flotante) en R. Cuando aplicas #as.numeric() a una cadena de caracteres que representa un número, R intenta #interpretarla como un número y devuelve el valor numérico correspondiente. as.numeric(Dia_cumple) #Comprobamos print(class(Dia_cumple)) Al pareceer no se guardo el cambio que realizamos.\n¡Advertencia! Para darle un nuevo valor o clase a una variable hay que sobreescribirla #Sobreescribimos Dia_cumple \u0026lt;- as.numeric(Dia_cumple) Año_cumple \u0026lt;- as.numeric(Año_cumple) cat(class(Dia_cumple), class(Año_cumple)) Listo ahora falta cambiar los meses a numeros, pero como son puramente texto tenemos que hacer cambios más radicales.\nDeclaraciones Condicionales # if y else # Basicamente, if es si pasa algo y else es si no pasa ese algo.\nEjemplo: Si tengo 30 pesos me compro un elote y si no me pongo a llorar.\nOperadores comunes # Igualdad (==): El operador == se utiliza para verificar si dos valores son iguales.\nDesigualdad (!=): El operador != se utiliza para verificar si dos valores no son iguales.\nMayor (\u0026gt;): El operador \u0026gt; verifica si el valor de la izquierda es mayor al valor de la derecha.\nMayor o Igual (\u0026gt;=): El operador \u0026gt;= verifica si el valor de la izquierda es mayor o igual al valor de la derecha.\nMenor (\u0026lt;): El operador \u0026lt; verifica si el valor de la izquierda es menor al valor de la derecha.\nMenor o Igual (\u0026lt;=): El operador \u0026lt;= verifica si el valor de la izquierda es menor o igual al valor de la derecha.\ngraph TD; Title(Problema del elote)---\u003e A[Dinero] A[Dinero]--\u003eB{¿Tienes 30 pesos?}; B --SI---\u003e Si[Feli] B --NO---\u003e No[Tite] # El dinero es igual a 30 Money \u0026lt;- 30 # ¿El dinero es igual a 30? if(Money == 30){ #Si print(\u0026#34;feli\u0026#34;) }else{ #No print(\u0026#34;tite\u0026#34;) } Pero\u0026hellip; ¿Y si tenemos más de dos opciones?(if(options != 2))\nifelse # Si tengo exactamente 30 pesos, quiero imprimir ‘Justo’. Si tengo más de 30 pesos, quiero imprimir ‘Espero cambio devuelta’. Y si no tengo dinero, quiero imprimir ‘tite’.\ngraph TD; Title(Problema del elote)---\u003e A[Dinero] A[Dinero]--\u003eB{¿Tienes 30 pesos?}; B --SI---\u003e Si[Feli] B --NO---\u003e No{Menos o mas} No --\"-\"---\u003e D[tite] No --\"+\"---\u003e C[Espero Cambio] # El dinero es igual a 30 dinero \u0026lt;- 30 # ¿El dinero es igual a 30? ifelse(dinero == 30, \u0026#34;Justo\u0026#34;, ifelse(dinero \u0026gt; 30, \u0026#34;Espero cambio devuelta\u0026#34;, \u0026#34;tite\u0026#34;)) #En R funciona un comando en diferentes lineas hasta que se cierra el parentesis Con esto podemos hacerenos una idea de como hacer que los meses en texto se vuelvan numeros. Lo voy a hacer pero despues veremos una forma más eficiente de hacerlo.\n#Sobreescribir Mes_cumple \u0026lt;- ifelse(Mes_cumple == \u0026#34;Diciembre\u0026#34;, 12, ifelse(Mes_cumple == \u0026#34;Noviembre\u0026#34;, 11, ifelse(Mes_cumple == \u0026#34;Octubre\u0026#34;, 10, ifelse(Mes_cumple == \u0026#34;Septiembre\u0026#34;, 9, ifelse(Mes_cumple == \u0026#34;Agosto\u0026#34;, 8, ifelse(Mes_cumple == \u0026#34;Julio\u0026#34;, 7, ifelse(Mes_cumple == \u0026#34;Junio\u0026#34;, 6, ifelse(Mes_cumple == \u0026#34;Mayo\u0026#34;, 5, ifelse(Mes_cumple == \u0026#34;Abril\u0026#34;, 4, ifelse(Mes_cumple == \u0026#34;Marzo\u0026#34;, 3, ifelse(Mes_cumple == \u0026#34;Febrero\u0026#34;, 2, ifelse(Mes_cumple == \u0026#34;Enero\u0026#34;, 1, \u0026#34;NA\u0026#34;)))))))))))) #Al final se puso \u0026#34;NA\u0026#34;(No aplica) Si no concuerda con ningun mes existente print(Mes_cumple) Switch case # El switch es como si verdaderamente estuvieramos añadiendo mas opciones, ifelse se parece más a:\ngraph TD; Title(Ifelse)---\u003e A[variable] A --\u003e B{condicion1} B --Si---\u003e Af[Fin1] B --\"No\"---\u003e C{Condicion2} C --\"Si\"---\u003e Bf[Fin2] C --\"No\"---\u003e D{Condicion3} D --\"Si\"---\u003e Cf[Fin3] D --\"No\"---\u003e Df[Fin4] Y asi, pero switch es como:\ngraph TD; Title(Switch)---\u003e A[variable] A --\u003e B{condicion1} B --case1---\u003e Af[Fin1] B --case2---\u003e Bf[Fin2] B --case3---\u003e Cf[Fin3] B --case4---\u003e Df[Fin4] Ahora como se veria en codigo\nMes_cumple \u0026lt;- switch(Mes_cumple, \u0026#34;Diciembre\u0026#34; = 12, \u0026#34;Noviembre\u0026#34; = 11, \u0026#34;Ocutubre\u0026#34; = 10, \u0026#34;Septiembre\u0026#34; = 9, \u0026#34;Agosto\u0026#34; = 8, \u0026#34;Julio\u0026#34; = 7, \u0026#34;Junio\u0026#34; = 6, \u0026#34;Mayo\u0026#34; = 5, \u0026#34;Abril\u0026#34; = 4, \u0026#34;Marzo\u0026#34; = 3, \u0026#34;Febrero\u0026#34; = 2, \u0026#34;Enero\u0026#34; = 1, \u0026#34;default\u0026#34; = \u0026#34;NA\u0026#34;) print(Mes_cumple) ¡¿Que!? ¿Por que 1?, Bueno anteriormente hicimos el mismo ejercicio pero con ifelse entonces el valor de Mes_cumple quedo en 12.\ngraph LR; A[\"\"Diciembre\"\"] --ifelse---\u003e B[12] --switch---\u003e C[1] El 1 se debe a que en switch si el input (El valor de entrada) es un numero, lo que va a hacer es buscar la posicion del input, en este caso buscó la posicion numero 12 que corresponde a \u0026ldquo;Enero\u0026rdquo; = 1. Vamos a volver a hacerlo:\nMes_cumple \u0026lt;- \u0026#34;Diciembre\u0026#34; Mes_cumple \u0026lt;- switch(Mes_cumple, \u0026#34;Diciembre\u0026#34; = 12, \u0026#34;Noviembre\u0026#34; = 11, \u0026#34;Ocutubre\u0026#34; = 10, \u0026#34;Septiembre\u0026#34; = 9, \u0026#34;Agosto\u0026#34; = 8, \u0026#34;Julio\u0026#34; = 7, \u0026#34;Junio\u0026#34; = 6, \u0026#34;Mayo\u0026#34; = 5, \u0026#34;Abril\u0026#34; = 4, \u0026#34;Marzo\u0026#34; = 3, \u0026#34;Febrero\u0026#34; = 2, \u0026#34;Enero\u0026#34; = 1, \u0026#34;default\u0026#34; = \u0026#34;NA\u0026#34;) print(Mes_cumple) graph LR; A[\"\"Diciembre\"\"] --switch---\u003e C[12] ¡Perfecto! Ya tenemos todos las variables en numeros, ahora falta calcular la edad.\nVectores # Crear funciones # Ahora necesitamos que el usuario nos diga que fecha requiere en el mismo formato de antes, pero ahora no quiero que la fecha este \u0026ldquo;hardcodeada\u0026rdquo; (Que este dentro del script).\n#Pedirle al usuario que escriba algo es facil, vamos a trabajar con la #funcion readline(), el formato seria algo asi readline(prompt = \u0026#34;Texto que muestra al #registrar entrada\u0026#34;) Fecha_Destino \u0026lt;- readline(prompt = \u0026#34;Ingresa la fecha destino: \u0026#34;) Okey, ya tenemos la fecha, ahora hay que copiar y pegar todo el codigo que hicimos antes\u0026hellip; y remplazar nombres de variables\u0026hellip;\nMejor vamos a hacer una función a este punto yo creo que ya intuimos que es una función, su definición en programación es:\nEn programación es un bloque de código diseñado para realizar una tarea específica. Puede procesar datos y devolver un resultado. Las funciones nos permiten dividir un programa en partes más pequeñas y manejables, lo que facilita la comprensión, el mantenimiento y la reutilización del código. Lo que nos interesa es lo que pone en negritas, reutilizar código. Ahora vamos a copiar y pegar nuestro código remplazando variables\u0026hellip; lo se, pero esta va a ser la ultima vez que lo hagamos.\n#La funcion para hacer funciones se llama function(), en el parentesis, vamos #a poner todas las variables externas a la funcion que se vayan emplear #adentro de la funcion convertir_fecha \u0026lt;- function(Fecha) { # Divide la cadena en palabras separadas por espacios Fecha_separado \u0026lt;- strsplit(Fecha, \u0026#34; \u0026#34;) # Extrae el día, mes y año Dia \u0026lt;- as.numeric(Fecha_separado[[1]][1]) Mes \u0026lt;- Fecha_separado[[1]][3] Año \u0026lt;- as.numeric(Fecha_separado[[1]][5]) # Convierte el mes a un valor numérico Mes \u0026lt;- switch(Mes, \u0026#34;Diciembre\u0026#34; = 12, \u0026#34;Noviembre\u0026#34; = 11, \u0026#34;Octubre\u0026#34; = 10, \u0026#34;Septiembre\u0026#34; = 9, \u0026#34;Agosto\u0026#34; = 8, \u0026#34;Julio\u0026#34; = 7, \u0026#34;Junio\u0026#34; = 6, \u0026#34;Mayo\u0026#34; = 5, \u0026#34;Abril\u0026#34; = 4, \u0026#34;Marzo\u0026#34; = 3, \u0026#34;Febrero\u0026#34; = 2, \u0026#34;Enero\u0026#34; = 1, \u0026#34;default\u0026#34; = NA) #Utilizamos c() para crear vectores, en este caso lo vamos a ocupar para #regresar los valores de Dia, Mes y Año en una sola variable (resultados) return(c(Dia, Mes, Año)) # La funcion return(), indica que valores nos va # a dar la funcion en general, en este caso la funcion \u0026#34;convertir_fecha\u0026#34; # nos va ad dar Dia, Mes Año en un vector } #Suponiendo que el usuario nos dio la fecha 13 de Noviembre de 2030 resultados \u0026lt;- convertir_fecha(Fecha_Destino) print(resultados) } \u0026ldquo;Resultado\u0026rdquo; es un vector, por lo tanto si quisieramos cambiar de clase a uno de sus elementos todo el vector cambiaria.\n#Como los vectores son unidimensionales solo hace falta el indice para acceder a un valor Resultado[1] \u0026lt;- as.character(Resultado[1]) print(class(Resultado[2])) Bueno, sabiendo esto podemos hacer la ultima función, para saber que edad tendré en una fecha establecida.\n#Vamos a usar una funcion dentro de una funcion, ya lo habiamos hecho antes #al poner print(class()) o al poner return(c()) pero ahora se hara más #evidente Conocer_Edad \u0026lt;- function(Mi_cumpleaños, Fecha_Destino){ #Utilizamos la funcion convertir_fecha Resultado_cumple \u0026lt;- convertir_fecha(Mi_cumpleaños) Resultado_Fecha \u0026lt;- convertir_fecha(Fecha_Destino) #Convertirmos Meses a Dias (Un mes tiene 30.4375 en promedio, esto porque un #año tiene 365.25 dias contando el año bisiesto) Resultado_cumple[2] \u0026lt;- Resultado_cumple[2] * 30.4375 Resultado_Fecha[2] \u0026lt;- Resultado_Fecha[2] * 30.4375 #Convertimos Meses a Años Resultado_cumple[3] \u0026lt;- Resultado_cumple[3] * 365.25 Resultado_Fecha[3] \u0026lt;- Resultado_Fecha[3] * 365.25 #Ahora sumamos para ver el total de dias, usando sum(), si a sum() le das un #vector numerico, automaticamente sumara todos los valores dentro del vector Total_Dias_cumple \u0026lt;- sum(Resultado_cumple) Total_Dias_Fecha \u0026lt;- sum(Resultado_Fecha) #Ahora sacamos la diferencia entre los Dias y lo dividimos entre 365.25 para obtener los años Diferencia_Años \u0026lt;- (Total_Dias_Fecha - Total_Dias_cumple)/365.25 #El resultado probablemente sea un numero decimal con punto flotante, asi que podemos usar floor() para redondear el valor hacia abajo Años_Aproximados \u0026lt;- floor(Diferencia_Años) return(Años_Aproximados) } Edad_Aproximada \u0026lt;- Conocer_Edad(Mi_cumpleaños, Fecha_Destino) cat(\u0026#34;Hola mi nombre es\u0026#34;, Mi_nombre, \u0026#34;tengo\u0026#34;, Mi_edad, \u0026#34;años, nací el\u0026#34;, Mi_cumpleaños,\u0026#34;en el\u0026#34;, Fecha_Destino , \u0026#34;tendré\u0026#34;, Edad_Aproximada, \u0026#34;años\u0026#34;) Listo, ahora ya sabes como calcular una edad aproximada en R, te animo a que trates de modificar el código, intentes añadir nuevas funciones, quizás agregar una función que te diga tu signo zodiacal, lo que se te ocurra, cualquier duda mi correo esta en la parte superior de la pagina en forma de arroba :).\n","date":"8 junio 2024","externalUrl":null,"permalink":"/posts/mecanicas-basicas-de-r/","section":"Posts","summary":"¿Qué es R?","title":"Mecanicas Basicas de R","type":"posts"},{"content":"","date":"8 junio 2024","externalUrl":null,"permalink":"/tags/principiante/","section":"Tags","summary":"","title":"Principiante","type":"tags"},{"content":"","date":"8 junio 2024","externalUrl":null,"permalink":"/tags/r/","section":"Tags","summary":"","title":"R","type":"tags"},{"content":"","date":"8 junio 2024","externalUrl":null,"permalink":"/tags/tutorial/","section":"Tags","summary":"","title":"Tutorial","type":"tags"},{"content":"","date":"1 enero 0001","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"1 enero 0001","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"1 enero 0001","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]